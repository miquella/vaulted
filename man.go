// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x6f\x6f\xdb\x38\xf2\x7e\x1d\x7e\x8a\x79\xd7\x04\x70\x54\xa4\xbb\xaf\xf2\xfb\xf5\x00\x5f\xe2\x6d\x7c\x6d\x1d\xc3\x72\x5a\x14\xf5\x22\xa0\xa4\x91\xcd\x0d\x45\x6a\x49\xca\xae\x51\xf4\xbb\x1f\x66\x28\xc9\x72\xea\xf6\x0a\x1c\x0e\x28\x0a\x44\xd2\xfc\xe1\x33\xcf\x3c\x33\x74\xb2\xbc\x83\xad\x6c\x74\xc0\x62\x75\x89\x66\x0b\x57\x22\x49\xef\x60\x36\x7e\x3f\x11\xc9\x7c\x2e\xda\x77\x40\xaf\x56\x97\x60\x9b\x50\x37\xc1\x83\xdf\xa0\xd6\x90\xdb\xaa\x92\xa6\xf0\x10\x36\x32\x80\xb6\xb2\x00\x8f\xb9\xc3\xe0\xa1\xb4\x0e\x64\xf4\x0c\xca\x04\x0b\x61\x83\xd1\x8a\xfd\xa7\x9f\x66\xf7\xf3\x74\x9a\x72\x8c\x55\xf9\xcf\x55\x79\x33\x88\xb4\x2a\x17\xb0\x2a\xa7\x46\x56\xb8\x2a\xe7\xf0\x79\x55\x4e\xef\xe7\xcb\xe9\xfd\x2c\x5d\x95\xf3\x3f\x45\x92\xb9\xef\x6d\x60\x75\xb9\xba\x94\xde\x37\x64\xc3\xe6\xd2\x99\x93\xd6\xe9\x1d\xdc\x4e\xd2\x9b\xc5\x94\x1f\x72\x06\x37\x0e\x65\x40\x0f\x12\x3c\x7a\xaf\xac\x81\xc6\x2b\xb3\x86\xad\x74\x4a\x66\x9a\xde\x98\x82\x8f\x30\xfe\x98\xc2\x13\xee\xc1\x07\xeb\xb0\x00\x65\xf8\x29\xe7\x91\xc0\x72\x83\xc2\xa1\x6f\x74\x20\x63\x34\x5b\xe5\xac\xa9\xd0\x84\xa1\x23\x87\xd0\x78\x2c\x20\x58\x58\xa3\x41\x27\x03\x9e\x84\x73\xa7\xb4\x16\x8c\x29\x43\xd7\xe2\xca\x58\xca\x68\x90\x70\xee\xcb\x0e\x58\x50\x1e\x64\x13\x6c\x81\x01\x73\x42\xa5\x74\xb6\x62\xe3\x08\x56\x7a\x37\x79\xf7\x8e\xb0\x39\x95\xd8\x08\x54\x39\xa8\x91\xf2\xd0\x98\x27\x63\x77\x06\xac\x83\xc6\xf8\x1a\x73\x55\x2a\x2c\x46\xad\x33\xbf\x21\x4f\xb9\xad\x6a\x19\x54\xa6\xf1\x90\x3c\x1d\x10\x2b\x15\x02\x16\x49\x5b\xde\xe9\xcc\x06\xbc\xa6\x62\xa4\xe9\x1d\xc1\x17\xbf\x52\x6b\xc3\x20\xee\x36\x68\x3a\x2c\x08\xb8\xb6\x06\x84\x83\xf2\xb0\x93\x7b\x42\x56\x79\x3a\x5f\xd1\x20\x04\x2b\x28\x51\x65\x64\xa6\xb4\x0a\x7b\x42\x32\x38\x99\x3f\x71\xfe\x5a\x95\x18\x54\x85\x60\xdb\xf3\x44\x67\x23\xd8\x6d\x54\xbe\x81\x0a\x25\x3b\x46\x4e\x45\xae\xd1\x04\xb1\xb3\x8d\x2e\x00\xbf\x28\x4f\x5c\x2d\xb0\x54\x46\x05\xd4\xfb\x84\xb9\xd2\x72\x47\x24\xcb\x8e\xa9\x3f\x60\x9a\x48\x5b\x90\xa2\xff\xb2\xd1\x1a\xc6\x8b\x59\x97\x88\xb3\x9a\x72\x87\x68\x99\x40\x8a\x5c\x98\x71\x9a\x3e\xbc\x9f\xce\xde\xc0\x18\x16\xf7\xef\x26\x04\x52\x86\xda\xee\x04\x75\x50\x81\x41\x2a\xed\xc1\x1a\xd8\xd8\x1d\x7c\x68\xe9\x1e\x5d\x78\x76\xe9\x13\x91\x4c\xe7\x62\x41\xde\xf9\x79\x1d\x88\xbf\x95\xdc\x43\x86\x50\xa3\x2b\xad\xab\x08\x64\x15\x36\xb6\x09\x10\x2b\xb9\x27\x9c\xbb\xfe\x0c\x16\x7c\x2d\x77\x86\x09\x93\x88\x8f\x54\x0e\x65\xb6\xf6\x89\x58\xda\x96\x60\x04\xb9\xc3\x02\x4d\x50\x52\xc7\xea\x79\xdb\xb8\xbc\x63\x59\x81\x25\xbb\xd2\x36\x97\x81\x6b\x77\x8e\xc9\x3a\x11\x03\xaa\x8d\x20\xb7\xa6\x54\xeb\xc6\xf1\x17\x50\x2a\x8d\x7e\x04\xca\xf8\x20\x4d\x8e\x50\x3b\x4b\x8f\x46\x80\x21\x4f\x2e\x92\x67\x78\xd3\x29\x64\x20\xbc\xff\x9f\x19\x3a\x2a\x95\xdf\x8c\xfc\x66\xf4\x97\xb7\x66\xb4\x2a\xa7\x79\xe3\x83\xad\x56\xe5\xfc\x1f\x6d\x1d\xf6\xb0\xa3\x36\x8a\x86\x74\xc6\xc6\xe3\xa8\x4b\xd4\xd3\x83\x8e\xc9\xa8\x35\x39\x8e\x04\xa1\xb6\x1b\xb4\x51\x7c\x2a\x62\x83\x1d\x7c\x11\xc1\x23\xf0\xd1\x09\x65\xb3\x2a\x17\x23\xd6\x89\x61\x87\xb0\x3b\xfa\xba\x95\x4e\xf0\x8d\x0a\xd4\x70\xac\x90\xb8\x95\xba\x89\x70\x1c\x44\xb2\x6b\xb5\x18\x34\x69\xdd\xd1\x39\x8f\x1d\xd2\xc7\x95\xac\x89\x5f\xe4\x06\xf9\x4c\x19\x31\x9e\x68\x0c\xb2\x4b\xb7\xf1\x58\x36\x1a\x94\x11\x36\x6c\xd0\x11\xd0\x6b\x27\xab\xea\x99\x46\xf9\x51\x5b\x6c\x0a\x60\x2c\xf9\xc8\x75\x53\x20\xc7\x91\xce\xc9\x7d\x8c\xd4\x0a\x99\x88\xc1\x1c\x56\x76\xcb\x9d\x3e\x9d\x8b\x69\x64\x7a\x1b\xd7\x07\xc7\xdd\xdc\xd4\xb5\x56\x58\x40\x61\xd1\xb3\xe3\x4a\x86\x7c\x03\xd6\xf4\x3d\x5a\x3b\x5c\x5d\x72\xdf\x11\x9f\xd8\xda\x0b\x15\x25\x90\x82\x28\x13\xd0\xd5\x0e\x23\xf7\x41\x42\xc0\x2f\x01\x02\x56\xb5\x26\xf5\x8c\x5a\xbd\xb6\x5a\x9a\xf5\x0b\x0f\x59\xa3\x74\x58\x5d\x2a\xd3\xd6\x86\x3e\x7e\xd9\x7d\x4c\x10\xd6\x32\x7f\x92\x6b\x64\xbd\x26\x74\xdc\xc1\x55\x17\xb1\x4f\x5a\xd2\x31\x1a\xe2\x81\x0a\x1b\x4a\x56\x94\x0a\x75\xe1\xa9\x9c\x9a\xf3\xe5\x6e\x4d\x60\xac\xbd\x05\xb9\x95\x4a\x73\x75\xa9\x43\x64\x5b\x3a\x87\xb5\x96\x39\x87\x2e\x1b\x93\x47\xf6\x5b\x07\x6b\xdf\x64\xa0\xd5\x13\x8a\x0c\x37\x72\xab\x68\x64\x9a\xa2\x37\xeb\x2a\xde\xdb\x44\x82\xca\x3c\xc7\x3a\x78\xee\x5e\xdd\x20\x9b\x10\x1f\xe8\x09\x61\x14\xf6\xa2\x76\x84\x58\x01\xff\x4a\xef\x67\x6d\x19\x62\x81\xc6\x34\xc8\x00\xbf\xc8\xaa\xa6\x4e\x0b\xb6\x63\xe5\x5f\x8d\x0f\xfd\x7c\x1b\x76\x3a\x13\x89\xfd\xc4\xba\x8c\x08\x30\xc6\x21\x36\x5c\x0f\xdd\x35\x3c\x6f\x56\x78\xf1\xf5\x2b\xd0\x21\x20\x19\x7f\x4c\x6f\x1c\x16\x1e\xbe\x7d\x7b\xb1\x2a\x17\x22\x59\xa6\x42\x6a\x9d\xd9\x2f\xff\x27\xf2\x0c\xf8\x9f\xd0\xa0\x41\xff\xd2\xff\x89\xf8\x83\x8a\x00\x33\x59\xe1\xd9\x72\x5f\xe3\x19\x0d\x18\x2f\x6e\xe2\x0c\x3a\x8b\x47\x3e\x5b\x76\x2a\xdc\xce\x26\xa0\x82\xf5\xc3\x37\x2a\x5c\xb7\xfc\xb4\x6c\x27\x22\x59\x56\x50\x2f\xba\xa4\xcf\x22\x03\xd8\x1d\xc1\x43\x05\xf0\x9e\xb7\x00\xaa\x62\x3b\x64\x94\x35\xbd\x45\x32\xbd\xed\x72\x98\xde\xf6\x1f\x1d\xdb\x1e\x3e\x4e\x79\xb4\x77\x06\xf1\xaf\xff\x68\xb4\xb4\x4f\x68\x0e\x36\x71\x69\x09\xf4\xf0\x07\xa6\x70\xce\x07\x8f\x34\xc6\xaa\xb6\x4e\xba\xfd\xb0\xd4\x17\x22\xc5\x70\x56\xc9\xfa\x73\xf4\xfa\x67\xeb\x7c\xdc\x89\xcc\xe9\x7d\xe6\xa0\x39\x52\x5b\xb3\xee\xfb\x44\xb9\x56\x95\xc4\x83\xf1\x18\xce\x3e\x1f\xfc\x79\xad\x72\x3c\x12\x13\x38\x12\x93\xc3\xe2\x32\x0c\x99\x61\x69\x1d\x47\xe2\x25\xc1\xe0\xae\x0b\x90\x2c\x27\x3c\xa9\xe9\xc0\x6f\x27\x9f\x78\xe9\xe8\x46\x65\xe3\xd1\xd3\x14\xac\xa4\x21\x27\x43\x6a\x9f\x58\xe1\x8e\x96\xb2\x1e\x25\x31\xb4\x8a\x62\x43\xa1\xd2\x65\x1a\x25\xe4\xb0\xf2\x3d\x9f\x91\xdd\xc4\x8b\x8c\xd3\xd2\x73\x61\x79\x7d\x29\xba\x39\xd8\x6a\x60\x8c\xdf\xad\x9f\xe7\x03\xcb\xad\xea\x14\xa1\x5f\x77\x0b\x45\xa3\xf0\xa2\x5d\x00\x4f\x55\x13\x2a\xea\xe8\xac\xa5\xbb\xa2\x35\xae\x20\xa1\xeb\xf6\x0f\x90\xbc\x3d\x7c\xbf\xa1\x65\x98\x4b\x6a\xf1\x0e\xc0\xe1\xc0\xf4\x4d\xe6\x83\x0a\x0d\x9f\xf5\x34\xa8\x54\x7e\x71\x92\x5f\x23\x3e\xe6\xf0\xdb\xbd\x6d\x68\x18\x6d\x55\xc1\x8b\x51\x17\x91\x56\x97\x7e\x4c\x88\xb0\xb1\x1e\xa3\x0c\xf1\x92\x82\x45\x07\x52\xf2\x7d\xa1\xa9\x2c\xb4\x4e\x14\xd2\x15\x3f\xe0\x2b\x75\xc7\x20\x89\x6b\x91\x2c\x52\xd2\x46\x58\x9d\x67\x0d\xbc\x6a\x67\xc6\xf8\x63\xfa\x38\xbe\xb9\x99\xa4\xe9\xe3\xdb\xc9\xa7\xc7\xe9\x2d\xab\x56\xe6\xc4\xd8\x80\x62\xdb\x52\xa1\xeb\x5b\xed\xd0\x66\x09\x3c\x18\xf5\x37\x6f\xa9\x80\x32\xdf\x70\x67\xd8\x72\x80\x16\xd5\xff\x14\x3e\xc9\xe9\x2c\xd2\xc9\xcd\x62\xb2\x1c\x24\xd3\x65\xb2\xec\x6f\x05\xbd\xa4\x79\xb5\x36\xe0\xf0\xef\x06\x7d\xf0\xff\x83\x4c\xd2\x74\x7a\x3f\x7b\x5c\xde\xbf\x9d\xcc\x68\x30\xbd\x84\xa3\x34\x1f\x16\xd3\xe5\xa7\xfe\x2d\xe7\x38\x8f\xd5\x6d\x57\xfc\xd8\x3a\xa7\x43\xfe\xcc\x15\x2d\xfe\x2d\x4f\x0a\xc1\x34\xac\x6b\xeb\x02\x68\x5c\xcb\x7c\x0f\xe9\xed\x5b\x4a\x79\xd1\x8a\xc0\xf1\x3e\xcd\x1c\x19\x3f\x5b\xbe\x21\x97\x86\x55\xab\x5b\xb5\x00\x15\xaf\x46\x4c\x33\xee\xb2\x17\xfe\xd9\xba\x7a\xbe\x55\xf2\xf9\xad\xb3\x6d\x43\xba\x22\x1d\x5c\x51\xbb\x1e\x2e\x5d\xc7\x77\x85\x38\x5a\x8e\x89\x5b\x2a\xe7\x43\xaf\x3a\xf1\xa6\x99\xcb\x7c\x73\x74\x1d\xed\x88\x16\x55\xe2\x9c\x3d\x0e\x56\x78\x31\xb8\x2d\xef\xa4\x3f\x64\x73\xc1\xee\xb8\x37\xc2\x91\x52\xf9\x7e\x64\x74\x77\x84\x48\xe4\x88\x0f\xc1\x25\x72\x49\xdb\x27\xdf\xbc\xa4\xd6\x76\xe7\x87\xf7\xa9\x56\xb1\x39\xd1\xa2\xbd\xed\x93\xfe\xa3\x3b\x28\x5b\xd8\x48\x33\xf0\x2a\x9c\xa5\x59\x2c\xb5\x6e\x97\x6c\x72\x0a\xe7\x95\xfc\xa2\xaa\xa6\x22\x6a\x5e\xc1\xc6\x36\xee\xa2\x0f\xea\x6d\x7f\x5f\x93\xe1\x64\x7e\x4c\x8d\xfe\x8e\xc3\x34\xe7\xcb\x9f\xe4\xf9\x30\x54\x00\xe5\x7b\xfd\xe8\xc7\xcb\x91\x90\xf0\xb5\x67\x00\x2c\xc5\x18\xb5\x4b\x76\xcc\xf0\xb9\x64\x9f\xd6\x7d\xe5\xe1\x4a\xd0\x39\x46\xe0\x70\x2d\x5d\xa1\x49\x1a\x5a\x93\xde\xc5\x81\x2f\xc3\xf9\xf3\x9c\x75\x31\xb3\xa9\x01\x59\x14\x2a\xb4\xb0\xc7\xaf\x3b\x3d\x3b\x38\x92\x99\xdd\xe2\xa8\x97\xd1\xb6\x63\x7c\x6f\x2b\xb5\x38\x2d\x89\x3c\xb2\x95\x89\x5b\x1b\x05\x91\x19\xdd\x14\xbb\x4b\xeb\x0f\x24\xf2\xc3\xf8\xe1\xdd\x72\x72\xfb\x38\x99\x7d\x78\xa4\x4e\x7b\x1c\x2f\x66\x43\x6d\x3a\x79\xff\x8d\xf5\x2b\x4e\x28\xcc\xf7\xee\x6e\x6e\xee\x1f\x66\xcb\x81\xf6\x2e\xa3\xd2\xda\xc6\x04\x98\xde\x0e\x4e\x9e\xed\x0f\x11\xc6\x8b\xd9\xaf\x78\x9f\x8d\xdf\x4f\x86\x7e\xa9\x7b\x8e\x32\xfd\xaf\xbc\xcf\xc7\xcb\xbb\xa1\xf7\x5a\x86\xcd\x2f\x7b\x5f\x44\xd1\xfa\x83\xee\x87\x71\x53\xbf\xe6\x07\x5c\x05\x53\xf6\x3f\xc9\xc5\x3b\xe9\x41\x60\x40\x3a\x73\x2d\x77\xfe\x5a\xc9\xea\xfa\xfa\xea\xea\xea\xd5\xab\x57\xbf\xfd\xf6\xdb\xef\xbf\xff\x7e\x4d\xde\x5f\xa6\x4d\x8d\x6e\x41\x9d\x93\x94\xaa\x0f\x13\x7f\xfc\x88\x54\xee\xb8\x58\x5a\x6a\xcd\xe3\x1f\xc0\x32\xe4\xb6\xe8\x2f\x38\xca\xc0\xd7\xaf\x49\x8a\xe1\xdb\xb7\xe3\xf4\x4e\xf1\xe2\xf5\x2f\xa7\xf6\x13\x1a\xbc\x1e\xda\x7d\xff\x21\x55\xf4\xf5\x4f\x1c\x51\x4d\x5e\xbf\x3c\x9c\x3d\xbd\x83\x37\x0f\x53\x98\x4b\xef\x77\xd6\x15\x30\x77\xb6\xaa\x83\xe7\xb3\xbc\x79\x98\xae\x2e\x33\x49\x63\xb5\xee\xde\xd7\xf1\x7d\x37\x3b\x78\xe6\x66\xfb\x7e\x1f\x3d\x48\x7e\x17\x79\x9c\xbe\x9d\x8f\xd3\x94\x78\xd0\xc1\xd8\xff\xea\x73\x98\x22\xe7\x57\x17\x7c\xc9\xb3\x0e\x2a\xda\x6f\xdb\x9f\x7c\x12\xf1\xef\x00\x00\x00\xff\xff\x5b\x48\xf9\xe8\x9a\x15\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x51\x6f\xdb\xba\x0e\x7e\xf7\xaf\xe0\xdb\x4d\x81\xd4\x45\xbb\x3d\xf5\xa2\x0f\xbe\x6d\xee\x6a\xb4\x4b\x8d\x28\xdd\x50\x5c\x5f\x14\x8a\x4d\xc7\xc2\x6c\xc9\x93\xe4\x64\xf9\xf7\x07\x94\x6c\xc7\x69\xbd\x62\xc0\xc1\x79\x4b\x2c\x91\xfc\x48\x7e\xfc\xa8\x70\x7d\x0f\x3b\xde\x56\x16\xf3\xf4\xdc\x94\x58\x55\x70\x19\x84\xec\x1e\x96\xd1\xd7\x45\x10\x26\x49\xd0\x9d\x82\x3f\x4c\xcf\xc1\x58\xae\xad\x01\x2e\x41\x48\x8b\x9a\x67\x56\xec\xb0\x3b\xde\x0b\x5b\x82\x2d\x11\x0c\x66\x1a\xad\x81\x42\x69\xf7\xdf\x79\x81\x4a\xf1\x1c\x73\xb2\x53\xfe\x16\x19\xb9\x70\xec\x65\xf9\x94\xb0\x98\xb9\x90\x69\xf1\x9f\xb4\xb8\x3d\x09\x9c\x16\x2b\x48\x8b\x58\xf2\x1a\xd3\x22\x81\xff\xa5\x45\xfc\x94\xac\xe3\xa7\x25\x4b\x8b\xe4\xff\x41\xb8\xd1\x53\x56\x90\x9e\xa7\xe7\xdc\x98\x96\xac\x9c\x03\xae\xe5\xa4\x3d\xbb\x87\xbb\x05\xbb\x5d\xc5\xee\xa3\x43\xc1\x3e\xc8\x73\xd6\x1a\x34\x2e\x05\x1f\x95\xdd\x2f\x1e\x1f\x29\x04\xca\x9d\xd0\x4a\xd6\x28\x2d\xec\xb8\x16\x7c\x53\xe1\x1c\x44\x01\x06\xed\xbf\x03\x65\x4b\xd4\x7b\x61\x10\x72\x2c\x08\xa8\x01\xab\x3a\x17\x17\x1b\x21\x2f\x4c\x99\x16\xab\xb3\xd0\xe1\xe9\xf0\x05\xe1\xba\xaf\xc8\x6f\xb2\x09\x58\x83\x99\x28\x44\x87\xa8\x68\xab\x0a\xa2\xd5\x12\x54\xe1\xfe\x6b\x55\x21\x85\xf1\x96\x21\x30\x74\xa8\x23\xc6\x9e\xbf\xc6\xcb\x2f\x10\xc1\xea\xe9\x71\x41\x55\xd9\x60\xa5\xf6\x01\xb5\x2c\x47\xcb\x45\x65\x40\x49\x28\xd5\x1e\xbe\x75\x45\xf5\x2e\x8c\x73\x69\xc2\x20\x8c\x93\x60\x45\xde\xdd\xf7\xc6\x0a\x25\xa1\xe6\x07\xd8\x20\x34\xa8\x0b\xa5\x6b\xcc\x1d\x25\x54\x6b\xc1\x38\x90\x07\x21\xb7\xc0\x3b\x3a\x58\x05\xa6\xe1\x7b\x09\x85\x56\x75\x18\x7c\x2f\x91\x6a\xbd\x53\x3f\x30\x07\x5b\x0a\x03\x7b\x7e\x98\x43\xa6\x31\x47\x69\x05\xaf\x0c\x70\x8d\x60\x54\xab\x33\xcc\x9d\x51\x5f\x47\xa8\x54\xc6\x29\xbe\x81\x19\x86\xdb\x30\x18\xf5\x61\x0e\x99\x92\x85\xd8\xb6\xda\xdd\x80\x42\x54\x68\xe6\x20\xa4\xb1\x5c\x66\x08\x8d\x56\xf4\x69\x0e\x68\xb3\xb0\xab\x7d\xf4\x9d\xc1\xc3\xe2\xc5\xf1\xa0\x4f\xde\xb5\xbc\x41\x5d\x73\x49\xdd\x1d\xc3\x32\x56\x69\xc7\xeb\x11\xd7\xad\x82\x2d\x4a\xd4\xdc\x22\x58\xac\x1b\xa5\xb9\x3e\x04\x63\xab\xd6\x50\x31\x28\x14\x5b\xb3\x10\xd6\xd4\x2b\x34\x6d\x65\xe9\xf3\xdb\xac\xfb\x1c\xa8\x34\x0a\x2a\x6e\x2c\xcd\x56\x40\xf1\xf2\x3e\xb3\xae\xe1\x3e\xbe\x41\x63\xe8\xe3\x6c\x64\xb9\x13\x1c\x4e\xc7\x04\x73\x61\x3b\xca\x25\x49\xb0\xee\x71\x9e\x84\xaf\x5b\x63\xa9\xa7\xad\xf1\x39\x2a\x9d\xa3\x3e\x32\x0a\xb8\xe3\x43\xd8\x8d\x6e\xbc\x54\x16\xaf\x3d\x9d\x32\xde\x1a\x1c\xd8\x33\xe6\xbc\x69\x37\xc6\x0a\xdb\xba\x5c\xa7\x8b\x4a\xc4\x09\xec\x14\xa2\xb9\x4b\x73\x7c\xf7\xa0\x5a\xea\xe3\x4e\xe4\x8e\xea\x7d\x44\x22\xa3\x54\x16\x6a\x6e\xb3\x32\xb0\xa5\x32\x48\x09\x70\x4f\x3b\x52\x09\x5f\xa4\xf0\x7d\xa3\xa9\x2d\x44\x90\x9c\xeb\x7c\x72\xaa\xbd\xb6\x8d\x40\x5c\x07\xe1\x8a\xd1\x4c\x40\x3a\xdb\xb4\x70\xd5\x0d\x6d\xf4\x9d\xbd\x46\xb7\xb7\x0b\xc6\x5e\x1f\x16\x2f\xaf\xf1\x5d\x5a\xac\x9c\x5e\x45\x12\x84\xb3\x2d\x04\xea\x41\x28\x79\x96\xa1\x31\xf0\x03\x0f\x21\x3c\x4b\xf1\xb3\x75\x09\x21\xcf\x4a\x92\x10\x6a\xf1\xb1\x5a\xd4\xff\xa9\xfa\x84\xd3\x28\xd8\xe2\x76\xb5\x58\x8f\xc0\xf4\x48\xd6\x83\x60\xfb\x1e\x53\x7f\xc4\x56\x82\xc6\x9f\x2d\x1a\x6b\xfe\x01\x24\x8c\xc5\x4f\xcb\xd7\xf5\xd3\xc3\x62\x49\x5a\x76\x01\x27\x30\x9f\x57\xf1\xfa\x65\x38\x75\x18\x13\xdf\xdd\x1c\xf6\xa4\x12\x7e\x74\xa6\x43\x7e\xe4\x0a\x84\xe9\x79\x92\x07\x8e\x86\x4d\xa3\xb4\x85\x0a\xb7\x3c\x3b\x00\xbb\x7b\x20\xc8\xab\x85\x17\x81\x53\x85\x74\x1c\x89\xde\xc8\x29\x64\x5c\xd2\x6c\x98\x4e\x82\x73\x40\x41\x22\xef\x69\xe6\xa6\xec\x5f\xe6\x8d\x00\xcd\x76\x82\x07\xd3\x63\x08\x4a\x8f\x5c\xd1\xb8\x1e\x77\xcc\xa9\xfa\x2b\x27\xb7\xa7\xc4\x2d\x84\x36\x76\x50\x1d\x5a\x5d\x39\x64\x3c\x2b\xe9\xe7\xa0\x07\xa7\x1b\x79\xe6\x3c\x8e\x44\x39\x18\x6d\xd9\x3d\x37\x47\x34\x67\xce\xdd\xb0\xf7\x8e\x4a\xd5\x3b\xb6\xaa\x57\x7d\x4f\x64\x5f\x1f\x2a\x57\x90\xf1\xaa\x22\x81\x13\x06\x78\x55\xa9\xbd\xe9\xde\x08\x83\xe1\x06\x3d\xd0\xdc\xc1\xe3\x50\x29\xb9\x45\x7d\x54\x36\x5b\x72\x39\xf2\x1a\x68\x55\x55\x40\x5e\x61\x2f\xaa\xca\x3b\x85\x59\xcd\x7f\x89\xba\xad\x89\x9a\x97\x50\xaa\x56\x9f\x0d\x41\x8d\x82\x1a\xb9\xa4\xc0\xdc\x4e\xe2\x73\xd4\x18\xb6\x96\xa3\xb9\x15\x4e\xdd\x24\xee\x4f\x14\x40\x98\x41\x3f\xdc\x0e\x1a\xe5\xe2\xfb\xe1\x16\xd9\xa8\xb0\x14\xc3\x6b\x56\x8f\xf0\xad\x64\x4f\xeb\xbe\x30\x70\x19\x50\x1e\x73\xd0\xb8\xe5\x3a\xaf\x48\x1a\x3a\x93\xc1\xc5\x91\x2f\xe3\xfd\xf3\x96\x75\x1e\x59\x2c\x81\xe7\xb9\xb0\x5d\xd9\xfd\xed\x5e\xcf\x8e\x8e\xf8\x46\xed\x70\x3e\xc8\x68\x37\x31\x66\xb0\xe5\x55\x30\x2d\x89\xee\xfd\x27\x24\x15\xd1\x83\xe3\x1b\xda\xfd\xfd\x33\xe4\x37\x12\xf9\x2d\x7a\x7e\x5c\x2f\xee\x5e\x17\xcb\x6f\xaf\x34\x69\xaf\xd1\x6a\x39\xd6\xa6\xc9\x17\x8d\xef\x5f\x3e\xa1\x30\xef\xdd\xdd\xde\x3e\x3d\x2f\xd7\x23\xed\x5d\x7b\xa5\x55\xad\xb4\x10\xdf\x8d\x32\xdf\x1c\x8e\x11\xa2\xd5\xf2\x4f\xbc\xd3\x4b\x79\xec\x97\xa6\xe7\x04\xe9\xdf\xf2\x9e\x44\xeb\xfb\xb1\xf7\x86\xdb\xf2\x8f\xbd\xaf\xbc\x68\xfd\x57\x69\xc0\x5f\xbc\x6e\x5c\x07\x92\xc4\x77\x41\x16\xef\xde\xf6\xbd\xc0\x00\xd7\xf2\x9a\xef\xcd\xb5\xe0\xf5\xf5\xf5\xe5\xe5\xe5\xd5\xd5\xd5\xa7\x4f\x9f\x3e\x7f\xfe\x7c\x4d\xde\x2f\x58\xdb\xa0\xa6\x97\x5f\x10\x16\x62\x08\xb3\x57\x6d\x95\x77\x54\xee\xb9\x58\x28\x1a\x4d\x22\xf6\x91\x24\x1b\xf4\xb2\x61\x4f\xc1\x4c\xb1\xe0\xe6\x8f\x81\x7c\xd0\xf4\x9b\xb1\xdd\xfb\x8b\xd4\xbf\x9b\x0f\x1c\x51\x07\x6e\x2e\x8e\x99\xb2\x7b\xf8\xf2\x1c\x43\xc2\x8d\xd9\x2b\x9d\x43\xa2\x55\xdd\x58\xe3\x72\xf9\xf2\x1c\xa7\xe7\x1b\x4e\x4b\xb4\xe9\xcf\x1b\x7f\xde\x6f\x0a\xb7\x61\x37\x07\xca\xdf\x0d\xfc\x51\xe0\xfb\xc8\x11\x7b\x48\x22\xc6\xa8\xeb\x7d\xd1\x86\x57\xfb\x71\x67\xcc\x2e\xcf\x68\x0f\x90\x5e\xd6\x4a\x63\xff\x64\x0f\x83\xbf\x02\x00\x00\xff\xff\x1c\x3b\x8c\x44\xd3\x0d\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xff\x6b\xe3\x38\x16\xff\xb9\xfa\x2b\xde\xf5\xe0\xa6\x81\xd6\xed\xc0\xdd\x1c\x37\x07\x07\x9d\x36\x77\x93\xdb\x69\x13\xe2\x76\x76\x97\xf5\x30\x28\xd6\xb3\x23\x46\x96\x8c\x9e\x9c\x34\xff\xfd\xf2\x24\xdb\x4d\xd3\x94\x85\x2d\x14\x62\x49\xef\xf3\xe5\xe9\xe9\x49\xd9\xc3\x67\xd8\xc8\xce\x04\x54\xf0\x5e\x64\xf9\x67\xb8\xbf\xbe\x9b\x8a\x6c\xb1\x10\xc3\x70\x71\x01\xd4\xca\xad\x05\x42\x22\xed\x2c\x41\xe5\x5d\x03\x84\x65\xe7\xd1\xec\x80\x82\xf3\xa8\xf8\xdb\x63\xa0\x88\x91\xff\x7a\x3f\x5f\xe4\xb3\x3c\xe2\x14\xd5\xa7\xa2\xba\xe9\xd1\x8a\x6a\x09\x69\xa0\xb8\xb0\xe9\x63\x66\x65\x83\x45\xb5\x80\xdf\x86\x09\x5d\x54\xcb\x6f\x22\x5b\xf9\x3f\x11\x5b\x5c\x70\x30\x4f\xdd\xdc\xdd\x16\xd5\xe2\x2d\x09\xb3\x9b\xf9\xdd\xdd\xf5\xfd\x6d\x1f\x3c\x93\xbe\xa6\x2c\xcb\x8a\x6a\xf1\x2d\x5a\xb8\x9d\xe6\x37\xcb\xd9\xe2\x61\x36\xbf\x8f\x10\xb3\x0a\xac\x3b\x88\xd3\x04\xad\x77\x1b\xad\x50\x9d\xc3\x2b\x0e\xd4\x61\x8d\x3e\xe5\x8e\x9e\x05\xc1\x99\xae\xc6\xb0\x09\x38\x2f\xfa\x15\xd2\x82\xb6\x01\xbd\x2c\x83\xde\x20\xd0\x1a\x8d\xc9\xf6\xe4\xf7\xde\xa0\x91\x3b\x58\x21\x74\x84\x0a\x82\x03\xa5\xab\x0a\x3d\xda\xa0\x65\x40\x08\x6b\xdc\xa3\x8a\x1b\x75\x28\xac\xf8\xdb\x3b\x02\xb7\xb5\x20\x7d\xdd\x35\x68\x03\x65\xd1\x71\x6f\x2c\x17\xd9\xc3\x40\x29\x55\x74\x72\xd9\x63\x94\x1e\x65\xc0\xfd\x11\x8b\xdb\xa2\x5a\x8a\xd9\xb3\x6e\xb3\x83\xb4\x8c\xa2\x96\xd2\xd9\x80\x36\x80\xab\x40\x82\xc5\x6d\x2a\xb6\x0c\x72\x44\x10\xd9\xa7\xe5\x50\x7c\x17\x52\x29\x38\x7b\x3f\xc9\xf6\xd8\xcb\xf6\x05\xb9\x6b\x77\xcc\x75\xe3\x5a\x7d\x0c\x3c\x02\x81\xb4\x0a\x48\x6e\x90\x40\x07\x90\xb4\x4f\x0a\x5b\x1d\xd6\xfd\x40\x2b\x89\xb6\xce\xab\x23\x42\xca\xf6\x50\x87\xea\x1a\x56\x22\x7e\xf6\xfa\xa8\xad\x84\x1e\x1c\x50\x50\xae\x8b\xb4\xff\xcf\xe7\xf7\x47\xb0\x19\xe9\x10\x1d\x95\x0e\xaf\x73\xc8\xa3\xaf\xa9\x2c\xe0\x93\xa6\xa0\x6d\xfd\x66\x1e\x39\xf0\x15\x85\xdd\x30\xc3\xbc\x0b\x6d\x17\x28\x55\x16\x94\xae\x69\xa4\x55\x4c\x22\x03\x18\x27\xc7\x23\x0c\x95\xf3\xa3\x2d\x6d\x83\x8b\x3a\x52\x3d\x1e\x21\xb4\x9b\x43\x3e\x06\x63\xc2\x47\xc2\x94\x8a\xb1\xde\xfb\x2c\x69\xcb\x3f\x52\x9d\x80\xf3\xe0\xb1\x35\xb2\xc4\x37\x52\x7b\x84\x34\xca\x3d\x64\xa5\xfd\x72\x31\x9a\x62\x5a\xbf\x68\x0a\x04\xd2\x98\x14\x4b\xc7\xc0\xe8\x10\xca\x37\xfb\x50\x0a\x0d\xbe\x2c\x7b\x8f\x8d\xdb\xf0\x88\x58\xc6\x5f\x74\xb0\x2f\xc7\x58\x7c\x73\xc8\x12\x33\xca\x20\x79\x90\x3e\x1c\x6f\x00\xa9\x68\x63\xfe\xf7\x36\x87\xbf\xd3\xf6\x70\x22\x50\xfd\xf1\x2e\x25\xb0\x03\x01\x5d\x5b\x7b\xa9\xa2\x8f\xc7\xf4\x93\xc0\x60\x2d\xcb\x5d\x6f\x03\x7a\xd4\xb2\xf3\xdc\x61\x7a\xce\xca\xf9\x46\x1e\xdb\x95\x1e\xaf\xa7\xc9\x3f\xc3\xf4\x97\xd9\x03\xdc\xcc\x6f\xa7\xdc\x54\x72\x21\x8d\x59\xb9\xa7\x7f\x8b\x72\x05\xe5\x4a\x94\x60\x5e\xfc\x67\x62\xfa\xa4\x03\x94\x4e\xe1\xc9\x1d\x4a\xab\x6d\x2d\xae\x4e\xf2\xae\x2c\x91\x28\x13\x1f\xfe\x7e\x32\xb3\x1b\x69\xb4\x82\x9b\x2f\x33\xe8\x48\xd6\x08\x67\x84\x08\x0d\x52\xfc\xe0\xcc\x34\xce\x23\x28\x0c\x52\x1b\x9a\x64\xe2\xc3\x3f\x4e\x1e\xd6\xe8\x11\xb6\x32\xe6\xb7\xb3\x1e\x4b\xb7\x41\x2f\x57\x06\xb9\x2a\x57\x06\x9b\xe7\x1c\xf7\xfe\xb4\xc1\x4c\xfc\xf3\x5f\x23\xdf\xd0\x2d\x80\xba\xb6\x35\x1a\x15\x27\x71\x1a\x1d\xfe\xef\x71\x06\x8b\x61\x7a\xe1\x5d\xd3\xf2\x15\xb8\x58\x88\x6b\x13\xd6\xae\xab\xd7\xf0\xb5\xbf\x46\x83\x8f\x6d\xcb\x41\x23\x7f\x20\x50\xe7\x11\x76\xae\x83\x52\x5a\xf0\xa8\xb4\xc7\x32\xf4\xd5\x15\x0f\x08\x97\x1b\x37\xb3\xca\x6b\xb4\x8a\xce\x05\xb9\x06\x83\x6e\x52\x67\xd3\x04\x14\xb4\x31\xd0\x7a\xac\x7a\x37\xc1\xf1\x9d\x00\x92\x35\x15\x17\x2b\xc9\xf7\xc3\xa8\xbc\x8d\xd2\x32\xf8\x6f\xac\x1e\x4d\xc2\xa3\x24\x67\xcf\x47\x79\xac\x63\x15\x4f\x5f\xa5\xeb\xce\xa7\xa3\x1a\xf1\x2c\x48\xfa\xc1\x40\xa0\x9b\xd6\x20\xdf\x18\x32\x68\x67\xb3\x21\xf6\x1d\x89\x71\x85\x0d\x58\xfb\x38\xcd\x1a\x83\xd7\x75\x8d\x0c\xb6\x5d\xa3\xed\x2f\x27\xb6\xf8\xf5\xfa\xf1\xcb\xc3\xf4\xf6\xfb\x75\xfe\xd3\xe2\x3a\xcf\xd9\xec\x46\x7a\x1d\x7d\xb0\x37\x0c\xe9\xe6\x5b\x38\x6d\xe3\xb1\x7a\x33\x2c\xb8\xd4\x16\xb1\xec\x42\x0c\xe7\xdd\x4b\x3d\x6d\x94\x4b\xa3\x83\xad\x36\x46\x94\x92\x7d\x8d\xfb\x92\x6c\x26\x84\xd4\x82\x22\x04\xb5\x58\xea\x4a\xa7\x15\x29\x7d\x71\xb2\x23\xf4\x5c\x6a\x62\xc8\x2d\x65\xf0\x10\x83\x3c\x05\x68\xa5\x97\x0d\x06\xf4\x2f\x5a\x1e\xc7\xed\x49\x4c\xef\x86\x08\x88\x4f\x41\x70\xd2\x6c\xbf\x72\xc5\x47\x98\x2f\xe7\x3e\x8a\xd9\x12\xfe\xf1\x4d\xe0\x45\x16\xb6\xe3\xcd\x34\xaa\x62\x80\xb1\x9c\x5c\x17\x86\x7a\xf2\x18\x3a\xcf\xaf\x0d\xa0\x74\xb2\xe2\x81\x83\xb3\xab\x49\x06\x33\x6e\xb9\x95\xd4\x86\x8b\x33\x0d\x5b\x67\x8b\x8b\xab\x89\xd0\xd4\x47\xf2\x53\x87\x85\x8d\x3c\xda\xb6\x5d\x2c\x48\xb9\x72\x3e\xc4\xb3\xb1\x58\x88\x21\xbb\x3a\xd5\xc4\x60\x6f\xa8\x0f\x6e\x67\xb2\x31\x48\x64\x76\xe9\xf8\x8d\x0d\xb4\xf7\x29\x5e\xfa\x24\x38\xc3\xac\xce\x06\x4b\xb4\x2e\x2e\xfa\x85\x45\xb5\x9c\x24\xce\xb9\x85\x46\x96\xf3\xfc\x9c\xcd\xc5\x70\xb8\x6e\x5b\x83\x79\xe9\x75\x1b\xde\x4a\x60\x5f\xf8\xfc\x9c\xfa\x18\x61\xb2\x65\x2e\x32\x5b\x89\xbf\xfe\xe5\xb2\x23\x7f\xb9\xd2\xf6\x92\xef\x38\x47\x92\x22\x90\x10\xce\x82\xef\xe2\xfb\x69\x23\x00\x00\x74\x05\x06\x6d\x1d\xd6\xf1\xd2\xf2\xf5\x06\xfe\x03\x57\x71\x67\xe2\x34\xff\x11\x86\xb1\x4f\x71\x1e\x02\x36\xf0\x7e\x58\x1e\x57\xa1\x21\x7c\x6b\xf9\xe9\xd0\x62\x3e\x9e\xa6\xb5\x56\x81\xae\x84\x18\x96\x56\xde\xd9\xd0\x38\x0a\xdf\x25\x37\xa8\xb2\x2f\x0d\x07\xfc\x3c\x66\x96\x33\x6d\x2b\x17\x1b\xe4\x59\x2b\xb9\xd9\xb9\xe7\x18\xd8\x8b\x99\x4c\x22\x66\xe0\xcb\x62\x1f\xea\x28\xc1\xa8\x56\x69\x6a\x8d\xdc\x81\xd2\xd2\xb8\x7a\x14\x9e\xda\xaa\x0e\x06\xe1\xb4\xaf\x87\xd3\x34\xa8\xcb\x98\xf8\x2e\x62\xc7\x91\xb5\x56\x0a\x2d\x48\x4b\x5b\xf4\xa0\xb0\xea\x5f\x73\xf1\xf3\xf4\x54\x8c\x5c\x7c\x62\xc6\x52\x64\x6b\x1e\xa9\x33\x61\x4c\x0b\x4b\x17\xfc\xc3\x77\x56\x64\x95\x16\xd9\x72\x2a\x7e\x0f\x00\x00\xff\xff\xa3\x34\xae\x56\xe6\x0c\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
