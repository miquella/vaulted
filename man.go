// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-exec.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-passwd.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x6d\x6f\x1b\xb9\x11\xfe\xec\xfd\x15\x03\x14\x68\x6c\x40\xde\xc0\xb9\xfb\xe4\x36\x05\x54\x5b\x77\x56\x93\xc8\x82\x57\xbe\x20\x88\x0e\x06\xb5\x3b\x2b\xf1\xcc\x25\xf7\x48\xae\x64\x21\xc8\x7f\x2f\x66\xc8\x7d\x91\xa3\xdc\xb9\x28\x5a\x20\x08\xe0\x15\xe7\x85\x33\xcf\x3c\x33\xc3\x74\x71\x03\x5b\xd1\x28\x8f\xc5\xf2\x1c\xf5\x16\x2e\x92\x34\xbb\x81\xd9\xf8\xc3\x24\x49\xe7\xf3\x24\xfe\x06\xf4\xd3\xf2\x1c\x4c\xe3\xeb\xc6\x3b\x70\x1b\x54\x0a\x72\x53\x55\x42\x17\x0e\xfc\x46\x78\x50\x46\x14\xe0\x30\xb7\xe8\x1d\x94\xc6\x82\x08\x9a\x41\x6a\x6f\xc0\x6f\x30\x48\xb1\xfe\xec\xd3\xec\x76\x9e\x4d\x33\xb6\xb1\x2c\xff\xb9\x2c\xaf\x06\x96\x96\xe5\x1d\x2c\xcb\xa9\x16\x15\x2e\xcb\x39\x7c\x5e\x96\xd3\xdb\xf9\x62\x7a\x3b\xcb\x96\xe5\xfc\xd7\x24\x5d\xd9\x6f\x65\x60\x79\xbe\x3c\x17\xce\x35\x24\xc3\xe2\xc2\xea\xff\x4c\x5a\x9b\xe5\xb9\x43\xe7\xa4\xd1\x7f\xe6\x41\x76\x03\xd7\x93\xec\xea\x6e\xca\x1f\xf9\x16\x57\x16\x85\x47\x07\x02\xa2\x0e\x68\x9c\xd4\x6b\xd8\x0a\x2b\xc5\x4a\xd1\x2f\xba\xe0\x30\x8c\x3f\x66\xf0\x88\x7b\x70\xde\x58\x2c\x40\x6a\xfe\xca\xde\xa4\xb0\xd8\x60\x62\xd1\x35\xca\x93\x30\xea\xad\xb4\x46\x57\xa8\xfd\x50\x91\x45\x68\x1c\x16\xe0\x0d\xac\x51\xa3\x15\x1e\x8f\xa6\x64\x27\x95\x4a\x38\x2f\x1c\xfe\x98\x1b\xce\x87\x08\x02\x29\xfb\xbe\x68\x93\x03\xd2\x81\x68\xbc\x29\xd0\x63\x4e\xb1\x29\xad\xa9\x58\x38\x84\x2c\xbb\x99\xbc\x7f\x4f\xc1\x39\xe6\xd8\x08\x64\x39\xc8\xb3\x74\xd0\xe8\x47\x6d\x76\x1a\x8c\x85\x46\xbb\x1a\x73\x59\x4a\x2c\x46\x51\x99\xdb\x90\xa6\xdc\x54\xb5\xf0\x72\xa5\xb0\x77\x9e\x2e\x88\x95\xf4\x1e\x8b\x34\x42\x64\x3a\x33\x1e\x2f\x29\x19\x59\x76\x43\xe1\x0b\xa7\xe4\x5a\x73\x10\x77\x1b\xd4\x6d\x2c\x28\x70\x31\x07\x14\x07\xe9\x60\x27\xf6\x14\x59\xe9\xe8\x7e\x45\x83\xe0\x4d\x42\x8e\x4a\x2d\x56\x52\x49\xbf\xa7\x48\x7a\x2b\xf2\x47\xf6\x5f\xc9\x12\xbd\xac\x10\x4c\xbc\x4f\x50\x36\x82\xdd\x46\xe6\x1b\xa8\x50\xb0\x62\x64\x57\xc4\x1a\xb5\x4f\x76\xa6\x51\x05\xe0\x93\x74\x84\xf7\x02\x4b\xa9\xa5\x47\xb5\x4f\x19\x2b\x11\x3b\x49\xba\x68\xd1\xfe\x1d\xb4\x26\x59\x0c\x52\xd0\x5f\x36\x4a\xc1\xf8\x6e\x46\x01\x74\x1b\x63\x3d\x10\x22\x5b\xb7\xac\x51\x74\x13\x08\x7a\x52\xc8\x10\x49\xfb\x38\xcb\xee\x3f\x4c\x67\x3f\xc3\x18\xee\x6e\xdf\x4f\x28\x64\x2b\x54\x66\xc7\x35\x59\xa0\x17\x52\x39\x30\x1a\x36\x66\x07\xbf\xc4\x12\x08\x2a\x1c\xab\x74\x69\x92\x4e\xe7\xc9\x1d\x69\xe7\xef\xb5\x27\x34\x57\x62\x0f\x2b\x84\x1a\x6d\x69\x6c\x45\x21\x97\x7e\x63\x1a\x0f\x21\xaf\x7b\x8a\x7a\x5b\xf1\xde\x80\xab\xc5\x4e\x33\x7c\xd2\xe4\x23\x25\x47\xea\xad\x79\x24\xcc\xc6\x84\x8c\x20\xb7\x58\xa0\xf6\x52\xa8\x90\x4b\x67\x1a\x9b\xb7\x98\x2b\xb0\x64\x55\xca\xe4\xc2\x73\x26\x4f\x31\x5d\xa7\xc9\x00\x78\x23\xc8\x8d\x2e\xe5\xba\xb1\x7c\x02\x4a\xa9\xd0\x8d\x40\x6a\xe7\x85\xce\x11\x6a\x6b\xe8\xd3\x08\xd0\xe7\xe9\x59\xfa\x2c\xfa\x87\xd5\x9e\x5c\x4b\x17\x8a\x8b\x22\xdb\x02\xc9\x68\x8e\x35\x56\xb5\xb1\xc2\xee\x0f\x3d\xd6\x45\xc8\x40\x1f\xa3\x50\xbd\x35\xda\x4a\x68\x2a\x8c\xe1\xf1\x23\xc5\xde\xd7\x31\xb9\x8c\xa2\x38\x1e\xf8\x5c\xe8\xc3\xc0\x8b\xd2\xa3\x0d\x01\x0e\x41\x0f\xa5\x1b\xe8\xa6\xaf\xd5\x03\x88\x25\xb1\xb6\x38\x6b\x81\x85\x08\x56\x03\x20\xed\x4d\x03\x3b\xe9\x36\x03\x44\x3d\x8b\x18\x99\x17\x9e\xf0\xfa\x77\xb6\x38\x2a\xa5\xdb\x8c\xdc\x66\xf4\x9b\x33\x7a\xb4\x2c\xa7\x79\xe3\xbc\xa9\x96\xe5\xfc\x1f\x11\xc7\x7b\xd8\x11\x0d\x05\x41\x52\xdc\x38\x1c\xb5\xa9\x75\xf4\xa1\x65\x02\x54\x8a\x14\x87\x02\x23\xda\x1a\xd0\x50\xf8\x9a\x84\x5b\xf6\xba\x88\x20\x42\xc4\x82\x12\xf2\x66\x59\xde\x8d\x38\x33\x43\x86\x61\x75\x74\x3a\xb6\x2f\x70\x8d\xf4\x94\x6c\xae\x08\xdc\x0a\xd5\x84\x5c\xf7\x8d\xaa\xa5\xaa\x60\x34\x8d\xea\xe8\x9e\x87\x0a\xe9\x70\x25\x6a\x0a\x24\xa9\x41\xbe\xd3\x8a\x18\x83\x68\x00\x44\xeb\x6e\xe3\xb0\x6c\x14\x48\x9d\x18\xbf\x41\x4b\xd0\x5c\x5b\x51\x55\xcf\x38\xde\x8d\x62\x79\x90\x01\x6d\x48\x47\xae\x9a\x02\xd9\x8e\xb0\x56\xec\x83\xa5\xd8\x08\x92\x60\xcc\x62\x65\xb6\x18\xd1\x33\x0d\x29\x8d\x76\x9d\xb7\xcc\x86\x4d\x5d\x2b\x89\x05\x14\x06\x1d\x2b\xae\x84\xcf\x37\x60\x74\x47\x26\xb5\xc5\xe5\x39\xf3\x16\x55\x20\x4b\xbb\x44\x86\x16\x42\x46\xa4\xf6\x68\x6b\x8b\x81\x2d\x40\x80\xc7\x27\xcf\xa5\xa1\xa8\xfb\x04\xf0\xad\x8d\x12\x7a\xfd\xca\xc1\xaa\x91\xca\x2f\xcf\xa5\x8e\xb9\xa1\xc3\xaf\xdb\xc3\x14\xc2\x5a\xe4\x8f\x62\x8d\x5c\x31\x14\x1d\xdb\xab\x6a\x2d\x76\x4e\x0b\xba\x46\x43\x38\x88\xd8\x4d\x4a\x89\xaa\x70\x94\x4e\xc5\xfe\x32\xbf\xa5\x30\x56\xce\x80\xd8\x0a\xa9\x38\xbb\x54\x5e\x22\xa6\xce\x62\xad\x44\xce\xa6\xcb\x46\xe7\x81\x2f\x8c\x85\xb5\x6b\x56\xa0\xe4\x23\x26\x2b\xdc\x88\xad\xa4\xb1\x45\x17\x9d\x58\x9b\xf1\x4e\x26\x00\x54\xe4\x39\xd6\xde\x31\xdf\xa9\x06\x59\x84\xf0\x40\x5f\x28\x46\x7e\x9f\xd4\x96\x22\x56\xc0\xbf\xb2\xdb\x59\x4c\x43\x48\xd0\x98\xa8\x03\xf0\x49\x54\x35\x71\x93\x37\x2d\x2a\x7f\x6b\x9c\xef\xe6\x83\x21\x75\x30\x90\x58\x4f\xc8\xcb\x88\x02\xc6\x71\x08\x05\xd7\x85\xee\x12\x9e\x17\x2b\xbc\xfa\xf2\x05\xe8\x12\x90\x8e\x3f\x66\x57\x16\x0b\x07\x5f\xbf\xbe\x22\x42\x38\xac\x6d\x8b\xa5\x45\x2e\x97\x24\xf3\xc2\x7a\x10\xa0\x71\xd7\x8d\x32\x1c\x79\xfa\xf0\x7d\x2e\x14\x10\x75\xd0\x44\xf5\x54\xcb\xc0\x9f\xc4\x21\x59\x22\x94\x5a\x99\xa7\xbf\x25\xf9\x0a\xf8\x5f\xa2\x40\x81\x7a\xd1\xff\x69\xf2\x13\x25\x1b\x66\xa2\xc2\x93\xc5\xbe\xc6\x13\x1a\x04\x5c\x72\x15\xf8\xec\x24\x84\xf6\x64\xd1\x76\xcb\x96\xe7\x08\x18\xdd\x90\x14\x7a\x4f\x3b\xe8\xc6\xaa\x22\xc0\x1a\xa6\x58\x97\xb4\xc1\x39\x09\x48\x63\x75\x94\x06\x4a\xb4\x73\x3c\xad\x11\x5a\xe2\x30\x20\x8d\xee\x24\xd2\xe9\x75\xeb\xc3\xf4\xba\x3b\x74\x28\xdb\x1f\xce\x78\x04\x6b\x05\xc2\x5f\x7f\x2a\xb4\x30\x8f\xa8\x7b\x99\x90\x11\x4f\x1f\xbf\x23\x0a\xa7\x7c\xf1\x50\x2e\xc7\x12\x76\x96\x64\xe8\x4f\x2a\x51\x7f\x0e\x5a\x7f\x8d\xca\xc7\x2d\x99\x1d\x9f\x3b\x7b\x6e\x13\xca\xe8\x75\x57\x8f\xd2\x46\xf6\x4b\xee\xb5\x43\x7f\xf2\xb9\xd7\xe7\x94\xcc\xf1\x80\xb4\xe0\x80\xb4\xfa\x01\x73\x68\x72\x85\xa5\xb1\x6c\x89\x87\x39\x02\x5e\x34\x90\x2e\x26\x3c\x51\xd1\x85\xdf\x4d\x3e\xf1\x70\xf8\x99\x72\x8e\xda\xff\x7a\x09\x7f\x81\xd3\x8f\x37\x93\x19\x7c\xb8\xbd\x9e\xfe\xf4\x89\x86\xa0\xc5\xcd\x24\x9b\xc0\xf5\xed\x55\x36\x82\xf1\xfb\xec\x16\xee\xe7\xd7\xe3\xc5\xe4\xb2\xdf\x7a\x02\xc5\x5f\xa4\x55\x41\x38\x4e\xfa\x6d\xe8\x09\x73\xfe\x7c\xc6\x56\xda\x51\xa9\x71\xe8\xe0\xe5\x3d\x7e\x38\xa2\x77\xb9\x48\x86\x52\x81\x3a\xe9\x42\xd9\x22\x0b\x84\xd8\x2f\x00\xcf\x67\xa4\x76\xe2\x09\xb8\x56\xc2\x31\x7c\x78\x98\x2d\x9a\xc1\xc8\xd2\xd9\x6f\x2b\xf8\x74\x20\xb9\x95\x2d\xbf\x75\x2b\x50\x21\xa9\xb1\x9f\xc5\x75\xe0\x68\x91\x57\xc4\x4f\xab\x6e\x62\x01\x63\x0b\xa2\xed\x76\x5a\x20\x02\x30\x0a\xbf\x9d\xd7\x57\x98\x0b\x22\xac\x36\x80\xc3\xf6\xef\x9a\x95\xf3\xd2\x37\x7c\xd7\xe3\x41\x25\x90\x25\x47\x51\x3c\xe2\x6b\x0e\xcf\xd2\x0c\x53\x5b\xb3\x95\x05\x0f\xc6\xad\x45\x1a\x5d\xbb\xa6\x97\xf8\x8d\x71\x18\x48\x95\x67\x28\x2c\xda\x20\xa5\xdf\x26\x9a\xd2\x42\xe3\x64\x21\x6c\xf1\x9d\xaa\xa0\x1a\x1c\x38\x71\x99\xa4\x77\x19\x31\x3d\x2c\x4f\x57\x0d\xbc\x89\x24\x3b\xfe\x98\x3d\x8c\xaf\xae\x26\x59\xf6\xf0\x6e\xf2\xe9\x61\x7a\xcd\x1c\xbc\xb2\xc9\x58\x83\x64\xd9\x52\xa2\xed\x0a\xba\x2f\xe6\x14\xee\xb5\xfc\x9d\x77\x16\x40\x91\x6f\xb8\xfe\x4c\x39\x88\x16\xe5\xff\x58\x7c\xd2\xe3\x5e\x64\x93\xab\xbb\xc9\x62\xe0\x4c\xeb\xc9\xa2\xdb\x11\x3b\xe2\x74\x72\xad\xc1\xe2\xef\x0d\x3a\xef\xfe\x07\x9e\x64\xd9\xf4\x76\xf6\xb0\xb8\x7d\x37\x99\x51\x9b\x7d\x0d\x07\x6e\xde\xdf\x4d\x17\x9f\xba\x5f\xd9\xc7\x79\xc8\x6e\x5c\xf8\xe2\xc8\x7b\xd4\xe4\x1f\xa9\xa2\x35\x30\xe2\xa4\x48\x18\x86\x75\x4d\xdb\x95\xc2\xb5\xc8\xf7\x90\x5d\xbf\x23\x97\xef\x22\xd5\x1c\xee\x53\xff\x47\xca\x19\x3f\x5b\xf1\xda\x55\xa0\x1b\x4f\x01\x25\x8f\x93\x0c\x66\xd6\xf2\xca\x3d\x5b\x8a\x4e\xb7\x52\x3c\x7f\xef\x88\xc5\xce\x5b\x65\xa7\x8a\x48\xe1\x3b\xcb\x43\x6c\x93\x87\xe5\x51\x4a\xeb\x7c\xc7\x6d\x61\x06\xc8\x45\xbe\x39\x78\x02\x69\xe1\x1c\xb8\xe8\x94\x35\x0e\x16\xc5\x64\xf0\xc6\xb2\x13\xae\xf7\xe6\x8c\xd5\x71\x05\xfa\x03\x3e\x74\x5d\xfb\x6b\x17\xa2\x50\x2e\x21\x3e\x14\xae\x24\x17\x34\xb1\xf3\xb6\x2f\x94\x32\x3b\x37\xdc\xe1\x63\xf7\x61\x47\x8b\xf8\x4a\x45\xbd\x0c\x6d\xcf\x9f\x7e\x23\xf4\x40\x6b\x62\x0d\xcd\x15\x42\xa9\xb8\x98\x90\x52\x38\xad\xc4\x93\xac\x9a\x8a\x0a\xe0\x02\x36\xa6\xb1\x67\x9d\x51\x67\xba\x37\x02\xe1\x8f\xfa\xc7\x00\xec\x16\x3a\x2e\x26\x7e\x70\x08\x53\xd7\x90\x67\xa4\xeb\x58\xaa\x6b\x95\x07\x74\xf5\xc9\x34\x8c\x0b\x36\x1b\x77\xf1\xc8\xc5\xe1\xb5\x80\x22\xd9\x26\x2d\x5c\xc0\x53\xc5\x70\x6b\xca\xf9\xd1\xea\xe0\xad\x21\x61\x33\xd2\x8f\x78\x2c\x06\x67\x2e\xd9\x0c\x93\x9a\x2e\xbb\x07\xc1\xb0\x8d\xf5\x30\x81\xac\xa9\xd1\xd2\xee\x9a\xa4\xa5\x0c\xc5\x33\x9f\x27\x71\xa1\xe3\xd7\x11\x8b\xce\xa8\x2d\xe3\xb9\x33\x28\xac\x8e\x88\x13\x56\x5f\x8a\x9d\xbb\x94\xa2\xba\xbc\xbc\xb8\xb8\x78\xf3\xe6\xcd\x0f\x3f\xfc\xf0\xe3\x8f\x3f\x5e\xd2\x55\x5e\x77\xea\x97\xe5\xdd\xf2\xaf\xe1\xea\xfc\xae\x30\xc0\x14\x1d\x1c\xc5\x9d\x2c\x24\xe7\x79\x4f\x3c\xde\x58\xa5\x83\x8b\x84\x52\x38\x02\x8b\x6b\x61\x0b\x45\xdc\x1b\x45\x3a\x15\x7d\xa9\x0c\x1b\xfc\xf3\x82\x0b\x9e\x4d\x35\x88\xa2\x90\x3e\x22\x2e\x9c\x6e\x1b\x46\xaf\x48\xac\xcc\x16\x47\x5d\x76\x22\x25\xb9\x4e\x56\xa8\xe4\x78\xcf\xe1\xc9\x4b\xea\x30\xe4\x93\x11\xb1\x32\x8d\xef\x96\xf9\xef\xf4\xa0\x5f\xc6\xf7\xef\x17\x93\xeb\x87\xc9\xec\x97\x07\xa2\xb2\x87\xf1\xdd\x6c\x48\xfe\xfd\x73\xd3\xe0\x5d\x20\xa4\xb7\x38\x42\xe1\xdf\xaa\xbb\xba\xba\xbd\x9f\x2d\x06\xcd\x6d\x11\x5a\x99\x69\xb4\x87\xe9\xf5\xe0\xe6\xab\x7d\x6f\x61\x7c\x37\x7b\x89\xf6\xd9\xf8\xc3\x64\xa8\xf7\x9b\xa7\xb0\xff\x4a\xfb\x7c\xbc\xb8\x19\x6a\xaf\x85\xdf\xbc\x58\x7b\x04\xfb\x4f\xc6\xb6\x8b\xdd\x0b\x8b\xe6\xa5\xa0\x3f\xac\xa9\xb6\x9a\xc2\xe3\x7a\xdc\xf7\x89\x95\x0e\xdf\x9b\x57\xc8\x65\xd1\xed\xc3\x52\xc3\x97\x2f\x69\x86\xfe\xeb\xd7\x43\xf7\x8e\xe1\xe2\xed\x8b\x5d\xfb\x03\x18\xbc\x1d\xca\x7d\x7b\x90\x32\xfa\xf6\x0f\x14\x51\x4e\xde\xbe\xee\xef\x9e\xdd\xc0\xcf\xf7\x53\x98\x0b\xe7\x76\xc6\x16\x30\xb7\xa6\xaa\xbd\xe3\xbb\xfc\x7c\x3f\x5d\x9e\xaf\x04\xcd\x2d\x75\xfb\x7b\x1d\x7e\x6f\xdb\x26\x0f\x35\xab\x7d\xb7\x56\xf4\xdd\xae\xb5\x3c\xce\xde\xcd\xc7\x59\x46\x38\x68\xc3\xc8\xcf\xaa\x87\xd3\xf2\xe9\xc5\x19\xbf\x09\x18\x0b\x15\xad\x29\xf1\x4d\x35\x4d\xfe\x1d\x00\x00\xff\xff\x23\x5c\xdb\x7e\x4d\x19\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedExec1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x5d\x6f\xdb\x3a\x12\x7d\xd7\xaf\x18\x60\x81\xdd\x04\x70\x54\xa4\xed\x93\x81\x3e\x68\x6d\xdd\x46\x48\x6b\x0b\x96\xdd\x22\xb8\xba\x08\x68\x69\x64\x11\x95\x48\x5d\x92\xb2\xeb\x7f\xbf\x18\x52\x92\x65\xc7\xe9\x66\xf7\x62\xf7\x29\xb1\x44\x9e\xf9\x3a\x73\x66\xe4\xaf\x1f\x60\xcf\xda\xca\x60\x9e\xde\xe1\x4f\xcc\xe0\xde\xf3\x93\x07\x58\x04\x5f\x43\xcf\x8f\x63\xaf\x7b\x09\xf6\x5d\x7a\x67\xff\xb6\x06\x35\xe8\x12\xab\x0a\x32\x59\xd7\x4c\xe4\x1a\x0e\xdc\x94\xc0\x60\xc7\xf7\x28\x1c\x22\x48\x05\x4a\x56\x68\xf1\x92\xa7\xc5\x32\x4e\xa2\xc4\x62\xa6\xc5\x3f\xd3\x62\x36\x46\x4e\x8b\x15\xfc\x9e\x16\xd1\x32\x5e\x47\xcb\x45\x92\x16\xf1\x1f\x90\x16\x91\x60\x35\xa6\x45\x4c\xff\xf6\x86\xd2\x22\xf6\xfc\xad\xfa\x6f\x30\xe8\x42\x7a\x97\xde\xd1\xc1\xbf\x80\xd8\xc3\x30\xad\x5b\x82\xb6\x60\x4c\x89\x7f\x6f\x24\x79\x80\x79\x98\xcc\x56\x91\xc5\xb3\xa9\x08\xff\xe3\x74\xfa\x40\x77\xe8\xe4\x96\x0b\xd4\x60\x4a\x84\x02\x99\x69\x15\x6a\xaf\x50\xb2\x86\xf3\x40\x2c\x30\x79\x63\x21\xe9\x74\x67\xa4\x2b\x25\x97\x02\x64\x71\x71\x29\xbd\x13\x69\xb1\x4a\xff\xee\x5b\xa7\xbb\xf8\x3d\x7f\xdd\xd7\xee\x95\xf8\xbd\xa4\xc1\x8c\x17\xbc\x77\xab\xad\x2a\x08\x56\x0b\x72\x9d\x7e\x93\xfb\x40\xf5\x20\x83\xc3\x03\x23\xc1\x41\xf9\x90\x20\x92\x81\x20\x49\x36\x5f\xa3\xc5\x67\x08\x60\xb5\xfc\x12\x52\x62\xb7\x58\xc9\x03\x14\x52\x41\x8e\x86\xf1\x4a\x83\x14\x50\xca\x03\x7c\xeb\x3c\x76\x10\xda\x42\x6a\xdf\xf3\xa3\xd8\x5b\x11\xba\x7d\xde\xd8\x28\x6b\x76\x84\x2d\x42\x83\xaa\x90\xaa\xc6\xdc\x66\x44\xb6\x06\xb4\xf5\xfa\xc8\xc5\x0e\x58\x97\x6c\x23\x41\x37\xec\x20\x80\x32\xea\x7b\xdf\x4b\x14\xc0\xc5\x5e\xfe\xc0\x1c\x4c\xc9\x35\x1c\xd8\x71\x02\x99\xc2\x1c\x85\xe1\xac\xd2\xc0\x14\x82\x96\xad\xca\x30\xb7\x97\x20\xc7\xc2\x42\x55\x32\x63\x64\x5f\xc3\x0d\xfa\x3b\xdf\x43\xb1\xe7\x4a\x8a\x1a\x85\x99\x40\x26\x45\xc1\x77\xad\xb2\x27\xa0\xe0\x15\xea\x09\x70\xa1\x0d\x13\x19\x42\xa3\x24\x3d\x9a\x00\x9a\xcc\xbf\xf5\x2f\x0a\x20\x64\x7a\xa7\x51\x6b\x2e\xa9\x58\xde\x9c\x6b\xb6\xad\xba\xd4\xef\x50\x60\x07\x4a\xb9\xc6\xba\x91\x8a\xa9\xe3\xb9\xc7\x22\x77\x15\x38\xe5\xc8\x87\x75\x89\x5e\x83\xaa\x66\x02\x85\x39\x3b\xae\x8d\x54\x98\x03\x17\xd6\x80\x4b\x13\x05\xdd\x6a\xfb\x54\x1b\x64\xf9\xf5\xc4\x67\x4c\x9c\x27\x9e\x15\x06\x95\x4b\xb0\x4b\xba\x63\x7f\xab\xe9\x17\xa1\x5f\x61\x99\xd7\xd3\x76\xe0\xb1\x65\xd6\x88\x48\x47\xd9\xc2\x81\xeb\x72\xc4\xa8\x8b\x8c\x29\x2c\x14\xea\x92\xd0\x12\xc3\x94\x01\x06\x02\x0f\xd0\x25\xd1\x21\xd3\x83\xd7\xf3\xc5\xa0\xc3\xb0\x12\xd1\x70\x97\x63\xd7\x26\xc1\xf7\x04\x1e\xc3\x27\xdb\xd7\xbf\x93\xb7\x28\xcc\x1f\x53\xf8\x1b\xdc\x7c\x7f\x08\x17\xf0\x75\x39\x8f\x7e\x7b\x22\x5a\xaf\x1f\xc2\x24\x84\xf9\x72\x96\x4c\x20\xf8\x92\x2c\x61\x13\xcf\x83\x75\x38\x1d\x29\xb1\xd8\xfb\xf7\x7e\x9d\x93\x4d\x6f\x78\x6a\xb3\x64\x9f\xdf\x5a\x23\x3d\xf7\x5b\x8d\x1a\xde\x5e\x34\x23\x7b\x7a\xe0\x29\x52\x6f\x7c\xcb\x15\x82\xe2\x49\xd6\x89\xe5\x04\x28\xd4\x6d\x65\xe8\xf1\x25\xe9\x7b\x0a\x53\x67\x48\xa8\x98\x36\xd4\xa7\x1e\xd9\xcb\xdb\x11\x07\x07\xfb\x7d\xba\x6f\x46\x37\xf7\x9c\x5d\x48\x10\xe6\xdc\xa4\xc5\x8a\x58\x1f\xc7\xde\xfa\x6a\x45\xea\x56\x1b\x62\x56\x47\x41\x90\x2a\x47\x75\x2a\x3f\x55\x8b\x14\xb3\x1b\x3a\xd1\x42\x1a\x9c\x3a\x35\xc9\x58\xab\x71\x10\x8f\xae\x55\xb5\x6d\xfb\x76\xab\x0d\x37\xad\x8d\xf5\x7a\x52\x89\x27\xde\x55\x8e\x4c\x9c\xc0\x8e\xce\x12\x29\x1b\x25\xf7\x3c\xb7\x4a\xd7\x5b\x24\x2d\x12\xd2\x40\xcd\x4c\x56\x7a\xa6\x94\x1a\x29\x00\xe6\x9a\x82\x64\xdb\x25\xc9\x7f\x59\x68\x2a\x0b\xe9\x43\xce\x54\x0e\x23\x31\x81\x3d\x53\xdc\x29\x00\xe9\xe4\xc8\x89\xa9\xe7\xaf\x12\xea\x4c\x48\x6f\xb6\x2d\xbc\xef\x3a\x22\xf8\x9e\x3c\x07\xb3\x59\x98\x24\xcf\x8f\xe1\xd3\x73\x34\xa7\xbe\xa0\x49\x18\x08\xe0\xf6\x6e\xc1\x51\x59\x30\x8a\x8a\x65\x19\x6a\x0d\x3f\xf0\xe8\xc3\x46\xf0\x3f\x5b\x1b\x10\xb2\xac\x04\x8d\x86\x4a\x7c\xca\x16\xd5\xff\x5a\x7e\xfc\xeb\x5e\x24\xe1\x6c\x15\xae\x47\xce\xf4\x9e\x10\xf3\x34\x66\x0a\x8d\xab\x31\xd5\x87\xef\x04\x28\xfc\xb3\x45\x6d\xf4\xff\xc0\x93\x24\x89\x96\x8b\xe7\xf5\xf2\x31\x5c\xd0\x6c\x7b\x07\x67\x6e\x6e\x56\xd1\xfa\x69\x78\x6b\x7d\x8c\x5d\x75\x73\x38\xd0\x90\xe8\x34\xec\xaa\xc9\x5f\x41\x01\xd7\x3d\x4f\x72\xcf\xd2\xb0\x69\xa4\x32\x50\xe1\x8e\x65\x47\x48\xe6\x8f\xe4\xf2\x2a\x74\x4a\x73\x3e\x20\xff\x7f\x8a\x13\x5c\x8c\xec\x5e\xda\x75\x37\xf7\x73\x40\x6e\x4a\x54\x8e\xcb\x16\xe6\x1f\xfa\x62\xc8\xdd\xec\x39\xbb\x5c\xb6\xba\x5e\xa7\x45\xe1\x04\x45\x9a\xf0\xca\x30\x00\xd9\x98\x17\xdd\x51\x70\xa5\xcd\x20\x6d\x4e\xaf\x33\x96\x95\xf4\xef\x20\x3a\x3d\x9b\x9d\x14\xdd\x58\xc4\xd1\xe0\xf7\x46\x1b\xe3\x81\xe9\x93\x37\xb7\x16\xce\x36\xa0\x39\x93\xc3\x1e\xd8\xc8\x7e\xc0\xb9\x6e\x71\xf9\xb1\x0b\x70\xc6\xaa\x8a\x54\x94\x6b\x60\x55\x25\x0f\x0e\x62\x74\x71\x8b\xce\xd1\xdc\xba\xc7\xa0\x92\x62\x87\xea\x24\x9f\xa6\x64\x62\x84\xea\x29\x49\xbb\x22\xab\x2a\x38\xf0\xaa\x72\xa0\x70\x53\xb3\x9f\xbc\x6e\x6b\xe2\xff\x3d\x94\xb2\x55\xb7\x83\x51\x2d\xa1\x46\x26\xc8\x30\x33\x57\xfd\xb3\xfc\x1b\x06\xb4\xed\x25\xc3\xad\x84\xd2\x40\x1c\xcb\x0c\xd7\x83\x48\xd9\x3d\x67\x14\x8b\xab\xc7\x93\x6c\x2d\x2f\xac\xd9\x6e\xb7\xea\xa4\xd8\x6d\x7f\x94\xc9\xbe\x68\x2e\x00\x43\x0d\x63\x88\xf7\x99\x42\x3b\x97\xc6\xeb\xa3\x35\xc3\xcd\x04\x2a\xfe\x83\x96\xac\xa9\x35\x63\x35\x4d\x14\x97\x5f\x28\x3d\x4b\x20\x69\x1b\x54\x76\x15\xa1\x87\xfd\xd6\xeb\xf9\x05\x77\x7d\x14\xc7\xde\xa1\xe4\x59\x09\x07\xd9\x56\x39\x55\x54\x56\x7b\xcb\xed\xc1\x38\x53\xa2\x63\x1f\x53\x62\xca\x0e\x7a\xca\x59\x3d\x9d\xde\xdf\xdf\xbf\x7f\xff\xfe\xc3\x87\x0f\x1f\x3f\x7e\x9c\x52\x58\xef\x06\x5b\xfd\xd6\x1c\xc7\x6e\x67\x1c\xf1\x8b\x0e\xba\xf9\xd0\x17\xea\x72\x3c\x5e\x9f\xb1\x5c\xc3\xbd\x47\xe5\x9c\x80\xc2\x1d\x53\x79\x45\x32\xdc\x5d\x19\x20\x4e\x6d\x33\x9e\xf5\x97\xcd\xe7\x3c\x8b\x04\xb0\x3c\xe7\xa6\x63\x9f\x3b\xdd\xcf\x8e\x13\x10\xdb\xca\x3d\x4e\x86\x4a\x75\xea\xa4\x87\xbb\xac\xf2\xae\x8f\x1f\xbb\x47\x71\x41\x5c\x72\xce\xb1\x2d\xad\xd9\xfd\xa2\xf6\xca\x38\xfa\x16\x6c\xbe\xac\xc3\xf9\x73\xb8\xf8\xf6\x4c\xaa\xf6\x1c\xac\x16\xe3\x39\x70\xfa\x9a\x18\xed\x7c\xae\xd6\xf9\x15\x35\x7f\x09\x37\x9b\x2d\x37\x8b\xf5\x68\xce\xad\xdd\x54\x93\xad\x30\x10\xcd\x47\x91\x6f\x8f\x27\x0b\xc1\x6a\xf1\x16\x74\xfa\x60\x1e\xe3\xbe\xf8\xcc\xf9\x4b\xe8\x71\xb0\x7e\x18\xa3\x37\xcc\x94\x6f\x46\xef\xc8\xfe\x9b\x54\x80\x3f\x59\xdd\xd8\x0a\xbc\xa1\x81\xde\xca\xf9\x5f\xf4\x57\xdf\x59\xa4\xb5\x1d\x2f\x0b\x49\x6a\x45\x24\x3f\x11\x66\x8b\x4e\x49\xcd\xb9\x63\xd7\x18\xf1\xe9\xad\x5e\x5d\xb9\x3d\x10\xe0\xd3\xf8\xde\xcb\x83\x54\xcb\x4f\xbf\x00\xa2\x6a\x7c\x7a\x77\x8a\x34\x79\x80\xcf\x9b\x08\x62\xa6\xf5\x41\xaa\x1c\x62\x25\xeb\xc6\x68\x1b\xcb\xe7\x4d\x94\xde\x6d\x19\x2d\x2f\x4d\xff\xbe\x71\xef\xfb\xe1\x69\x37\x9b\xed\x91\xe2\x37\xe7\x1f\x40\xbd\xe5\x20\x79\x8c\x83\x24\x21\x06\xf4\x49\xb3\x1f\xcb\xe7\x2b\xf3\xcd\xfd\x2d\x8d\x46\x1a\x21\xb5\x54\xd8\x7f\x29\xfb\xde\xbf\x02\x00\x00\xff\xff\xe3\x0b\x42\xc8\xe5\x11\x00\x00")

func vaultedExec1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedExec1,
		"vaulted-exec.1",
	)
}

func vaultedExec1() (*asset, error) {
	bytes, err := vaultedExec1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-exec.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedPasswd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x5d\x6a\xeb\x30\x10\x85\xdf\xbd\x8a\x59\x40\x62\xb8\x4b\xc8\x4d\x0c\x31\xb4\x8e\xb0\xdc\x86\x82\xa0\x28\xd6\xa8\x16\xd8\x92\xd1\x8f\x4d\x77\x5f\x24\xbb\x69\x43\x69\x5f\xda\x57\xcd\x99\xef\x7c\x9a\xbc\x39\xc2\xc4\x43\xef\x51\xb0\xed\xc8\x9d\x9b\x05\xfc\xcb\x72\x7a\x84\x6a\x77\x5f\x64\x39\x21\xd9\x3a\x86\x75\xca\xb6\xd0\x76\x5c\xbf\xa0\x03\xdf\xe1\xf2\x6a\xac\x00\x23\x81\x2f\xa8\xb4\x4e\x9f\xaa\x13\xa1\x25\x4d\x08\x26\xff\x33\xb9\xbf\x05\x31\x59\x03\x93\xa5\xe6\x03\x32\x49\xbe\x8b\x19\xfb\x25\x48\x8f\x70\x28\xe8\xbe\x2e\x49\x53\x9e\xaa\xb4\xb8\x37\xda\xa3\xf6\xa0\x74\x72\xfa\x48\x2f\x42\xa0\x1c\x04\xed\x4d\x68\x3b\x14\x1b\x30\xba\x7f\xbd\x75\x57\x6e\xfd\x93\xc8\x13\xaf\x94\x2b\x27\xfa\x3c\xee\x1e\xee\x9a\xe2\xf0\x4c\x76\x94\x9e\x4f\xf5\x21\xfa\xa0\x9e\x94\x35\x7a\x88\xa5\x13\xb7\x8a\x5f\x7a\x8c\x14\x87\x7e\x03\xca\xc3\xac\xfa\x1e\x2e\x08\xc1\xa1\x00\x9e\x2e\x95\xb5\xc1\xda\x98\xbf\xb6\x4a\x63\x3f\xa9\x6e\xc0\xf8\x0e\xed\xac\x1c\xa6\xf2\xe0\xd0\x5e\x39\xa3\x35\xc3\x18\x8f\x12\x77\x22\xec\x1d\xf2\x83\x6f\x55\x9c\x7f\xe3\x9c\x45\xa2\xc6\xf9\xaf\x7d\xdf\x02\x00\x00\xff\xff\xf1\x83\xc8\xb9\x72\x02\x00\x00")

func vaultedPasswd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedPasswd1,
		"vaulted-passwd.1",
	)
}

func vaultedPasswd1() (*asset, error) {
	bytes, err := vaultedPasswd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-passwd.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x5d\x6f\xdb\x3a\x12\x7d\xd7\xaf\x18\x60\x81\x5d\x07\x70\x14\xa4\xed\x93\x17\x7d\xd0\xc6\xba\x8d\x91\xd4\x16\x2c\xa7\x45\x70\x75\x11\xd0\xd2\x28\x22\x2a\x91\xba\x24\x65\xd5\xff\x7e\x31\xa4\xbe\x9c\xb8\xd9\x2c\x16\x7b\xdf\x6c\x4a\x9c\xcf\x33\xe7\x8c\xfc\xdd\x2d\x1c\x58\x53\x1a\xcc\x92\x4b\x5d\x60\x59\xc2\xb5\xe7\xc7\xb7\xb0\x0e\xbe\x86\x9e\x1f\x45\x5e\xf7\x14\xdc\xc3\xe4\x12\xb4\x61\xca\x68\x60\x02\xb8\x30\xa8\x58\x6a\xf8\x01\xbb\xc7\x2d\x37\x05\x98\x02\x41\x63\xaa\xd0\x68\xc8\xa5\xb2\xff\xad\x15\x28\x25\xcb\x30\xa3\x7b\xd2\xbd\x45\x97\xac\xbb\xf8\x71\xbd\x89\xe2\x55\x6c\x5d\x26\xf9\xbf\x92\xfc\xe6\xc4\x71\x92\x6f\x21\xc9\x57\x82\x55\x98\xe4\x11\xfc\x9e\xe4\xab\x4d\xb4\x5b\x6d\xd6\x71\x92\x47\x7f\x78\xfe\x5e\x9d\xbb\x05\xc9\x65\x72\xc9\xb4\x6e\xe8\x96\x35\xc0\x94\xf8\x6f\xef\x0b\x99\x5c\x6a\xd4\x9a\x4b\xf1\x9f\xa2\x88\x6f\x61\x19\xc6\x37\xdb\x95\x3d\xb4\xb9\xc4\x6f\x54\x6b\xd6\x68\xd4\xb6\x10\xce\x77\x7c\x1b\xde\xdf\x93\x0f\x14\x07\xae\xa4\xa8\x50\x18\x38\x30\xc5\xd9\xbe\xc4\x39\xf0\x1c\x34\x9a\x7f\x7a\xd2\x14\xa8\x5a\xae\x11\x32\xcc\x29\x5c\x0d\x46\x76\x26\xae\xf6\x5c\x5c\xe9\x22\xc9\xb7\x17\xbe\x8d\xa7\x8b\xcf\xf3\x77\x7d\x5d\x7f\x51\x13\x2f\xae\x31\xe5\x39\xef\x22\xca\x9b\xb2\x84\x60\xbb\x86\xae\x81\x4a\x96\x08\x94\x38\xc8\x7c\x3c\x30\x12\x9c\x29\x1f\x62\x44\x72\x10\xc4\xf1\xc3\xd7\xd5\xfa\x0b\x04\xb0\xdd\xdc\x87\x54\xa6\x3d\x96\xb2\xb5\x48\xc8\xd0\x30\x5e\x6a\x90\x02\x0a\xd9\xc2\xb7\xae\xd6\xce\x84\xb6\x26\xb5\xef\xf9\xab\xc8\xdb\x92\x75\x7b\x5e\x1b\x2e\x05\x54\xec\x08\x7b\x84\x1a\x55\x2e\x55\x85\x99\x45\x9a\x6c\x0c\x68\x1b\xf5\x91\x8b\x67\x60\x1d\xca\x8c\x04\x5d\xb3\x56\x40\xae\x64\xe5\x7b\xdf\x0b\xa4\xe2\x1f\xe4\x0f\xcc\xc0\x14\x5c\x43\xcb\x8e\x73\x48\x15\x66\x28\x0c\x67\xa5\x06\xa6\x10\xb4\x6c\x54\x8a\x99\xbd\xd4\x17\x16\x4a\x99\x32\xf2\xaf\x61\x86\xfe\xb3\xef\x4d\x1a\x33\x87\x54\x8a\x9c\x3f\x37\xca\xbe\x01\x39\x2f\x51\xcf\x81\x0b\x6d\x98\x48\x11\x6a\x25\xe9\x68\x0e\x68\x52\x9f\x9a\x71\xd2\x80\x53\x50\x79\x4b\xae\xa9\xc7\xae\xf4\xcf\x28\xb0\x33\x4a\xb5\xc6\xaa\x96\x8a\xa9\xe3\x69\xc4\x22\x73\x1d\x18\x6b\xe4\xc3\xae\x40\xaf\x46\x55\x31\x41\xc0\x99\xbe\xae\x8d\x54\x76\xf0\x26\xc3\x48\x49\x37\xda\x9e\x6a\x83\x2c\x3b\x5f\xf8\x94\x89\xd3\xc2\xb3\xdc\xa0\x72\x05\x76\x45\x77\x58\x6e\x34\xfd\x1b\xb1\x7c\x82\x32\x2f\x95\x55\x45\x21\x0f\xfc\x60\x91\x35\x01\xd2\x51\x36\xd0\x72\x5d\x4c\x10\xf5\xa2\x62\x0a\x73\x85\x16\xd9\x6e\xa6\x80\x81\xc0\x16\xba\x22\x3a\xcb\x74\xf0\xeb\x7a\x31\xe8\x6c\x60\x06\xf8\xb3\xe6\xae\xc6\x6e\x4c\x82\xef\x31\xdc\x85\x8f\x76\x64\x7f\xa7\x68\x51\x98\x3f\x16\xf0\x37\x98\x7d\xbf\x0d\xd7\xf0\x75\xb3\x5c\xfd\xf6\x48\xb0\xde\xdd\x86\x71\x08\xcb\xcd\x4d\x3c\x87\xe0\x3e\xde\xc0\x43\xb4\x0c\x76\xe1\x62\x64\x51\x14\x07\xff\xda\xaf\x32\xf2\xe9\x8d\xa7\x3f\x31\xb5\xc7\x17\xd6\x47\x0f\x7d\xcb\x00\xef\xef\x99\x91\x3d\x3a\x70\x4c\xd4\x9b\xde\x72\x7d\xa0\x74\xe2\x5d\x6c\x21\x01\x0a\x75\x53\x1a\x3a\x7e\x89\xf9\x1e\xc1\x34\x18\x12\x4a\xa6\x0d\x8d\xa9\x47\xfe\xb2\x66\x02\xc1\xc1\x7f\x5f\xed\xd9\xe4\xe6\x81\x33\x38\xe5\x4e\xcc\xb8\xe9\x18\x28\x8a\xbc\xdd\xd9\x86\x54\x8d\x36\x04\xac\x0e\x81\x20\x55\x86\x6a\xec\x3e\x35\x4b\x96\xe8\x77\x7a\xb0\x5a\x4b\x83\x0b\x47\x26\x29\x6b\x34\x0e\xdc\x31\xa5\x40\xdd\xec\xb5\xe1\xa6\xb1\xb9\x9e\x2f\x2a\xc1\xc4\x3b\x0b\x91\xb9\x4d\x73\xfa\x2e\x61\xb2\x56\xf2\xc0\x33\x4b\x74\xbd\x47\xa2\x22\x21\x0d\x54\xcc\xa4\x85\x67\x0a\xa9\x91\x12\x60\x6e\x26\x48\x3a\x5c\x91\xfc\xd7\x8d\xa6\xb6\x10\x3d\x64\x4c\x65\x67\x49\xde\x09\xe6\x24\x88\x85\xe7\x6f\x63\x1a\x4c\x48\x66\xfb\x06\x3e\x74\x03\x11\x7c\x8f\x9f\x82\x9b\x9b\x30\x8e\x9f\xee\xc2\xc7\xa7\xd5\x92\xc6\x82\x44\x2c\x10\xc0\xed\xdd\x9c\xa3\x1a\xd4\x97\xa5\x29\x6a\x0d\x3f\xf0\xe8\xc3\x83\xe0\x7f\x36\x36\x21\x64\x69\x41\x8a\x42\x2d\x1e\xab\x45\xfd\x3f\x57\x1f\xff\x7c\x14\x71\x78\xb3\x0d\x77\x93\x60\xfa\x48\x76\xc3\x16\xe0\x7a\x4c\xfd\xe1\xcf\x02\x14\xfe\xd9\xa0\x36\xfa\xff\x10\x49\x1c\xaf\x36\xeb\xa7\xdd\xe6\x2e\x5c\x93\xb4\x5d\xc1\x49\x98\x0f\xdb\xd5\xee\x71\x78\x6a\x63\x8c\x5c\x77\x33\x68\x49\x23\x3a\x0a\x3b\xeb\xf2\x2d\x53\xc0\x75\x8f\x93\xcc\xb3\x30\xac\x6b\xa9\x0c\x94\xf8\xcc\xd2\x23\xc4\xcb\x3b\x0a\x79\x1b\x3a\xa2\x39\xd5\xc7\xbf\x8c\x70\x82\x17\x82\xdd\x13\xbb\xee\x54\x3f\x03\xe4\xb4\x57\x38\x28\x5b\x2b\xff\xd0\x2f\x24\x6e\x76\xe0\xcc\x3b\x3f\xea\xb4\x26\x8c\xa6\x88\x12\x7e\x21\x05\x20\x6b\xf3\x6a\x38\x72\xae\xb4\x19\x98\xcd\xb1\x75\xca\xd2\x82\x7e\x0e\x9c\x73\xba\x4a\xce\xac\xc5\x89\xec\x7b\x93\xc5\xac\x65\x7a\x8c\xe6\xc2\x9a\x1b\x56\xad\x91\x0d\x7b\xc3\x46\xf6\xf2\xe6\x86\xc5\xd5\x87\xca\xe5\xa5\xac\x2c\x89\x44\xb9\x06\x56\x96\xb2\xd5\xdd\x72\x3b\x5c\xdc\xa3\x0b\x34\xb3\xe1\x31\x28\xa5\x78\x46\x35\xb2\xa7\x29\x98\x98\x58\xf5\x94\x2c\x4b\x20\xab\xd0\xf2\xb2\x74\x46\x61\x56\xb1\x9f\xbc\x6a\x2a\x82\xff\x35\x14\xb2\x51\x17\x83\x53\x2d\xa1\x42\x26\xc8\x31\x33\x67\xe3\xb3\xf0\x1b\xe4\xd9\x8e\x92\xe1\x96\x41\x49\x0e\xa7\x2c\xc3\xf5\xc0\x51\x76\xcb\x99\xe4\xe2\xfa\xf1\x28\x1b\x8b\x0b\xeb\xb6\xdb\xac\x3a\x26\x76\xbb\x1f\x55\xb2\x6f\x9a\x4b\xc0\xd0\xbc\x18\x82\x7d\xaa\xd0\xca\xd2\x74\x79\xb4\x6e\xb8\x99\x43\xc9\x7f\xd0\x8a\xb5\xb0\x6e\x2c\xa5\x89\xfc\xd5\xa7\x45\x0f\x13\x88\x9b\x1a\x15\x6d\x22\x9e\x9f\x73\x37\x3a\x51\xe4\xb5\x05\x4f\x0b\x68\x65\x53\x66\xd4\x45\x59\x1e\x2c\x9e\x07\x87\x4c\x89\x0e\x71\x4c\x89\x05\x6b\xf5\x82\xb3\x6a\xb1\xb8\xbe\xbe\xfe\xf0\xe1\xc3\xc7\x8f\x1f\x3f\x7d\xfa\xb4\xa0\x54\xae\x06\xf3\x49\xbe\x4d\xfe\xee\x52\xb7\x5b\xe2\x04\x53\xf4\xa2\x93\x84\xbe\x39\x2f\x15\xf1\xbc\xac\x72\x0d\xd7\x1e\xb5\x70\x0e\x0a\x9f\x99\xca\x4a\x62\xde\xee\xca\x60\x62\x1c\x95\xa9\xbc\xbf\x1c\x38\x17\xd9\x4a\x00\xcb\x32\x6e\x3a\xc4\xb9\xb7\x7b\xb9\x18\x0d\xb1\xbd\x3c\xe0\x7c\xe8\x4e\x47\x48\x7a\xb8\xcb\x4a\xef\xbc\xe2\xd8\xcd\x89\x0b\xc2\x8f\x0b\x8e\xed\x69\xb1\xee\x57\xb3\x5f\x28\xd0\xb7\xe0\xe1\x7e\x17\x2e\x9f\xc2\xf5\xb7\x27\x22\xb2\xa7\x60\xbb\x9e\x52\xff\xf8\xfd\x30\xd9\xf2\x5c\x7b\xb3\x33\x04\xfe\xda\xdc\xcd\xcd\xe6\x61\xbd\x9b\x48\xdb\xce\x09\x99\x6c\x84\x81\xd5\x72\x92\xf9\xfe\x38\x7a\x08\xb6\xeb\xf7\x58\xa7\xaf\xdb\xa9\xdd\x57\x1f\x36\xff\x93\xf5\x28\xd8\xdd\x4e\xad\xd7\xcc\x14\xef\xb6\xde\x81\xfd\x37\xa9\x00\x7f\xb2\xaa\xb6\x1d\x78\xcf\xd0\xbc\x17\xf4\xa7\x33\xd5\x4f\x13\x71\x6a\x87\xc5\x5c\x12\x2b\x11\xb0\x47\x90\xec\xd1\x31\xa6\x39\x0d\xe6\x1c\x0a\x3e\xbf\x3b\x90\x37\x9a\xfe\x79\x7a\xef\xf5\x8b\xd4\xbf\xcf\x6f\x18\xa2\x0e\x7c\xbe\x1a\x33\x8d\x6f\xe1\xcb\xc3\x0a\x22\xa6\x75\x2b\x55\x06\x91\x92\x55\x6d\xb4\xcd\xe5\xcb\xc3\x2a\xb9\xdc\x33\xda\x51\xea\xfe\x79\xed\x9e\xf7\x22\x69\x17\x98\xfd\x91\xf2\x37\xa7\x9f\x39\xbd\xe7\x20\xbe\x8b\x82\x38\xa6\xae\xf7\x45\xb3\x9f\xc4\xa7\x9b\xf1\xec\xfa\x82\x24\x90\xa4\xa2\x92\x0a\xfb\xef\x61\xdf\xfb\x77\x00\x00\x00\xff\xff\x6e\x0e\x37\x8f\x87\x11\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x57\x7f\x6f\xe3\xb8\x11\xfd\x3b\xfc\x14\xd3\x14\xe8\xc5\x40\xa2\x64\x81\x76\x8b\xbb\x02\x05\xbc\x89\xdb\x75\xbb\x89\x0d\x2b\xd9\xb6\xa8\x16\x0b\x5a\x1a\xc9\xc4\x52\xa4\xca\xa1\xec\xf8\xdb\x17\x43\x52\x8a\xe3\x38\x68\x71\x01\x02\x48\x14\xe7\xbd\xf9\xf1\x66\x48\x67\x8f\x9f\x61\x2b\x7b\xed\xb1\x82\x0f\x22\xcb\x3f\xc3\xc3\xf4\x7e\x26\xb2\xe5\x52\x0c\xcb\xc5\x15\x50\x27\x77\x06\x08\x89\x94\x35\x04\xb5\xb3\x2d\x10\x96\xbd\x43\xbd\x07\xf2\xd6\x61\xc5\xef\x0e\x3d\x05\x8c\xfc\x5f\x0f\x8b\x65\x3e\xcf\x03\x4e\x51\x7f\x2a\xea\xdb\x84\x56\xd4\x2b\x88\x0b\xc5\x95\x89\x2f\x73\x23\x5b\x2c\xea\x25\xfc\x7b\xf8\xa0\x8a\x7a\xf5\x4d\x64\x6b\xf7\x2b\x6c\x8b\x2b\x36\xe6\x4f\xb7\xf7\x77\x45\xbd\x7c\xcf\x85\xf9\xed\xe2\xfe\x7e\xfa\x70\x97\x8c\xe7\xd2\x35\x94\x65\x59\x51\x2f\xbf\x85\x10\xee\x66\xf9\xed\x6a\xbe\x7c\x9c\x2f\x1e\x02\xc4\xbc\x06\x63\x8f\xec\x14\x41\xe7\xec\x56\x55\x58\x5d\xc2\x1b\x0e\x54\x7e\x83\x2e\xe6\x8e\x5e\x1c\x82\x0b\x55\x8f\x66\x13\xb0\x4e\xa4\x1d\xd2\x80\x32\x1e\x9d\x2c\xbd\xda\x22\xd0\x06\xb5\xce\x0e\xdc\x4f\xb1\x41\x2b\xf7\xb0\x46\xe8\x09\x2b\xf0\x16\x2a\x55\xd7\xe8\xd0\x78\x25\x3d\x82\xdf\xe0\x01\x55\x28\xd4\xb1\x63\xc5\xef\x7e\x22\xb0\x3b\x03\xd2\x35\x7d\x8b\xc6\x53\x16\x22\x4e\x81\xe5\x22\x7b\x1c\x28\x65\x15\x22\xb9\x4e\x18\xa5\x43\xe9\xf1\x70\xc5\xe0\xae\xa8\x57\x62\xfe\xe2\xb7\xde\x43\xdc\x46\xc1\x97\xd2\x1a\x8f\xc6\x83\xad\x41\x82\xc1\x5d\x14\x5b\x06\x39\x22\x88\xec\xd3\x6a\x10\xdf\x95\xac\x2a\xb8\xf8\x30\xc9\x0e\xd8\xcb\xee\x15\xb9\xed\xf6\xcc\x75\x6b\x3b\x75\x0a\x3c\x00\x81\x34\x15\x90\xdc\x22\x81\xf2\x20\xe9\x90\x14\x76\xca\x6f\xd2\x42\x27\x89\x76\xd6\x55\x27\x1c\x29\xbb\x63\x3f\xaa\xbe\x65\x4f\xc4\x3f\x9c\x3a\x19\x56\x44\xf7\x16\xc8\x57\xb6\x0f\xb4\x7f\xcb\x17\x0f\x27\xb0\x19\xe9\x18\x1d\x2b\xe5\xdf\xe6\x90\x57\xdf\x52\x19\xc0\x67\x45\x5e\x99\xe6\xdd\x3c\xb2\xe1\x1b\x0a\xb3\x65\x86\x45\xef\xbb\xde\x53\x54\x16\x94\xb6\x6d\xa5\xa9\x98\x44\x7a\xd0\x56\x8e\x2d\x0c\xb5\x75\x63\x58\xca\x78\x1b\xfc\x88\x7a\x3c\x41\x68\xb6\x6f\xf8\x9e\xb1\x64\xc2\xd9\x33\x96\x3d\xa7\xec\x88\x31\x15\xa2\x51\x5b\x34\x89\xc6\x3a\x70\x56\xe3\x29\xfc\x67\x2c\x8f\x09\xd8\x5b\x26\x78\x22\x8c\xb9\x1e\x1b\x2a\x95\x41\x19\x7e\x88\x42\x0c\xd8\xd8\x69\x59\xe2\x3b\xb5\x3b\xc1\x1a\xf2\x71\xcc\x4a\x87\x7a\xd4\x8a\x42\xdd\xbe\x28\xf2\x04\x52\xeb\x68\x4b\xa7\xc0\xe8\x18\x2a\xe8\xef\x55\x6f\x0d\x8a\x0c\x12\xdf\x48\xd3\x24\xa5\x0d\xeb\xb1\x28\xff\x87\x00\x22\xf4\x31\xa1\x6b\x0f\xc9\x2a\xd4\xf8\xba\x91\x1d\xb6\x76\xcb\x2b\x62\x15\x9e\xe8\x88\xe8\x54\x58\xae\x3d\x66\x09\x75\x66\x90\xdc\x4b\xe7\x4f\x8f\xb4\x58\xfd\xa0\xa8\x03\xb9\xf1\x7b\x54\x02\x67\x1e\xab\xff\xad\xbb\x08\x76\xe4\x40\xdf\x35\x4e\x56\x21\x8e\xa7\xf8\x48\xa0\xb1\x91\xe5\x3e\x85\x01\x09\xb5\xec\x1d\xcf\xcc\xc4\x59\x5b\xd7\xca\x53\xc9\x4c\x78\x89\x26\xff\x0c\xb3\x7f\xce\x1f\xe1\x76\x71\x37\xe3\x31\x99\x0b\xa9\xf5\xda\x3e\xff\x49\x94\x6b\x28\xd7\xa2\x04\xfd\xe6\x3f\x13\xb3\x67\xe5\xa1\xb4\x15\x9e\xdd\xa3\x34\xca\x34\xe2\xe6\x2c\xef\xcb\x12\x89\x32\xf1\xf1\xf7\x67\x73\xb3\x95\x5a\x55\x70\xfb\x65\x0e\x3d\xc9\x06\xe1\x82\x10\xa1\x45\x0a\x2f\x9c\x9d\xd6\x3a\x84\x0a\xbd\x54\x9a\x26\x99\xf8\xf8\x87\xb3\xc7\x0d\x3a\x84\x9d\x0c\x39\xee\x8d\xc3\xd2\x6e\xd1\xc9\xb5\x46\x6e\x85\xb5\xc6\xf6\x25\xcf\x29\x46\xa5\x31\x13\x1f\x7f\x3e\x9b\x82\xc3\xff\xf4\x2a\x9e\xd9\x6e\xab\x4a\x8c\x07\x19\x12\x1a\xaf\xf7\xd0\x1b\xb9\x95\x4a\x07\xac\x0b\xcc\x9a\x0c\x24\xfd\x60\x55\x4d\x32\xf1\xc7\x9f\x47\x77\x47\x61\x52\xdf\x75\x5a\x61\xc5\x75\x98\x85\x24\xfd\xf5\x69\x0e\xcb\xe1\xf3\xd2\xd9\xb6\xe3\x7b\xc1\x72\x29\xa6\xda\x6f\x6c\xdf\x6c\xe0\x6b\xba\x5b\x78\x17\x66\xb9\x85\x56\xfe\x40\xa0\xde\x21\xec\x6d\x0f\xa5\x34\xe0\xb0\x52\x0e\x4b\x9f\x04\x1a\x9a\x9a\x15\xcb\x13\xbe\x76\x0a\x4d\x45\x97\x82\x6c\x8b\x5e\xb5\x71\xdc\x2b\x02\xf2\x4a\x6b\x8e\xa5\x4e\xc9\xf0\x96\x0f\x4a\x90\xec\x53\x71\xb5\x96\x7c\x68\x8e\x9e\x77\xc1\xb5\x0c\xfe\x12\x04\xa8\x48\x38\x94\x64\xcd\xe5\xe8\x1e\xfb\xb1\x0e\x13\xa3\x56\x4d\xef\xe2\x78\x09\x78\x66\x48\x0a\xa8\xb6\xd3\xc8\xc7\xa8\xf4\xca\x9a\x6c\xb0\xfd\x89\xc4\xb8\xc3\x78\x6c\x5c\xf8\xcc\x3e\x7a\xa7\x9a\x06\x19\x6c\xb7\x41\x93\x4e\x6c\x0e\xf1\xeb\xf4\xe9\xcb\xe3\xec\xee\xfb\x34\xff\xfb\x72\x9a\xe7\x1c\xec\x56\x3a\x15\xe2\xe0\xd8\xd0\xc7\xeb\xc0\xd2\x2a\x13\x3a\xf3\x5d\x33\x6f\xe3\xa8\xe0\xf1\x1b\xcc\xb9\xf8\x71\xd0\x8f\xee\xd2\x18\xc1\x4e\x69\x2d\x4a\xc9\x71\x8d\x75\x89\x61\x46\x84\x38\x36\x03\x04\x75\x58\xaa\x5a\xc5\x1d\x31\x7d\xe1\x63\x4f\xe8\x58\xa9\x62\xc8\x2d\x65\xf0\x18\x8c\x1c\x79\xe8\xa4\x93\x2d\x7a\x74\xaf\xc6\x34\xdb\x1d\xb8\x18\x2f\x53\x01\x10\x9f\xbd\xe0\xa4\x99\xb4\x73\xcd\x53\x80\x6f\x2c\xc9\x8a\xd9\x22\xfe\xe9\x22\xf0\x26\x03\xbb\xf1\xb8\x1e\xbd\x62\x80\x51\x4e\xb6\xf7\x83\x9e\x1c\xfa\xde\xf1\x15\x0c\x28\x36\x66\xe8\x57\xb8\xb8\x99\x64\x30\xe7\x63\xa2\x96\x4a\xb3\x38\xe3\xb2\xb1\xa6\xb8\xba\x99\x08\x45\xc9\x92\xef\x7f\xaf\x86\xb5\x32\x5d\x1f\x04\x29\xd7\xd6\xf9\xd0\x1b\xcb\xa5\x18\xb2\xab\xa2\x26\x86\xf0\x06\x7d\xf0\x44\x94\xad\x46\x22\xbd\x8f\xdd\x3b\xce\xe0\x14\xa7\x78\x1d\x27\xa5\xfe\x4c\x21\xd1\xa6\xb8\x4a\x1b\x8b\x7a\x35\x89\x9c\x0b\x03\xad\x2c\x17\xf9\x25\x07\x17\xcc\x61\xda\x75\x1a\xf3\xd2\xa9\xce\xbf\x97\xc0\x24\x7c\xbe\x63\xfe\x12\x60\xb2\x55\x2e\x32\x53\x8b\xdf\xfe\xe6\xba\x27\x77\xbd\x56\xe6\x9a\x0f\x7e\x4b\x92\x02\x90\x10\xd6\x80\xeb\xc3\xa5\x72\x2b\x00\x00\x54\x0d\x1a\x4d\xe3\x37\xe1\xa0\x75\xcd\x16\xfe\x0c\x37\xa1\x32\xe1\x33\xff\x11\xfa\x71\xcc\x71\x1e\x3c\xb6\xf0\x61\xd8\x1e\x76\xa1\x26\x7c\x6f\xfb\xf9\x30\x62\x7e\x39\x8f\x7b\x4d\x05\xaa\x16\x62\xd8\x5a\x3b\x6b\x7c\x6b\xc9\x7f\x97\x3c\xa0\xca\x24\x0d\x0b\xfc\x9b\x81\x59\x2e\x94\xa9\x6d\x98\xaf\x17\x9d\xe4\x59\x69\x5f\x6c\xe0\xc0\x66\x32\x09\x98\x9e\xcf\x9b\x43\xa8\x93\x04\xa3\xb7\x95\xa2\x4e\xcb\x3d\x54\x4a\x6a\xdb\x8c\x8e\xc7\xa9\xac\xbc\x46\x38\x4f\x7a\x38\x8f\x8b\xaa\x0c\x89\xef\x03\x76\x58\xd9\xa8\xaa\x42\x03\xd2\xd0\x0e\x1d\x54\x58\xa7\x2b\x6e\x78\x3d\x3f\x17\x23\x17\x77\xcc\x28\x45\x0e\xcd\x21\xf5\xda\x8f\x69\x61\xd7\x05\x3f\xb8\xde\x88\xac\x56\x22\x5b\xcd\xc4\x7f\x03\x00\x00\xff\xff\xd9\x64\x66\x86\xfb\x0d\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-exec.1":    vaultedExec1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-passwd.1":  vaultedPasswd1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-exec.1":    &bintree{vaultedExec1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-passwd.1":  &bintree{vaultedPasswd1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
