// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-exec.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-passwd.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x6f\x6f\xdb\x38\xd2\x7f\x1d\x7d\x8a\x01\x1e\xe0\x69\x02\x38\x2a\xd2\xdd\x57\xb9\xeb\x01\xbe\xc4\xbb\xf1\xb5\xb5\x0d\xcb\xd9\xa2\xa8\x17\x01\x2d\x8d\x6c\x6e\x28\x52\x4b\x52\x76\x8c\xa2\xdf\xfd\x30\x43\x4a\x96\x53\x67\x77\x7b\xc0\x1d\x50\x14\x88\xcc\xf9\xc3\x99\xdf\xfc\x66\x86\xe9\xe2\x0e\xb6\xa2\x51\x1e\x8b\xe5\x25\xea\x2d\x5c\x25\x69\x76\x07\x93\xe1\x87\x51\x92\xce\x66\x49\xfc\x0d\xe8\xa7\xe5\x25\x98\xc6\xd7\x8d\x77\xe0\x36\xa8\x14\xe4\xa6\xaa\x84\x2e\x1c\xf8\x8d\xf0\xa0\x8c\x28\xc0\x61\x6e\xd1\x3b\x28\x8d\x05\x11\x34\x83\xd4\xde\x80\xdf\x60\x90\x62\xfd\xd9\xa7\xc9\x74\x96\x8d\x33\xb6\xb1\x2c\xff\xb9\x2c\x6f\x7a\x96\x96\xe5\x1c\x96\xe5\x58\x8b\x0a\x97\xe5\x0c\x3e\x2f\xcb\xf1\x74\xb6\x18\x4f\x27\xd9\xb2\x9c\xfd\x9a\xa4\x2b\xfb\xad\x0c\x2c\x2f\x97\x97\xc2\xb9\x86\x64\x58\x5c\x58\xfd\x7d\xd2\xda\x2c\x2f\x1d\x3a\x27\x8d\xfe\x33\x0f\xb2\x3b\xb8\x1d\x65\x37\xf3\x31\x7f\xe4\x5b\xdc\x58\x14\x1e\x1d\x08\x88\x3a\xa0\x71\x52\xaf\x61\x2b\xac\x14\x2b\x45\xbf\xe8\x82\xc3\x30\xfc\x98\xc1\x23\xee\xc1\x79\x63\xb1\x00\xa9\xf9\x2b\x7b\x93\xc2\x62\x83\x89\x45\xd7\x28\x4f\xc2\xa8\xb7\xd2\x1a\x5d\xa1\xf6\x7d\x45\x16\xa1\x71\x58\x80\x37\xb0\x46\x8d\x56\x78\x3c\x99\x92\x9d\x54\x2a\xe1\xbc\x70\xf8\x63\x6e\x38\x1f\x22\x08\xa4\xec\xfb\xa2\x4d\x0e\x48\x07\xa2\xf1\xa6\x40\x8f\x39\xc5\xa6\xb4\xa6\x62\xe1\x10\xb2\xec\x6e\xf4\xfe\x3d\x05\xe7\x94\x63\x03\x90\x65\x2f\xcf\xd2\x41\xa3\x1f\xb5\xd9\x69\x30\x16\x1a\xed\x6a\xcc\x65\x29\xb1\x18\x44\x65\x6e\x43\x9a\x72\x53\xd5\xc2\xcb\x95\xc2\x83\xf3\x74\x41\xac\xa4\xf7\x58\xa4\x11\x22\xe3\x89\xf1\x78\x4d\xc9\xc8\xb2\x3b\x0a\x5f\x38\x25\xd7\x9a\x83\xb8\xdb\xa0\x6e\x63\x41\x81\x8b\x39\xa0\x38\x48\x07\x3b\xb1\xa7\xc8\x4a\x47\xf7\x2b\x1a\x04\x6f\x12\x72\x54\x6a\xb1\x92\x4a\xfa\x3d\x45\xd2\x5b\x91\x3f\xb2\xff\x4a\x96\xe8\x65\x85\x60\xe2\x7d\x82\xb2\x01\xec\x36\x32\xdf\x40\x85\x82\x15\x23\xbb\x22\xd6\xa8\x7d\xb2\x33\x8d\x2a\x00\x9f\xa4\x23\xbc\x17\x58\x4a\x2d\x3d\xaa\x7d\xca\x58\x89\xd8\x49\xd2\x45\x8b\xf6\x17\xd0\x9a\x64\x31\x48\x41\x7f\xd9\x28\x05\xc3\xf9\x84\x02\xe8\x36\xc6\x7a\x20\x44\xb6\x6e\x59\xa3\xe8\x26\x10\xf4\xa4\x90\x21\x92\xf6\x61\x96\xdd\x7f\x18\x4f\x7e\x86\x21\xcc\xa7\xef\x47\x14\xb2\x15\x2a\xb3\xe3\x9a\x2c\xd0\x0b\xa9\x1c\x18\x0d\x1b\xb3\x83\x5f\x62\x09\x04\x15\x8e\x55\xba\x34\x49\xc7\xb3\x64\x4e\xda\xf9\x7b\xed\x09\xcd\x95\xd8\xc3\x0a\xa1\x46\x5b\x1a\x5b\x51\xc8\xa5\xdf\x98\xc6\x43\xc8\xeb\x9e\xa2\xde\x56\xbc\x37\xe0\x6a\xb1\xd3\x0c\x9f\x34\xf9\x48\xc9\x91\x7a\x6b\x1e\x09\xb3\x31\x21\x03\xc8\x2d\x16\xa8\xbd\x14\x2a\xe4\xd2\x99\xc6\xe6\x2d\xe6\x0a\x2c\x59\x95\x32\xb9\xf0\x9c\xc9\x73\x4c\xd7\x69\xd2\x03\xde\x00\x72\xa3\x4b\xb9\x6e\x2c\x9f\x80\x52\x2a\x74\x03\x90\xda\x79\xa1\x73\x84\xda\x1a\xfa\x34\x00\xf4\x79\x7a\x91\x3e\x8b\xfe\x71\xb5\x27\xb7\xd2\x85\xe2\xa2\xc8\xb6\x40\x32\x9a\x63\x8d\x55\x6d\xac\xb0\xfb\x63\x8f\x75\x11\x32\x70\x88\x51\xa8\xde\x1a\x6d\x25\x34\x15\x46\xff\xf8\x89\x62\x3f\xd4\x31\xb9\x8c\xa2\x38\x1d\xf8\x5c\xe8\xe3\xc0\x8b\xd2\xa3\x0d\x01\x0e\x41\x0f\xa5\x1b\xe8\xe6\x50\xab\x47\x10\x4b\x62\x6d\x71\xd6\x02\x0b\x11\xac\x7a\x40\xda\x9b\x06\x76\xd2\x6d\x7a\x88\x7a\x16\x31\x32\x2f\x3c\xe1\xf5\xef\x6c\x71\x50\x4a\xb7\x19\xb8\xcd\xe0\x37\x67\xf4\x60\x59\x8e\xf3\xc6\x79\x53\x2d\xcb\xd9\x3f\x22\x8e\xf7\xb0\x23\x1a\x0a\x82\xa4\xb8\x71\x38\x68\x53\xeb\xe8\x43\xcb\x04\xa8\x14\x29\x0e\x05\x46\xb4\xd5\xa3\xa1\xf0\x35\x09\xb7\x3c\xe8\x22\x82\x08\x11\x0b\x4a\xc8\x9b\x65\x39\x1f\x70\x66\xfa\x0c\xc3\xea\xe8\x74\x6c\x5f\xe0\x1a\xe9\x29\xd9\x5c\x11\xb8\x15\xaa\x09\xb9\x3e\x34\xaa\x96\xaa\x82\xd1\x34\xaa\xa3\x7b\x1e\x2b\xa4\xc3\x95\xa8\x29\x90\xa4\x06\xf9\x4e\x2b\x62\x0c\xa2\x01\x10\xad\xbb\x8d\xc3\xb2\x51\x20\x75\x62\xfc\x06\x2d\x41\x73\x6d\x45\x55\x3d\xe3\x78\x37\x88\xe5\x41\x06\xb4\x21\x1d\xb9\x6a\x0a\x64\x3b\xc2\x5a\xb1\x0f\x96\x62\x23\x48\x82\x31\x8b\x95\xd9\x62\x44\xcf\x38\xa4\x34\xda\x75\xde\x32\x1b\x36\x75\xad\x24\x16\x50\x18\x74\xac\xb8\x12\x3e\xdf\x80\xd1\x1d\x99\xd4\x16\x97\x97\xcc\x5b\x54\x81\x2c\xed\x12\x19\x5a\x08\x19\x91\xda\xa3\xad\x2d\x06\xb6\x00\x01\x1e\x9f\x3c\x97\x86\xa2\xee\x13\xc0\xb7\x36\x4a\xe8\xf5\x2b\x07\xab\x46\x2a\xbf\xbc\x94\x3a\xe6\x86\x0e\xbf\x6e\x0f\x53\x08\x6b\x91\x3f\x8a\x35\x72\xc5\x50\x74\xec\x41\x55\x6b\xb1\x73\x5a\xd0\x35\x1a\xc2\x41\xc4\x6e\x52\x4a\x54\x85\xa3\x74\x2a\xf6\x97\xf9\x2d\x85\xa1\x72\x06\xc4\x56\x48\xc5\xd9\xa5\xf2\x12\x31\x75\x16\x6b\x25\x72\x36\x5d\x36\x3a\x0f\x7c\x61\x2c\xac\x5d\xb3\x02\x25\x1f\x31\x59\xe1\x46\x6c\x25\x8d\x2d\xba\xe8\xc4\xda\x8c\x77\x32\x01\xa0\x22\xcf\xb1\xf6\x8e\xf9\x4e\x35\xc8\x22\x84\x07\xfa\x42\x31\xf2\xfb\xa4\xb6\x14\xb1\x02\xfe\x95\x4d\x27\x31\x0d\x21\x41\x43\xa2\x0e\xc0\x27\x51\xd5\xc4\x4d\xde\xb4\xa8\xfc\xad\x71\xbe\x9b\x0f\xfa\xd4\xc1\x40\x62\x3d\x21\x2f\x03\x0a\x18\xc7\x21\x14\x5c\x17\xba\x6b\x78\x5e\xac\xf0\xea\xcb\x17\xa0\x4b\x40\x3a\xfc\x98\xdd\x58\x2c\x1c\x7c\xfd\xfa\x8a\x08\xe1\xb8\xb6\x2d\x96\x16\xb9\x5c\x92\xcc\x0b\xeb\x41\x80\xc6\x5d\x37\xca\x70\xe4\xe9\xc3\xcb\x5c\x28\x20\xea\xa0\x89\xea\xa9\x96\x81\x3f\x89\x43\xb2\x44\x28\xb5\x32\x4f\x7f\x4b\xf2\x15\xf0\xbf\x44\x81\x02\xf5\x97\xfe\x4f\x93\x9f\x28\xd9\x30\x11\x15\x9e\x2d\xf6\x35\x9e\xd1\x20\xe0\x92\x9b\xc0\x67\x67\x21\xb4\x67\x8b\xb6\x5b\xb6\x3c\x47\xc0\xe8\x86\xa4\xd0\x7b\xda\x41\x37\x56\x15\x01\xd6\x30\xc5\xba\xa4\x0d\xce\x59\x40\x1a\xab\xa3\x34\x50\xa2\x9d\xe3\x69\x8d\xd0\x12\x87\x01\x69\x74\x27\x91\x8e\x6f\x5b\x1f\xc6\xb7\xdd\xa1\x63\xd9\xc3\xe1\x8c\x47\xb0\x56\x20\xfc\xf5\xa7\x42\x0b\xf3\x88\xfa\x20\x13\x32\xe2\xe9\xe3\x0b\xa2\x70\xce\x17\x0f\xe5\x72\x2a\x61\x17\x49\x86\xfe\xac\x12\xf5\xe7\xa0\xf5\xd7\xa8\x7c\xd8\x92\xd9\xe9\xb9\xf3\xc0\x6d\x42\x19\xbd\xee\xea\x51\xda\xc8\x7e\xc9\xbd\x76\xe8\xcf\x3e\x1f\xf4\x39\x25\x73\x3c\x22\x2d\x38\x22\xad\xc3\x80\xd9\x37\xb9\xc2\xd2\x58\xb6\xc4\xc3\x1c\x01\x2f\x1a\x48\x17\x23\x9e\xa8\xe8\xc2\xef\x46\x9f\x78\x38\xfc\x4c\x39\x47\xed\x7f\xbd\x86\xff\x83\xf3\x8f\x77\xa3\x09\x7c\x98\xde\x8e\x7f\xfa\x44\x43\xd0\xe2\x6e\x94\x8d\xe0\x76\x7a\x93\x0d\x60\xf8\x3e\x9b\xc2\xfd\xec\x76\xb8\x18\x5d\x1f\xb6\x9e\x40\xf1\x57\x69\x55\x10\x8e\x93\xc3\x36\xf4\x84\x39\x7f\xbe\x60\x2b\xed\xa8\xd4\x38\x74\xf0\xd7\x7b\x7c\x7f\x44\xef\x72\x91\xf4\xa5\x02\x75\xd2\x85\xb2\x45\x16\x08\xf1\xb0\x00\x3c\x9f\x91\xda\x89\x27\xe0\x5a\x09\xc7\xf0\xe1\x61\xb6\x68\x7a\x23\x4b\x67\xbf\xad\xe0\xf3\x9e\xe4\x56\xb6\xfc\xd6\xad\x40\x85\xa4\xc6\x7e\x11\xd7\x81\x93\x45\x5e\x11\x3f\xad\xba\x89\x05\x8c\x2d\x88\xb6\xdb\x69\x81\x08\xc0\x28\xfc\x76\x5e\x5f\x61\x2e\x88\xb0\xda\x00\xf6\xdb\xbf\x6b\x56\xce\x4b\xdf\xf0\x5d\x4f\x07\x95\x40\x96\x9c\x44\xf1\x80\xaf\xd9\x3f\x4b\x33\x4c\x6d\xcd\x56\x16\x3c\x18\xb7\x16\x69\x74\xed\x9a\x5e\xe2\x37\xc6\x61\x20\x55\x9e\xa1\xb0\x68\x83\x94\x7e\x9b\x68\x4a\x0b\x8d\x93\x85\xb0\xc5\x0b\x55\x41\x35\xd8\x73\xe2\x3a\x49\xe7\x19\x31\x3d\x2c\xcf\x57\x0d\xbc\x89\x24\x3b\xfc\x98\x3d\x0c\x6f\x6e\x46\x59\xf6\xf0\x6e\xf4\xe9\x61\x7c\xcb\x1c\xbc\xb2\xc9\x50\x83\x64\xd9\x52\xa2\xed\x0a\xfa\x50\xcc\x29\xdc\x6b\xf9\x3b\xef\x2c\x80\x22\xdf\x70\xfd\x99\xb2\x17\x2d\xca\xff\xa9\xf8\xa4\xa7\xbd\xc8\x46\x37\xf3\xd1\xa2\xe7\x4c\xeb\xc9\xa2\xdb\x11\x3b\xe2\x74\x72\xad\xc1\xe2\xef\x0d\x3a\xef\xfe\x0b\x9e\x64\xd9\x78\x3a\x79\x58\x4c\xdf\x8d\x26\xd4\x66\x5f\xc3\x91\x9b\xf7\xf3\xf1\xe2\x53\xf7\x2b\xfb\x38\x0b\xd9\x8d\x0b\x5f\x1c\x79\x4f\x9a\xfc\x23\x55\xb4\x06\x46\x9c\x14\x09\xc3\xb0\xae\x69\xbb\x52\xb8\x16\xf9\x1e\xb2\xdb\x77\xe4\xf2\x3c\x52\xcd\xf1\x3e\xf5\x3f\xa4\x9c\xe1\xb3\x15\xaf\x5d\x05\xba\xf1\x14\x50\xf2\x38\xc9\x60\x66\x2d\xaf\xdc\xb3\xa5\xe8\x7c\x2b\xc5\xf3\xf7\x8e\x58\xec\xbc\x55\x76\xaa\x88\x14\x5e\x58\x1e\x62\x9b\x3c\x2e\x8f\x52\x5a\xe7\x3b\x6e\x0b\x33\x40\x2e\xf2\xcd\xd1\x13\x48\x0b\xe7\xc0\x45\xe7\xac\xb1\xb7\x28\x26\xbd\x37\x96\x9d\x70\x07\x6f\x2e\x58\x1d\x57\xa0\x3f\xe2\x43\xd7\xb5\xbf\x76\x21\x0a\xe5\x12\xe2\x43\xe1\x4a\x72\x41\x13\x3b\x6f\xfb\x42\x29\xb3\x73\xfd\x1d\x3e\x76\x1f\x76\xb4\x88\xaf\x54\xd4\xcb\xd0\x1e\xf8\xd3\x6f\x84\xee\x69\x4d\xac\xa1\xb9\x42\x28\x15\x17\x13\x52\x0a\xe7\x95\x78\x92\x55\x53\x51\x01\x5c\xc1\xc6\x34\xf6\xa2\x33\xea\x4c\xf7\x46\x20\xfc\x49\xff\x18\x80\xdd\x42\xc7\xc5\xc4\x0f\x0e\x61\xea\xea\xf3\x8c\x74\x1d\x4b\x75\xad\xf2\x88\xae\x3e\x99\x86\x71\xc1\x66\xe3\x2e\x1e\xb9\x38\xbc\x16\x50\x24\xdb\xa4\x85\x0b\x78\xaa\x18\x6e\x4d\x39\x3f\x5a\x1d\xbd\x35\x24\x6c\x46\xfa\x01\x8f\xc5\xe0\xcc\x35\x9b\x61\x52\xd3\x65\x72\xfa\xc9\x0d\xb2\xa6\x46\x4b\x9b\x6b\x92\x96\x32\x94\xce\x6c\x96\xc4\x75\x8e\xdf\x46\x2c\x3a\xa3\xb6\x8c\xe6\xce\x9c\xb0\x3a\xe2\x4d\x58\x7d\x2d\x76\xee\x5a\x8a\xea\xfa\xfa\xea\xea\xea\xcd\x9b\x37\x3f\xfc\xf0\xc3\x8f\x3f\xfe\x78\x4d\x17\x79\xdd\xa9\x5f\x96\xf3\xe5\xff\x87\x8b\xf3\xab\x42\x0f\x51\x74\x70\x10\x37\xb2\x90\x9a\xe7\x1d\xf1\x74\x5b\x95\x0e\xae\x12\x4a\xe0\x00\x2c\xae\x85\x2d\x14\x31\x6f\x14\xe9\x54\x1c\x0a\xa5\xdf\xde\x9f\x97\x5b\xf0\x6c\xac\x41\x14\x85\xf4\x11\x6f\xe1\x74\xdb\x2e\x0e\x8a\xc4\xca\x6c\x71\xd0\xe5\x26\x12\x92\xeb\x64\x85\x4a\x4e\x77\x1c\x9e\xbb\xa4\x0e\x23\x3e\x19\x11\x2b\xd3\xf8\x6e\x95\x7f\xa1\x03\xfd\x32\xbc\x7f\xbf\x18\xdd\x3e\x8c\x26\xbf\x3c\x10\x91\x51\x07\x98\xde\x4f\x16\xbd\x5e\xb4\x08\x9d\xc7\x34\xda\xc3\xf8\xf6\xe8\x79\x20\xe4\xb9\x38\xc1\xe4\xdf\xea\x9d\x4f\xfa\x0a\x0f\x8f\x58\xff\x99\xba\xc9\xf0\xc3\xa8\xaf\xef\x9b\x27\xb0\xef\xd0\x35\x1b\xce\x17\xe3\xc5\x78\x7a\xe4\x20\xf5\xf8\x5a\x58\x2f\x8f\xb0\xf2\xdd\x9a\x17\x77\x7d\xa5\xb5\xf0\x9b\x17\x74\xc5\xe2\xf8\xc9\xd8\x76\x0d\xfc\x4b\x25\xf6\x27\x25\x42\x06\x5f\xbf\x50\x86\x6d\x01\x86\xd7\xf8\xf8\x40\x40\x34\x76\xfc\x40\xbd\x42\xae\xa4\x6e\x81\x96\x1a\xbe\x7c\x49\x33\xf4\x5f\xbf\x1e\x7b\xf8\x07\x50\x7a\xdb\xf7\xec\xc4\xc1\xf9\xe4\xed\xf7\x5d\xe4\x24\x1e\xde\xfe\xc1\xef\x5d\x8e\xdf\x8a\x9d\x3b\xf5\xf3\xe2\xee\x6d\x30\x72\x08\x52\x76\x07\x3f\xdf\x8f\x61\x26\x9c\xdb\x19\x5b\xc0\xcc\x9a\xaa\xf6\x8e\x2f\xfd\xf3\xfd\x78\x79\xb9\x12\x34\x11\xd5\xed\xef\x75\xf8\xbd\x6d\xc8\x3c\x2e\xad\xf6\xdd\xc2\x72\xe8\xa3\xad\xf9\x61\xf6\x6e\x36\xcc\x32\x42\x48\x1b\x6f\x7e\xb0\x3d\x9e\xc3\xcf\xaf\x2e\xf8\xb5\xc1\x58\xa8\x68\x01\x8a\xaf\xb5\x69\xf2\xef\x00\x00\x00\xff\xff\xbf\x6d\x8f\xea\xa7\x19\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedExec1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x51\x6f\xdb\x38\x12\x7e\xd7\xaf\x18\xe0\x80\xbb\x04\x70\x54\xa4\xed\x93\x81\x3c\xf8\x62\x6d\x23\xa4\xb5\x05\x4b\x69\x11\xac\x16\x01\x2d\x8d\x2c\xa2\x12\xa9\x25\x29\xab\xf9\xf7\x87\x21\x25\x59\x76\x9c\x6e\xb3\x87\xbb\xa7\xc4\x14\xf9\xcd\x70\xe6\x9b\x6f\x86\x7e\x72\x07\x7b\xd6\x56\x06\xf3\xf4\x0a\x7f\x60\x06\xd7\x9e\x1f\xdf\xc1\x6a\xf1\x25\xf0\xfc\x28\xf2\xfa\x8f\x60\xbf\xa5\x57\xf6\x6f\x6b\x50\x83\x2e\xb1\xaa\x20\x93\x75\xcd\x44\xae\xa1\xe3\xa6\x04\x06\x3b\xbe\x47\xe1\x10\x41\x2a\x50\xb2\x42\x8b\x17\x3f\xae\xd6\x51\x1c\xc6\x16\x33\x2d\xfe\x9d\x16\xb7\x53\xe4\xb4\xd8\xc0\xef\x69\x11\xae\xa3\x24\x5c\xaf\xe2\xb4\x88\xfe\x80\xb4\x08\x05\xab\x31\x2d\x22\xfa\x77\x30\x94\x16\x91\xe7\x6f\xd5\xdf\xc1\xa0\x03\xe9\x55\x7a\x45\x1b\xff\x0b\xc4\x01\x86\x69\xdd\x12\xb4\x05\x63\x4a\xfc\xb5\x91\xf8\x0e\x96\x41\x7c\xbb\x09\x2d\x9e\x0d\x45\xf0\xe6\x70\xfa\x40\x67\x68\xe7\x96\x0b\xd4\x60\x4a\x84\x02\x99\x69\x15\x6a\xaf\x50\xb2\x86\xe3\x8b\x58\x60\xf2\xc6\x42\xd2\xee\xde\x48\x9f\x4a\x2e\x05\xc8\xe2\xe4\x50\x7a\x25\xd2\x62\x93\xfe\xd3\xb7\x4e\xf7\xf7\xf7\xfc\x64\xc8\xdd\x2b\xf7\xf7\xe2\x06\x33\x5e\xf0\xc1\xad\xb6\xaa\x60\xb1\x59\x91\xeb\xf4\x9b\xdc\x07\xca\x07\x19\x1c\x17\x8c\x04\x07\xe5\x43\x8c\x48\x06\x16\x71\xfc\xf0\x25\x5c\x7d\x82\x05\x6c\xd6\x9f\x03\x0a\xec\x16\x2b\xd9\x41\x21\x15\xe4\x68\x18\xaf\x34\x48\x01\xa5\xec\xe0\x6b\xef\xb1\x83\xd0\x16\x52\xfb\x9e\x1f\x46\xde\x86\xd0\xed\x7a\x63\x6f\x59\xb3\x67\xd8\x22\x34\xa8\x0a\xa9\x6a\xcc\x6d\x44\x64\x6b\x40\x5b\xaf\x9f\xb9\xd8\x01\xeb\x83\x6d\x24\xe8\x86\x75\x02\x28\xa2\xbe\xf7\xad\x44\x01\x5c\xec\xe5\x77\xcc\xc1\x94\x5c\x43\xc7\x9e\x67\x90\x29\xcc\x51\x18\xce\x2a\x0d\x4c\x21\x68\xd9\xaa\x0c\x73\x7b\x08\x72\x2c\x2c\x54\x25\x33\x46\xf6\x35\x5c\xa0\xbf\xf3\x3d\x14\x7b\xae\xa4\xa8\x51\x98\x19\x64\x52\x14\x7c\xd7\x2a\xbb\x03\x0a\x5e\xa1\x9e\x01\x17\xda\x30\x91\x21\x34\x4a\xd2\xd2\x0c\xd0\x64\xfe\xa5\x7f\x92\x00\x21\xd3\x2b\x8d\x5a\x73\x49\xc9\xf2\x96\x5c\xb3\x6d\xd5\x87\x7e\x87\x02\x7b\x50\x8a\x35\xd6\x8d\x54\x4c\x3d\x1f\x7b\x2c\x72\x97\x81\x43\x8c\x7c\x48\x4a\xf4\x1a\x54\x35\x13\x28\xcc\xd1\x76\x6d\xa4\xc2\x1c\xb8\xb0\x06\x5c\x98\xe8\xd2\xad\xb6\xab\xda\x20\xcb\xcf\x07\x3e\x63\xe2\x38\xf0\xac\x30\xa8\x5c\x80\x5d\xd0\x1d\xfb\x5b\x4d\xbf\x08\xfd\x0c\xcb\xbc\x81\xb6\x23\x8f\x2d\xb3\x26\x44\x7a\x96\x2d\x74\x5c\x97\x13\x46\x9d\x44\x4c\x61\xa1\x50\x97\x84\x16\x1b\xa6\x0c\x30\x10\xd8\x41\x1f\x44\x87\x4c\x0b\xaf\xc7\x8b\x41\x8f\x61\x25\xa2\xe1\x2e\xc6\xae\x4c\x16\xdf\x62\xb8\x0f\x1e\x6d\x5d\xff\x4e\xde\xa2\x30\x7f\xcc\xe1\x1f\x70\xf1\xed\x2e\x58\xc1\x97\xf5\x32\xfc\xed\x91\x68\x9d\xdc\x05\x71\x00\xcb\xf5\x6d\x3c\x83\xc5\xe7\x78\x0d\x0f\xd1\x72\x91\x04\xf3\x89\x12\x8b\xbd\x7f\xed\xd7\x39\xd9\xf4\xc6\x55\x1b\x25\xbb\x7e\x69\x8d\x0c\xdc\x6f\x35\x6a\xf8\xf5\xa4\x19\x39\xd0\x03\x0f\x37\xf5\xa6\xa7\x5c\x22\xe8\x3e\x71\x12\x5b\x4e\x80\x42\xdd\x56\x86\x96\x4f\x49\x3f\x50\x98\x2a\x43\x42\xc5\xb4\xa1\x3a\xf5\xc8\x5e\xde\x4e\x38\x38\xda\x1f\xc2\x7d\x31\x39\xb9\xe7\xec\x44\x82\x30\xe7\x26\x2d\x36\xc4\xfa\x28\xf2\x92\xb3\x19\xa9\x5b\x6d\x88\x59\x3d\x05\x41\xaa\x1c\xd5\x21\xfd\x94\x2d\x52\xcc\xbe\xe9\x84\x2b\x69\x70\xee\xd4\x24\x63\xad\xc6\x51\x3c\xfa\x52\xd5\xb6\xec\xdb\xad\x36\xdc\xb4\xf6\xae\xe7\x83\x4a\x3c\xf1\xce\x72\x64\xe6\x04\x76\xb2\x97\x48\xd9\x28\xb9\xe7\xb9\x55\xba\xc1\x22\x69\x91\x90\x06\x6a\x66\xb2\xd2\x33\xa5\xd4\x48\x17\x60\xae\x28\x48\xb6\x5d\x90\xfc\x97\x89\xa6\xb4\x90\x3e\xe4\x4c\xe5\x30\x11\x13\xd8\x33\xc5\x9d\x02\x90\x4e\x4e\x9c\x98\x7b\xfe\x26\xa6\xca\x84\xf4\x62\xdb\xc2\xfb\xbe\x22\x16\xdf\xe2\xa7\xc5\xed\x6d\x10\xc7\x4f\xf7\xc1\xe3\x53\xb8\xa4\xba\xa0\x4e\xb8\x10\xc0\xed\xd9\x82\xa3\xb2\x60\x74\x2b\x96\x65\xa8\x35\x7c\xc7\x67\x1f\x1e\x04\xff\xb3\xb5\x17\x42\x96\x95\xa0\xd1\x50\x8a\x0f\xd1\xa2\xfc\x9f\x8b\x8f\x7f\xde\x8b\x38\xb8\xdd\x04\xc9\xc4\x99\xc1\x13\x62\x9e\xc6\x4c\xa1\x71\x39\xa6\xfc\xf0\x9d\x00\x85\x7f\xb6\xa8\x8d\xfe\x1f\x78\x12\xc7\xe1\x7a\xf5\x94\xac\xef\x83\x15\xf5\xb6\x77\x70\xe4\xe6\xc3\x26\x4c\x1e\xc7\xaf\xd6\xc7\xc8\x65\x37\x87\x8e\x9a\x44\xaf\x61\x67\x4d\xfe\x0c\x0a\xb8\x1e\x78\x92\x7b\x96\x86\x4d\x23\x95\x81\x0a\x77\x2c\x7b\x86\x78\x79\x4f\x2e\x6f\x02\xa7\x34\xc7\x0d\xf2\xff\xa7\x38\x8b\x93\x96\x3d\x48\xbb\xee\xfb\x7e\x0e\xc8\x4d\x89\xca\x71\xd9\xc2\xfc\x4b\x9f\x34\xb9\x8b\x3d\x67\xa7\xc3\x56\x5f\xeb\x34\x28\x1c\xa0\x48\x13\x5e\x69\x06\x20\x1b\xf3\xa2\x3a\x0a\xae\xb4\x19\xa5\xcd\xe9\x75\xc6\xb2\x92\xfe\x1d\x45\x67\x60\xb3\x93\xa2\x0b\x8b\x38\x69\xfc\xde\x64\x62\xec\x98\x3e\x78\x73\x69\xe1\x6c\x01\x9a\x23\x39\x1c\x80\x8d\x1c\x1a\x9c\xab\x16\x17\x1f\x3b\x00\x67\xac\xaa\x48\x45\xb9\x06\x56\x55\xb2\x73\x10\x93\x83\x5b\x74\x8e\xe6\xd6\x3d\x06\x95\x14\x3b\x54\x07\xf9\x34\x25\x13\x13\x54\x4f\x49\x9a\x15\x59\x55\x41\xc7\xab\xca\x81\xc2\x45\xcd\x7e\xf0\xba\xad\x89\xff\xd7\x50\xca\x56\x5d\x8e\x46\xb5\x84\x1a\x99\x20\xc3\xcc\x9c\xf5\xcf\xf2\x6f\x6c\xd0\xb6\x96\x0c\xb7\x12\x4a\x0d\x71\x2a\x33\x5c\x8f\x22\x65\xe7\x9c\xc9\x5d\x5c\x3e\x1e\x65\x6b\x79\x61\xcd\xf6\xb3\x55\x2f\xc5\x6e\xfa\xa3\x48\x0e\x49\x73\x17\x30\x54\x30\x86\x78\x9f\x29\xb4\x7d\x69\x3a\x3e\x5a\x33\xdc\xcc\xa0\xe2\xdf\x69\xc8\x9a\x5b\x33\x56\xd3\x44\x71\xfa\x42\x19\x58\x02\x71\xdb\xa0\xb2\xa3\x08\x2d\x0e\x53\xaf\xe7\x17\xdc\xd5\x51\x14\x79\x5d\xc9\xb3\x12\x3a\xd9\x56\x39\x65\x54\x56\x7b\xcb\xed\xd1\x38\x53\xa2\x67\x1f\x53\x62\xce\x3a\x3d\xe7\xac\x9e\xcf\xaf\xaf\xaf\xdf\xbf\x7f\xff\xe1\xc3\x87\x8f\x1f\x3f\xce\xe9\x5a\xef\x46\x5b\xc3\xd4\x1c\x45\x6e\x66\x9c\xf0\x8b\x36\xba\xfe\x30\x24\xea\xb4\x3d\x9e\xef\xb1\x5c\xc3\xb5\x47\xe9\x9c\x81\xc2\x1d\x53\x79\x45\x32\xdc\x1f\x19\x21\x0e\x65\x33\xed\xf5\xa7\xc5\xe7\x3c\x0b\x05\xb0\x3c\xe7\xa6\x67\x9f\xdb\x3d\xf4\x8e\x03\x10\xdb\xca\x3d\xce\xc6\x4c\xf5\xea\xa4\xc7\xb3\xac\xf2\xce\xb7\x1f\x3b\x47\x71\x41\x5c\x72\xce\xb1\x2d\x8d\xd9\xc3\xa0\xf6\x4a\x3b\xfa\xba\x78\xf8\x9c\x04\xcb\xa7\x60\xf5\xf5\x89\x54\x8d\xda\xc1\xfa\x61\x95\x4c\x1a\x53\xe2\xda\x90\x6c\x85\x81\x70\x79\x34\xfc\xb9\xa4\xe7\x67\x64\xfd\x25\xee\x66\x35\x05\x3c\xbc\x52\xfe\x1e\x1c\x3d\x95\xa7\x78\x2f\x1e\x38\x6f\xc0\x8a\x16\x9b\x24\xa4\xc7\xd6\x14\x90\x1a\x7e\xc3\x94\xe1\x47\x5c\x79\x33\x72\x72\x37\x05\x6d\x98\x29\x5f\xc1\xea\x8b\xe3\x37\xa9\x00\x7f\xb0\xba\xb1\x19\xfb\x85\x82\xfb\x8b\x1a\x21\x8b\xef\x7e\xa5\x28\x87\x72\x24\x81\xee\xc9\x5c\x48\x92\x38\xaa\x8c\x03\xcb\xb6\xe8\xe4\xd7\x1c\x7b\xf7\x13\x1a\xdd\x4c\x9d\x3a\xb3\x71\xb3\xba\x79\xd3\x1d\x5e\x42\x10\x17\x6e\x7e\xf2\x7d\xcc\xef\x0d\xeb\xf4\xb9\xcf\xc9\xdd\x8d\x33\x72\x08\x49\x7c\x07\x9f\x1e\x42\x88\x98\xd6\x9d\x54\x39\x44\x4a\xd6\x8d\xd1\xf6\xd2\x9f\x1e\xc2\xf4\x6a\xcb\x68\x34\x6a\x86\xef\x8d\xfb\x3e\xb4\x66\x3b\x37\x6d\x9f\x29\x50\xe6\xf8\x79\x35\x98\x5f\xc4\xf7\xd1\x22\x8e\x89\x1d\x43\x74\xed\x53\xfc\x78\x20\xbf\xb8\xbe\xa4\xc6\x4b\x0d\xaa\x96\x0a\x87\x77\xb8\xef\xfd\x27\x00\x00\xff\xff\x60\x11\xba\x14\x43\x12\x00\x00")

func vaultedExec1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedExec1,
		"vaulted-exec.1",
	)
}

func vaultedExec1() (*asset, error) {
	bytes, err := vaultedExec1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-exec.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedPasswd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x5d\x6a\xeb\x30\x10\x85\xdf\xbd\x8a\x59\x40\x62\xb8\x4b\xc8\x4d\x0c\x31\xb4\x8e\xb0\xdc\x86\x82\xa0\x28\xd6\xa8\x16\xd8\x92\xd1\x8f\x4d\x77\x5f\x24\xbb\x69\x43\x69\x5f\xda\x57\xcd\x99\xef\x7c\x9a\xbc\x39\xc2\xc4\x43\xef\x51\xb0\xed\xc8\x9d\x9b\x05\xfc\xcb\x72\x7a\x84\x6a\x77\x5f\x64\x39\x21\xd9\x3a\x86\x75\xca\xb6\xd0\x76\x5c\xbf\xa0\x03\xdf\xe1\xf2\x6a\xac\x00\x23\x81\x2f\xa8\xb4\x4e\x9f\xaa\x13\xa1\x25\x4d\x08\x26\xff\x33\xb9\xbf\x05\x31\x59\x03\x93\xa5\xe6\x03\x32\x49\xbe\x8b\x19\xfb\x25\x48\x8f\x70\x28\xe8\xbe\x2e\x49\x53\x9e\xaa\xb4\xb8\x37\xda\xa3\xf6\xa0\x74\x72\xfa\x48\x2f\x42\xa0\x1c\x04\xed\x4d\x68\x3b\x14\x1b\x30\xba\x7f\xbd\x75\x57\x6e\xfd\x93\xc8\x13\xaf\x94\x2b\x27\xfa\x3c\xee\x1e\xee\x9a\xe2\xf0\x4c\x76\x94\x9e\x4f\xf5\x21\xfa\xa0\x9e\x94\x35\x7a\x88\xa5\x13\xb7\x8a\x5f\x7a\x8c\x14\x87\x7e\x03\xca\xc3\xac\xfa\x1e\x2e\x08\xc1\xa1\x00\x9e\x2e\x95\xb5\xc1\xda\x98\xbf\xb6\x4a\x63\x3f\xa9\x6e\xc0\xf8\x0e\xed\xac\x1c\xa6\xf2\xe0\xd0\x5e\x39\xa3\x35\xc3\x18\x8f\x12\x77\x22\xec\x1d\xf2\x83\x6f\x55\x9c\x7f\xe3\x9c\x45\xa2\xc6\xf9\xaf\x7d\xdf\x02\x00\x00\xff\xff\xf1\x83\xc8\xb9\x72\x02\x00\x00")

func vaultedPasswd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedPasswd1,
		"vaulted-passwd.1",
	)
}

func vaultedPasswd1() (*asset, error) {
	bytes, err := vaultedPasswd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-passwd.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x3a\xf2\x7d\xd7\xa7\x18\xe0\x07\xfc\xd6\x01\x1c\x05\x69\xfb\xe4\x45\x1e\xbc\xb1\x6f\x6d\x24\xb5\x05\x4b\x69\x11\x5c\x5d\x04\xb4\x34\x8a\x88\x4a\xa4\x2e\x49\x59\xcd\xb7\x5f\x0c\xa9\x7f\x4e\x94\xde\xdb\x05\x76\xdf\x6c\x52\x9c\x19\xce\x9c\x39\x67\xe8\x47\x1b\x38\xb1\xba\x30\x98\xc6\x97\x3a\xc7\xa2\x80\x6b\xcf\x0f\x37\xb0\x5b\x7e\x59\x7b\x7e\x10\x78\xed\x2e\xb8\xcd\xf8\x12\xb4\x61\xca\x68\x60\x02\xb8\x30\xa8\x58\x62\xf8\x09\xdb\xed\x86\x9b\x1c\x4c\x8e\xa0\x31\x51\x68\x34\x64\x52\xd9\xff\xd6\x0a\x14\x92\xa5\x98\xd2\x39\xe9\xbe\xa2\x43\xd6\x5d\xf8\xb8\xdb\x07\xe1\x36\xb4\x2e\xe3\xec\x5f\x71\x76\x7b\xe6\x38\xce\x0e\x10\x67\x5b\xc1\x4a\x8c\xb3\x00\x7e\x8f\xb3\xed\x3e\x88\xb6\xfb\x5d\x18\x67\xc1\x1f\x9e\x7f\x54\x53\xa7\x20\xbe\x8c\x2f\x99\xd6\x35\x9d\xb2\x06\x98\x12\xbf\x7a\x5e\xc8\xf8\x52\xa3\xd6\x5c\x8a\xbf\x8a\x22\xdc\xc0\x6a\x1d\xde\x1e\xb6\x76\xd1\xde\x25\xfc\x49\xb6\x66\xb5\x46\x6d\x13\xe1\x7c\x87\x9b\xf5\xfd\x3d\xf9\x40\x71\xe2\x4a\x8a\x12\x85\x81\x13\x53\x9c\x1d\x0b\x9c\x03\xcf\x40\xa3\xf9\xa7\x27\x4d\x8e\xaa\xe1\x1a\x21\xc5\x8c\xc2\xd5\x60\x64\x6b\xe2\xea\xc8\xc5\x95\xce\xe3\xec\x70\xe1\xdb\x78\xda\xf8\x3c\x3f\xea\xf2\xfa\x4e\x4e\xbc\xb0\xc2\x84\x67\xbc\x8d\x28\xab\x8b\x02\x96\x87\x1d\xb4\x05\x54\xb2\x40\xa0\x8b\x83\xcc\x86\x05\x23\xc1\x99\xf2\x21\x44\x24\x07\xcb\x30\x7c\xf8\xb2\xdd\x7d\x86\x25\x1c\xf6\xf7\x6b\x4a\xd3\x11\x0b\xd9\x58\x24\xa4\x68\x18\x2f\x34\x48\x01\xb9\x6c\xe0\x6b\x9b\x6b\x67\x42\x5b\x93\xda\xf7\xfc\x6d\xe0\x1d\xc8\xba\x5d\xaf\x0c\x97\x02\x4a\xf6\x02\x47\x84\x0a\x55\x26\x55\x89\xa9\x45\x9a\xac\x0d\x68\x1b\xf5\x0b\x17\xcf\xc0\x5a\x94\x19\x09\xba\x62\x8d\x80\x4c\xc9\xd2\xf7\xbe\xe5\x48\xc9\x3f\xc9\xef\x98\x82\xc9\xb9\x86\x86\xbd\xcc\x21\x51\x98\xa2\x30\x9c\x15\x1a\x98\x42\xd0\xb2\x56\x09\xa6\xf6\x50\x97\x58\x28\x64\xc2\xc8\xbf\x86\x19\xfa\xcf\xbe\x37\x2a\xcc\x1c\x12\x29\x32\xfe\x5c\x2b\xfb\x05\x64\xbc\x40\x3d\x07\x2e\xb4\x61\x22\x41\xa8\x94\xa4\xa5\x39\xa0\x49\x7c\x2a\xc6\x59\x01\xce\x41\xe5\xad\xb8\xa6\x1a\xbb\xd4\x3f\xa3\xc0\xd6\x28\xe5\x1a\xcb\x4a\x2a\xa6\x5e\xce\x23\x16\xa9\xab\xc0\x90\x23\x1f\xa2\x1c\xbd\x0a\x55\xc9\x04\x01\x67\xfc\xb9\x36\x52\xd9\xc6\x1b\x35\x23\x5d\xba\xd6\x76\x55\x1b\x64\xe9\x74\xe2\x13\x26\xce\x13\xcf\x32\x83\xca\x25\xd8\x25\xdd\x61\xb9\xd6\xf4\x6f\xc0\xf2\x19\xca\xbc\x44\x96\x25\x85\xdc\xf3\x83\x45\xd6\x08\x48\x2f\xb2\x86\x86\xeb\x7c\x84\xa8\x57\x19\x53\x98\x29\xb4\xc8\x76\x3d\x05\x0c\x04\x36\xd0\x26\xd1\x59\xa6\x85\xf7\xf3\xc5\xa0\xb5\x81\x29\xe0\x8f\x8a\xbb\x1c\xbb\x36\x59\x7e\x0b\xe1\x6e\xfd\x68\x5b\xf6\x77\x8a\x16\x85\xf9\x63\x01\xff\x07\xb3\x6f\x9b\xf5\x0e\xbe\xec\x57\xdb\xdf\x1e\x09\xd6\xd1\x66\x1d\xae\x61\xb5\xbf\x0d\xe7\xb0\xbc\x0f\xf7\xf0\x10\xac\x96\xd1\x7a\x31\xb0\x28\x8a\x93\x7f\xed\x97\x29\xf9\xf4\x86\xd5\x1f\x98\xd8\xe5\x0b\xeb\xa3\x83\xbe\x65\x80\xbf\x5f\x33\x23\x3b\x74\xe0\x70\x51\x6f\x7c\xca\xd5\x81\xae\x13\x46\xa1\x85\x04\x28\xd4\x75\x61\x68\xf9\x35\xe6\x3b\x04\x53\x63\x48\x28\x98\x36\xd4\xa6\x1e\xf9\x4b\xeb\x11\x04\x7b\xff\x5d\xb6\x67\xa3\x93\x27\xce\xe0\x9c\x3b\x31\xe5\xa6\x65\xa0\x20\xf0\xa2\xc9\x82\x94\xb5\x36\x04\xac\x16\x81\x20\x55\x8a\x6a\xa8\x3e\x15\x4b\x16\xe8\xb7\x7a\xb0\xdd\x49\x83\x0b\x47\x26\x09\xab\x35\xf6\xdc\x31\xa6\x40\x5d\x1f\xb5\xe1\xa6\xb6\x77\x9d\x4e\x2a\xc1\xc4\x9b\x84\xc8\xdc\x5e\x73\xfc\x2d\x61\xb2\x52\xf2\xc4\x53\x4b\x74\x9d\x47\xa2\x22\x21\x0d\x94\xcc\x24\xb9\x67\x72\xa9\x91\x2e\xc0\x5c\x4f\x90\x74\xb8\x24\xf9\x6f\x0b\x4d\x65\x21\x7a\x48\x99\x4a\x27\x49\xde\x09\xe6\x28\x88\x85\xe7\x1f\x42\x6a\x4c\x88\x67\xc7\x1a\x3e\xb4\x0d\xb1\xfc\x16\x3e\x2d\x6f\x6f\xd7\x61\xf8\x74\xb7\x7e\x7c\xda\xae\xa8\x2d\x48\xc4\x96\x02\xb8\x3d\x9b\x71\x54\xbd\xfa\xb2\x24\x41\xad\xe1\x3b\xbe\xf8\xf0\x20\xf8\x9f\xb5\xbd\x10\xb2\x24\x27\x45\xa1\x12\x0f\xd9\xa2\xfa\x4f\xe5\xc7\x9f\x8e\x22\x5c\xdf\x1e\xd6\xd1\x28\x98\x2e\x92\xa8\x9f\x02\x5c\x8d\xa9\x3e\xfc\x59\x80\xc2\x3f\x6b\xd4\x46\xff\x17\x22\x09\xc3\xed\x7e\xf7\x14\xed\xef\xd6\x3b\x92\xb6\x2b\x38\x0b\xf3\xe1\xb0\x8d\x1e\xfb\x5d\x1b\x63\xe0\xaa\x9b\x42\x43\x1a\xd1\x52\xd8\xa4\xcb\x9f\x99\x02\xae\x3b\x9c\xa4\x9e\x85\x61\x55\x49\x65\xa0\xc0\x67\x96\xbc\x40\xb8\xba\xa3\x90\x0f\x6b\x47\x34\xe7\xfa\xf8\x3f\x23\x9c\xe5\x2b\xc1\xee\x88\x5d\xb7\xaa\x9f\x02\x72\x9a\x2b\x1c\x94\xad\x95\x7f\xe8\x57\x12\x37\x3b\x71\xe6\x4d\xb7\x3a\x8d\x09\x83\x29\xa2\x84\x77\xa4\x00\x64\x65\xde\x34\x47\xc6\x95\x36\x3d\xb3\x39\xb6\x4e\x58\x92\xd3\xcf\x9e\x73\xce\x47\xc9\x99\xb5\x38\x92\x7d\x6f\x34\x98\x35\x4c\x0f\xd1\x5c\x58\x73\xfd\xa8\x35\xb0\x61\x67\xd8\xc8\x4e\xde\x5c\xb3\xb8\xfc\x50\xba\xbc\x84\x15\x05\x91\x28\xd7\xc0\x8a\x42\x36\xba\x1d\x6e\xfb\x83\x47\x74\x81\xa6\x36\x3c\x06\x85\x14\xcf\xa8\x06\xf6\x34\x39\x13\x23\xab\x9e\x92\x45\x01\x64\x15\x1a\x5e\x14\xce\x28\xcc\x4a\xf6\x83\x97\x75\x49\xf0\xbf\x86\x5c\xd6\xea\xa2\x77\xaa\x25\x94\xc8\x04\x39\x66\x66\x32\x3e\x0b\xbf\x5e\x9e\x6d\x2b\x19\x6e\x19\x94\xe4\x70\xcc\x32\x5c\xf7\x1c\x65\xa7\x9c\xd1\x5d\x5c\x3d\x1e\x65\x6d\x71\x61\xdd\xb6\x93\x55\xcb\xc4\x6e\xf6\xa3\x4c\x76\x45\x73\x17\x30\xd4\x2f\x86\x60\x9f\x28\xb4\xb2\x34\x1e\x1e\xad\x1b\x6e\xe6\x50\xf0\xef\x34\x62\x2d\xac\x1b\x4b\x69\x22\x7b\xf3\xb4\xe8\x60\x02\x61\x5d\xa1\xa2\x49\xc4\xf3\x33\xee\x5a\x27\x08\xbc\x26\xe7\x49\x0e\x8d\xac\x8b\x94\xaa\x28\x8b\x93\xc5\x73\xef\x90\x29\xd1\x22\x8e\x29\xb1\x60\x8d\x5e\x70\x56\x2e\x16\xd7\xd7\xd7\x1f\x3e\x7c\xf8\xf8\xf1\xe3\xa7\x4f\x9f\x16\x74\x95\xab\xde\x7c\x9c\x1d\xe2\xff\x77\x57\xb7\x53\xe2\x08\x53\xf4\xa1\x93\x84\xae\x38\xaf\x15\x71\x5a\x56\xb9\x86\x6b\x8f\x4a\x38\x07\x85\xcf\x4c\xa5\x05\x31\x6f\x7b\xa4\x37\x31\xb4\xca\x58\xde\x5f\x37\x9c\x8b\x6c\x2b\x80\xa5\x29\x37\x2d\xe2\xdc\xd7\x9d\x5c\x0c\x86\xd8\x51\x9e\x70\xde\x57\xa7\x25\x24\xdd\x9f\x65\x85\x37\xad\x38\x76\x72\xe2\x82\xf0\xe3\x82\x63\x47\x1a\xac\xbb\xd1\xec\x1d\x05\xfa\xba\x7c\xb8\x8f\xd6\xab\xa7\xf5\xee\xeb\x13\x11\x19\x29\xc0\xfe\x61\x17\x8d\xb4\x28\x72\xca\x23\x6b\x61\x60\xbb\x3a\x1b\xf7\x5c\x9d\xd3\x09\x26\x7f\x6b\xf7\xb0\x1b\x1b\x1c\xde\x25\xff\x99\x39\x7a\xd7\x8e\xed\xbd\x79\xd2\xfc\x82\xad\x60\x79\x88\xb6\xf4\xbc\x1a\x1b\x24\x8d\xaf\x98\x32\xfc\x0c\x2b\xbf\x6c\x39\xda\x8c\x8d\x56\xcc\xe4\xef\xd8\x6a\x9b\xe3\x37\xa9\x00\x7f\xb0\xb2\xb2\x15\xfb\x3b\x4d\xf6\x17\x4d\x42\x2e\xaf\xde\x69\xc4\xae\x05\x89\x88\x5b\x00\x67\x92\xa8\x8c\xba\x61\x40\xd6\x11\x1d\xcd\x9a\xf3\x88\x7e\x02\x9d\x9b\x71\x1c\x13\x1f\x1e\x76\x37\xbf\x16\xf6\x64\xfd\x6f\x7e\xb2\xdf\xd7\xf4\x86\x35\x7a\x6a\x3b\xda\xdc\x38\x27\x43\x4a\xc2\x0d\x7c\x7e\xd8\x42\xc0\xb4\x6e\xa4\x4a\x21\x50\xb2\xac\x8c\xb6\x97\xfe\xfc\xb0\x8d\x2f\x8f\x8c\x26\xa0\xaa\xdb\xaf\xdc\x7e\x27\xc1\x76\x3c\x3a\xbe\x50\xa2\xcc\xf9\x23\xaa\x73\xbf\x0c\xef\x82\x65\x18\x12\x22\xba\xec\xda\x07\xf7\xf9\xdc\x3d\xbb\xbe\x20\x81\x25\x21\x2a\xa5\xc2\xee\xb5\xed\x7b\xff\x0e\x00\x00\xff\xff\xa9\x8d\xbd\x44\xe5\x11\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x7f\x6f\xe3\xb8\x11\xfd\x3b\xfc\x14\xd3\x14\xe8\xc5\x40\xa2\x64\x81\x76\x8b\xbb\x02\x05\xbc\x89\xdb\x75\xbb\x89\x0d\x2b\xd9\xb6\xa8\x16\x0b\x5a\x1a\xc9\xc4\x52\xa4\xca\xa1\xec\xf8\xdb\x17\x43\x52\x8a\xe3\x38\x68\x71\x01\x02\x48\x14\xe7\xbd\xf9\xf1\x66\x48\x67\x8f\x9f\x61\x2b\x7b\xed\xb1\x82\x0f\x22\xcb\x3f\xc3\xc3\xf4\x7e\x26\xb2\xe5\x52\x0c\xcb\xc5\x15\x50\x27\x77\x06\x08\x89\x94\x35\x04\xb5\xb3\x2d\x10\x96\xbd\x43\xbd\x07\xf2\xd6\x61\xc5\xef\x0e\x3d\x05\x8c\xfc\x5f\x0f\x8b\x65\x3e\xcf\x03\x4e\x51\x7f\x2a\xea\xdb\x84\x56\xd4\x2b\x88\x0b\xc5\x95\x89\x2f\x73\x23\x5b\x2c\xea\x25\xfc\x7b\xf8\xa0\x8a\x7a\xf5\x4d\x64\x6b\xf7\x2b\x6c\x8b\x2b\x36\xe6\x4f\xb7\xf7\x77\x45\xbd\x7c\xcf\x85\xf9\xed\xe2\xfe\x7e\xfa\x70\x97\x8c\xe7\xd2\x35\x94\x65\x59\x51\x2f\xbf\x85\x10\xee\x66\xf9\xed\x6a\xbe\x7c\x9c\x2f\x1e\x02\xc4\xbc\x06\x63\x8f\xec\x14\x41\xe7\xec\x56\x55\x58\x5d\xc2\x1b\x0e\x54\x7e\x83\x2e\xe6\x8e\x5e\x1c\x82\x0b\x55\x8f\x66\x13\xb0\x4e\xa4\x1d\xd2\x80\x32\x1e\x9d\x2c\xbd\xda\x22\xd0\x06\xb5\xce\x0e\xdc\x4f\xb1\x41\x2b\xf7\xb0\x46\xe8\x09\x2b\xf0\x16\x2a\x55\xd7\xe8\xd0\x78\x25\x3d\x82\xdf\xe0\x01\x55\x28\xd4\xb1\x63\xc5\xef\x7e\x22\xb0\x3b\x03\xd2\x35\x7d\x8b\xc6\x53\x16\x22\x4e\x81\xe5\x22\x7b\x1c\x28\x65\x15\x22\xb9\x4e\x18\xa5\x43\xe9\xf1\x70\xc5\xe0\xae\xa8\x57\x62\xfe\xe2\xb7\xde\x43\xdc\x46\xc1\x97\xd2\x1a\x8f\xc6\x83\xad\x41\x82\xc1\x5d\x14\x5b\x06\x39\x22\x88\xec\xd3\x6a\x10\xdf\x95\xac\x2a\xb8\xf8\x30\xc9\x0e\xd8\xcb\xee\x15\xb9\xed\xf6\xcc\x75\x6b\x3b\x75\x0a\x3c\x00\x81\x34\x15\x90\xdc\x22\x81\xf2\x20\xe9\x90\x14\x76\xca\x6f\xd2\x42\x27\x89\x76\xd6\x55\x27\x1c\x29\xbb\x63\x3f\xaa\xbe\x65\x4f\xc4\x3f\x9c\x3a\x19\x56\x44\xf7\x16\xc8\x57\xb6\x0f\xb4\x7f\xcb\x17\x0f\x27\xb0\x19\xe9\x18\x1d\x2b\xe5\xdf\xe6\x90\x57\xdf\x52\x19\xc0\x67\x45\x5e\x99\xe6\xdd\x3c\xb2\xe1\x1b\x0a\xb3\x65\x86\x45\xef\xbb\xde\x53\x54\x16\x94\xb6\x6d\xa5\xa9\x98\x44\x7a\xd0\x56\x8e\x2d\x0c\xb5\x75\x63\x58\xca\x78\x1b\xfc\x88\x7a\x3c\x41\x68\xb6\x6f\xf8\x9e\xb1\x64\xc2\xd9\x33\x96\x3d\xa7\xec\x88\x31\x15\xa2\x51\x5b\x34\x89\xc6\x3a\x70\x56\xe3\x29\xfc\x67\x2c\x8f\x09\xd8\x5b\x26\x78\x22\x8c\xb9\x1e\x1b\x2a\x95\x41\x19\x7e\x88\x42\x0c\xd8\xd8\x69\x59\xe2\x3b\xb5\x3b\xc1\x1a\xf2\x71\xcc\x4a\x87\x7a\xd4\x8a\x42\xdd\xbe\x28\xf2\x04\x52\xeb\x68\x4b\xa7\xc0\xe8\x18\x2a\xe8\xef\x55\x6f\x0d\x8a\x0c\x12\xdf\x48\xd3\x24\xa5\x0d\xeb\xb1\x28\xff\x87\x00\x22\xf4\x31\xa1\x6b\x0f\xc9\x2a\xd4\xf8\xba\x91\x1d\xb6\x76\xcb\x2b\x62\x15\x9e\xe8\x88\xe8\x54\x58\xae\x3d\x66\x09\x75\x66\x90\xdc\x4b\xe7\x4f\x8f\xb4\x58\xfd\xa0\xa8\x03\xb9\xf1\x7b\x54\x02\x67\x1e\xab\xff\xad\xbb\x08\x76\xe4\x40\xdf\x35\x4e\x56\x21\x8e\xa7\xf8\x48\xa0\xb1\x91\xe5\x3e\x85\x01\x09\xb5\xec\x1d\xcf\xcc\xc4\x59\x5b\xd7\xca\x53\xc9\x4c\x78\x89\x26\xff\x0c\xb3\x7f\xce\x1f\xe1\x76\x71\x37\xe3\x31\x99\x0b\xa9\xf5\xda\x3e\xff\x49\x94\x6b\x28\xd7\xa2\x04\xfd\xe6\x3f\x13\xb3\x67\xe5\xa1\xb4\x15\x9e\xdd\xa3\x34\xca\x34\xe2\xe6\x2c\xef\xcb\x12\x89\x32\xf1\xf1\xf7\x67\x73\xb3\x95\x5a\x55\x70\xfb\x65\x0e\x3d\xc9\x06\xe1\x82\x10\xa1\x45\x0a\x2f\x9c\x9d\xd6\x3a\x84\x0a\xbd\x54\x9a\x26\x99\xf8\xf8\x87\xb3\xc7\x0d\x3a\x84\x9d\x0c\x39\xee\x8d\xc3\xd2\x6e\xd1\xc9\xb5\x46\x6e\x85\xb5\xc6\xf6\x25\xcf\x29\x46\xa5\x31\x13\x1f\x7f\x3e\x9b\x82\xc3\xff\xf4\x2a\x9e\xd9\x6e\xab\x4a\x8c\x07\x19\x12\x1a\xaf\xf7\xd0\x1b\xb9\x95\x4a\x07\xac\x0b\xcc\x9a\x0c\x24\xfd\x60\x55\x4d\x32\xf1\xc7\x9f\x47\x77\x47\x61\x52\xdf\x75\x5a\x61\xc5\x75\x98\x85\x24\xfd\xf5\x69\x0e\xcb\xe1\xf3\xd2\xd9\xb6\xe3\x7b\xc1\x72\x29\xa6\xda\x6f\x6c\xdf\x6c\xe0\x6b\xba\x5b\x78\x17\x66\xb9\x85\x56\xfe\x40\xa0\xde\x21\xec\x6d\x0f\xa5\x34\xe0\xb0\x52\x0e\x4b\x9f\x04\x1a\x9a\x9a\x15\xcb\x13\xbe\x76\x0a\x4d\x45\x97\x82\x6c\x8b\x5e\xb5\x71\xdc\x2b\x02\xf2\x4a\x6b\x8e\xa5\x4e\xc9\xf0\x96\x0f\x4a\x90\xec\x53\x71\xb5\x96\x7c\x68\x8e\x9e\x77\xc1\xb5\x0c\xfe\x12\x04\xa8\x48\x38\x94\x64\xcd\xe5\xe8\x1e\xfb\xb1\x0e\x13\xa3\x56\x4d\xef\xe2\x78\x09\x78\x66\x48\x0a\xa8\xb6\xd3\xc8\xc7\xa8\xf4\xca\x9a\x6c\xb0\xfd\x89\xc4\xb8\xc3\x78\x6c\x5c\xf8\xcc\x3e\x7a\xa7\x9a\x06\x19\x6c\xb7\x41\x93\x4e\x6c\x0e\xf1\xeb\xf4\xe9\xcb\xe3\xec\xee\xfb\x34\xff\xfb\x72\x9a\xe7\x1c\xec\x56\x3a\x15\xe2\xe0\xd8\xd0\xc7\xeb\xc0\xd2\x2a\x13\x3a\xf3\x5d\x33\x6f\xe3\xa8\xe0\xf1\x1b\xcc\xb9\xf8\x71\xd0\x8f\xee\xd2\x18\xc1\x4e\x69\x2d\x4a\xc9\x71\x8d\x75\x89\x61\x46\x84\x38\x36\x03\x04\x75\x58\xaa\x5a\xc5\x1d\x31\x7d\xe1\x63\x4f\xe8\x58\xa9\x62\xc8\x2d\x65\xf0\x18\x8c\x1c\x79\xe8\xa4\x93\x2d\x7a\x74\xaf\xc6\x34\xdb\x1d\xb8\x18\x2f\x53\x01\x10\x9f\xbd\xe0\xa4\x99\xb4\x73\xcd\x53\x80\x6f\x2c\xc9\x8a\xd9\x22\xfe\xe9\x22\xf0\x26\x03\xbb\xf1\xb8\x1e\xbd\x62\x80\x51\x4e\xb6\xf7\x83\x9e\x1c\xfa\xde\xf1\x15\x0c\x28\x36\x66\xe8\x57\xb8\xb8\x99\x64\x30\xe7\x63\xa2\x96\x4a\xb3\x38\xe3\xb2\xb1\xa6\xb8\xba\x99\x08\x45\xc9\x92\xef\x7f\xaf\x86\xb5\x32\x5d\x1f\x04\x29\xd7\xd6\xf9\xd0\x1b\xcb\xa5\x18\xb2\xab\xa2\x26\x86\xf0\x06\x7d\xf0\x44\x94\xad\x46\x22\xbd\x8f\xdd\x3b\xce\xe0\x14\xa7\x78\x1d\x27\xa5\xfe\x4c\x21\xd1\xa6\xb8\x4a\x1b\x8b\x7a\x35\x89\x9c\x0b\x03\xad\x2c\x17\xf9\x25\x07\x17\xcc\x61\xda\x75\x1a\xf3\xd2\xa9\xce\xbf\x97\xc0\x24\x7c\xbe\x63\xfe\x12\x60\xb2\x55\x2e\x32\x53\x8b\xdf\xfe\xe6\xba\x27\x77\xbd\x56\xe6\x9a\x0f\x7e\x4b\x92\x02\x90\x10\xd6\x80\xeb\xc3\xa5\x72\x2b\x00\x00\x54\x0d\x1a\x4d\xe3\x37\xe1\xa0\x75\xcd\x16\xfe\x0c\x37\xa1\x32\xe1\x33\xff\x11\xfa\x71\xcc\x71\x1e\x3c\xb6\xf0\x61\xd8\x1e\x76\xa1\x26\x7c\x6f\xfb\xf9\x30\x62\x7e\x39\x8f\x7b\x4d\x05\xaa\x16\x62\xd8\x5a\x3b\x6b\x7c\x6b\xc9\x7f\x97\x3c\xa0\xca\x24\x0d\x0b\xfc\x9b\x81\x59\x2e\x94\xa9\x6d\x98\xaf\x17\x9d\xe4\x59\x69\x5f\x6c\xe0\xc0\x66\x32\x09\x98\x9e\xcf\x9b\x43\xa8\x93\x04\xa3\xb7\x95\xa2\x4e\xcb\x3d\x54\x4a\x6a\xdb\x8c\x8e\xc7\xa9\xac\xbc\x46\x38\x4f\x7a\x38\x8f\x8b\xaa\x0c\x89\xef\x03\x76\x58\xd9\xa8\xaa\x42\x03\xd2\xd0\x0e\x1d\x54\x58\xa7\x2b\x6e\x78\x3d\x3f\x17\x23\x17\x77\xcc\x28\x45\x0e\xcd\x21\xf5\xda\x8f\x69\x61\xd7\x05\x3f\xb8\xde\x88\xac\x56\x22\x5b\xcd\xc4\x7f\x03\x00\x00\xff\xff\xd9\x64\x66\x86\xfb\x0d\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-exec.1":    vaultedExec1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-passwd.1":  vaultedPasswd1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-exec.1":    &bintree{vaultedExec1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-passwd.1":  &bintree{vaultedPasswd1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
