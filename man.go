// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdb\x38\x12\x7f\x8e\x3e\xc5\x3c\x5d\x53\xc0\x51\x91\xee\x3e\xe5\xae\x07\xf8\x12\xef\xc6\xd7\xae\x63\x58\xce\x16\xc5\x7a\x11\x50\xd2\xc8\xe6\x86\x22\xb5\x24\x65\xc7\x28\xfa\xdd\x0f\x33\xa4\x64\x39\x71\xf7\x02\x1c\x0e\x28\x0a\x44\xe6\xfc\xe1\xcc\x6f\x7e\x33\xc3\x74\x79\x0b\x5b\xd1\x2a\x8f\xe5\xea\x02\xf5\x16\x2e\x93\x34\xbb\x85\xd9\xf8\x97\x49\x92\xce\xe7\x49\xfc\x0d\xe8\xa7\xd5\x05\x98\xd6\x37\xad\x77\xe0\x36\xa8\x14\x14\xa6\xae\x85\x2e\x1d\xf8\x8d\xf0\xa0\x8c\x28\xc1\x61\x61\xd1\x3b\xa8\x8c\x05\x11\x34\x83\xd4\xde\x80\xdf\x60\x90\x62\xfd\xd9\x97\xd9\xdd\x3c\x9b\x66\x6c\x63\x55\xfd\x6b\x55\x5d\x0f\x2c\xad\xaa\x05\xac\xaa\xa9\x16\x35\xae\xaa\x39\xfc\xb6\xaa\xa6\x77\xf3\xe5\xf4\x6e\x96\xad\xaa\xf9\xef\x49\x9a\xdb\x97\x32\xb0\xba\x58\x5d\x08\xe7\x5a\x92\x61\x71\x61\xf5\x49\xe9\xec\x16\x6e\x26\xd9\xf5\x62\xca\x1f\xd9\x83\x6b\x8b\xc2\xa3\x03\x01\x0e\x9d\x93\x46\x43\xeb\xa4\x5e\xc3\x56\x58\x29\x72\x45\xbf\xe8\x92\xaf\x30\xfe\x9c\xc1\x23\xee\xc1\x79\x63\xb1\x04\xa9\xf9\x2b\xfb\x91\xc2\x72\x83\x89\x45\xd7\x2a\x4f\xc2\xa8\xb7\xd2\x1a\x5d\xa3\xf6\x43\x45\x16\xa1\x75\x58\x82\x37\xb0\x46\x8d\x56\x78\x3c\x19\xce\x9d\x54\x2a\xe1\x98\x72\xe8\x62\x5c\x39\x96\x22\x08\xa4\xec\xfb\xb2\x0b\x2c\x48\x07\xa2\xf5\xa6\x44\x8f\x05\x45\xa5\xb2\xa6\x66\xe1\x10\xac\xec\x76\xf2\xe9\x13\xc5\xe6\x94\x63\x23\x90\xd5\x20\x47\xd2\x41\xab\x1f\xb5\xd9\x69\x30\x16\x5a\xed\x1a\x2c\x64\x25\xb1\x1c\x45\x65\x6e\x43\x9a\x0a\x53\x37\xc2\xcb\x5c\xe1\xc1\x79\xba\x20\xd6\xd2\x7b\x2c\xd3\x98\xde\xe9\xcc\x78\xbc\xa2\x64\x64\xd9\x2d\x85\x2f\x9c\x92\x6b\xcd\x41\xdc\x6d\x50\x77\xb1\xa0\xc0\xc5\x1c\x50\x1c\xa4\x83\x9d\xd8\x53\x64\xa5\xa3\xfb\x95\x2d\x82\x37\x09\x39\x2a\xb5\xc8\xa5\x92\x7e\x4f\x91\xf4\x56\x14\x8f\xec\xbf\x92\x15\x7a\x59\x23\x98\x78\x9f\xa0\x6c\x04\xbb\x8d\x2c\x36\x50\xa3\x60\xc5\xc8\xae\x88\x35\x6a\x9f\xec\x4c\xab\x4a\xc0\x27\xe9\x08\xab\x25\x56\x52\x4b\x8f\x6a\x9f\x32\x56\x22\x76\x92\x74\xd9\x21\xf5\x3b\x48\x4b\xb2\x18\xa4\xa0\xbf\x6a\x95\x82\xf1\x62\x46\x01\x74\x1b\x63\x3d\x10\x9e\x3b\xb7\xac\x51\x74\x13\x08\x7a\x52\xc8\x10\x49\xfb\x38\xcb\xee\x7f\x99\xce\x7e\x86\x31\x2c\xee\x3e\x4d\x28\x64\x39\x2a\xb3\xe3\x7a\x2a\xd1\x0b\xa9\x1c\x18\x0d\x1b\xb3\x83\x5f\x23\xf8\x83\x0a\xc7\x2a\x5d\x9a\xa4\xd3\x79\xb2\x20\xed\xfc\xbd\xf1\x84\xe6\x5a\xec\x21\x47\x68\xd0\x56\xc6\xd6\x14\x72\xe9\x37\xa6\xf5\x10\xf2\xba\xa7\xa8\x77\xd5\xea\x0d\xb8\x46\xec\x34\xc3\x27\x4d\x3e\x53\x72\xa4\xde\x9a\x47\xc2\x6c\x4c\xc8\x08\x0a\x8b\x25\x6a\x2f\x85\x0a\xb9\x74\xa6\xb5\x45\x87\xb9\x12\x2b\x56\xa5\x4c\x21\x3c\x67\xf2\x1c\xd3\x75\x9a\x0c\x80\x37\x82\xc2\xe8\x4a\xae\x5b\xcb\x27\xa0\x92\x0a\xdd\x08\xa4\x76\x5e\xe8\x02\xa1\xb1\x86\x3e\x8d\x00\x7d\x91\xbe\x4d\x9f\x45\x9f\x6e\x21\x3c\x45\xff\x1f\x8c\xd7\x51\x25\xdd\x66\xe4\x36\xa3\x3f\x9c\xd1\xa3\x55\x35\x2d\x5a\xe7\x4d\xbd\xaa\xe6\xff\x8c\x59\xd9\xc3\x8e\x8a\x2a\x08\xd2\x1d\x5b\x87\xa3\xce\x51\x47\x1f\x3a\x5c\xa3\x52\xa4\x38\xc0\x85\x8a\x70\x50\x54\xe1\x6b\x12\xca\xed\xa0\x8b\xe0\x1e\x02\x1f\x94\x90\x37\xab\x6a\x31\x62\xd6\x18\xd6\x0b\xab\xa3\xd3\x91\x48\xc1\xb5\xd2\x53\xf9\x71\x7e\x71\x2b\x54\x1b\xc2\x71\xa0\xcc\xae\xf0\x82\xd1\x34\xaa\xa3\x7b\x1e\x2b\xa4\xc3\xb5\x68\x08\x5f\xa4\x06\xf9\x4e\x39\xe1\x9f\x40\x0d\xa2\x73\xb7\x75\x58\xb5\x0a\xa4\x4e\x8c\xdf\xa0\xa5\x40\xaf\xad\xa8\xeb\x67\x8c\xe5\x46\x31\xd9\x64\x40\x1b\xd2\x51\xa8\xb6\x44\xb6\x23\xac\x15\xfb\x60\x29\xd2\x5a\x12\x8c\x59\xac\xcd\x96\xeb\x7e\x3a\x4f\xa6\x01\xe9\xd1\xae\xf3\x96\x6b\xbb\x6d\x1a\x25\xb1\x84\xd2\xa0\x63\xc5\xb5\xf0\xc5\x06\x8c\xee\x4b\xa3\xb1\xb8\xba\xe0\x2a\x24\x3c\xb1\xb4\x4b\x64\x20\x44\x32\x22\xb5\x47\xdb\x58\x0c\xd8\x07\x01\x1e\x9f\x3c\x78\xac\x1b\x45\x5c\x1a\x98\x7b\x6d\x94\xd0\xeb\x37\x0e\xf2\x56\x2a\xbf\xba\x90\x3a\xe6\x86\x0e\xbf\xeb\x0e\x53\x08\x1b\x51\x3c\x8a\x35\x32\x7b\x53\x74\xec\x41\x55\x67\xb1\x77\x5a\xd0\x35\x5a\xc2\x81\xf4\x1b\x72\x36\xa9\x24\xaa\xd2\x51\x3a\x15\xfb\xcb\xd5\x9a\xc2\x58\x39\x03\x62\x2b\xa4\xe2\xec\x52\x85\x88\x98\x3a\x8b\x8d\x12\x05\x9b\xae\x5a\x5d\x04\xf4\x1b\x0b\x6b\xd7\xe6\xa0\xe4\x23\x26\x39\x6e\xc4\x56\x52\x03\xd5\x65\x2f\xd6\x65\xbc\x97\x09\x00\x15\x45\x81\x8d\x77\x5c\xbd\xaa\x45\x16\x21\x3c\xd0\x17\x8a\x91\xdf\x27\x8d\xa5\x88\x95\xf0\xef\xec\x6e\x16\xd3\x10\x12\x34\xa6\xb6\x06\xf8\x24\xea\x86\x2a\xcd\x9b\x0e\x95\x7f\xb4\xce\xf7\xdd\x6e\x58\xe9\x0c\x24\xd6\x13\xf2\x32\xa2\x80\x71\x1c\x42\xc1\xf5\xa1\xbb\x82\xe7\xc5\x0a\x6f\xbe\x7e\x05\xba\x04\xa4\xe3\xcf\xd9\xb5\xc5\xd2\xc1\xb7\x6f\x6f\x56\xd5\xe2\x59\x6d\x5b\xac\x2c\x72\xb9\x24\x99\x17\xd6\x83\x00\x8d\xbb\xbe\x31\x73\xe4\xe9\x03\x99\x32\x56\xd8\xfd\x31\x17\x71\xc8\xa2\x0e\x9a\x0c\x9e\x1a\x19\x28\x86\x38\x24\x4b\x84\x52\xb9\x79\xfa\x7b\x52\xe4\xc0\xff\x12\x05\x0a\xd4\xab\xfe\x4f\x93\x9f\x28\xd9\x30\x13\x35\x9e\x2d\xf7\x0d\x9e\x51\x5b\x73\xc9\x75\xe8\x7c\x67\x21\xb4\x67\xcb\x8e\xfb\x63\x47\x04\x02\x46\xdf\xf2\x03\x93\x76\x23\x57\xac\x2a\x02\xac\x61\xa6\x76\x49\x17\x9c\xb3\x80\x34\x56\x47\x69\xa0\x44\x3b\xc7\xb3\x07\xa1\x25\xb6\x36\x69\x74\x2f\x91\x4e\x6f\x3a\x1f\xa6\x37\xfd\xa1\x63\xd9\xc3\xe1\x8c\x07\x8a\x4e\x20\xfc\xf5\x5f\x85\x96\xe6\x11\xf5\x41\x26\x64\xc4\xd3\xc7\xef\x88\xc2\x39\x5f\x3c\x94\xcb\xa9\x84\xbd\x4d\x32\xf4\x67\xb5\x68\x7e\x0b\x5a\x7f\x8f\xca\xc7\x1d\x99\x9d\x9e\xa2\x0e\xdc\x26\x94\xd1\xeb\xbe\x1e\xa5\x8d\xec\x97\xdc\x6b\x87\xfe\xec\xb7\x83\x3e\xa7\x64\x81\x47\xa4\x05\x47\xa4\x75\x18\x97\x86\x26\x73\xac\x8c\x65\x4b\x3c\x9a\x10\xf0\xa2\x81\x74\x39\xe1\xf9\x80\x2e\xfc\x71\xf2\x85\x47\x9d\xae\x25\xb7\x0e\x1d\x75\xdb\x5a\x68\x52\x32\x04\xe8\x89\xc1\xf1\x68\x14\xec\xa3\x94\x0c\xa5\x02\xa9\x91\xa9\x6c\x99\x05\xaa\x3a\x0c\x9a\xcf\x7b\x71\xd7\x59\x03\xe2\x94\x70\x9c\x58\x1e\x9a\xca\xae\xdf\x46\xae\x0d\xf6\xbb\xda\x3a\x1f\x48\x6e\x65\xc7\x3c\xfd\x90\x5d\x4a\x6a\xb9\x6f\xe3\xd8\x79\xb2\xfc\x6a\x62\x8e\x3c\xc2\x5d\xd2\xf0\x58\x12\xa1\x76\x73\x0e\x95\xa6\x51\xf8\x72\x2e\xcc\xb1\x10\x44\x25\x5d\x00\x87\x8d\xd9\xb5\xb9\xf3\xd2\xb7\x7c\xd7\xd3\x41\xa5\xf4\x27\x27\xf1\x35\xe2\x6b\x0e\xcf\xee\x4d\x4b\x4d\x6f\x2b\x4b\x1e\xc0\x3a\x8b\x34\x22\xf5\xed\x28\xf1\x1b\xe3\x30\xd0\x1d\x0f\x43\x58\x76\x41\x4a\x5f\x26\x9a\xd2\x42\x63\x4b\x29\x6c\xf9\x1d\xbc\x52\x75\x0c\x9c\xb8\x4a\xd2\x45\x46\x1c\x0c\xab\xf3\xbc\x85\xf7\x91\xfe\xc6\x9f\xb3\x87\xf1\xf5\xf5\x24\xcb\x1e\x3e\x4e\xbe\x3c\x4c\x6f\x98\x1d\x73\x9b\x8c\x35\x48\x96\xad\x24\xda\xbe\xd4\x0e\x65\x96\xc2\xbd\x96\x7f\xf2\x6c\x0c\x28\x8a\x0d\x57\x86\xa9\x06\xd1\xa2\xfc\x9f\x8a\x4f\x7a\xda\x8b\x6c\x72\xbd\x98\x2c\x07\xce\x74\x9e\x2c\xfb\x5d\xa4\xa7\x34\x27\xd7\x1a\x2c\xfe\xd9\xa2\xf3\xee\xff\xe0\x49\x96\x4d\xef\x66\x0f\xcb\xbb\x8f\x93\x19\x35\xc0\x77\x70\xe4\xe6\xfd\x62\xba\xfc\xd2\xff\xca\x3e\xce\x43\x76\xe3\x62\x11\x4a\xe7\xb4\xc9\xbf\x52\x45\xeb\x46\xc4\x49\x99\x30\x0c\x9b\x86\xa6\x78\x85\x6b\x51\xec\x21\xbb\xf9\x48\x2e\x2f\x22\x09\x1c\xcf\xed\x8c\x91\xf1\xb3\x21\x1f\x0a\xa1\x99\xb5\xba\x91\x0e\x50\xf2\x08\xc6\x30\xe3\x2a\x7b\xe3\x9e\x8d\xc5\xe7\x5b\x29\x9e\xef\xba\xb1\x0c\x79\xaf\xe8\x55\x51\xb9\x1e\x56\xbd\xe3\x0d\x25\xb4\x96\x63\xe0\x56\xd2\x3a\xdf\xb3\x4e\xe8\x9b\x85\x28\x36\x47\x4b\x70\x07\xb4\xc0\x12\xe7\xac\x71\xb0\x2a\x24\x83\x1d\x7d\x27\xdc\xc1\x9b\xb7\xac\x8e\x6b\xc3\x1f\x31\x95\xeb\x5b\x46\xb7\x8b\x04\x20\x87\xf8\x50\xb8\x92\x42\xd0\x94\xcb\xfb\x9e\x50\xca\xec\xdc\x70\x8b\x8b\x8c\xcd\x8e\x96\xf1\x8d\x81\xf8\x1f\xed\x81\xd9\xfc\x46\xe8\x81\xd6\xc4\x1a\xea\xc5\x42\xa9\x38\xcc\x93\x52\x38\xaf\xc5\x93\xac\xdb\x9a\xa0\x79\x09\x1b\xd3\xda\xb7\xbd\x51\x67\xfa\x2d\x51\xf8\x93\xfe\x31\x34\xfa\x5d\x8a\x61\xce\x2b\x67\x98\x54\x86\x0c\x20\x5d\xcf\x1f\x7d\x7b\x39\x22\x92\x2f\xa6\x65\x5c\xb0\xd9\xb8\x8d\x45\x96\x0c\xfb\x22\x45\xb2\x4b\x5a\xb8\x80\x27\x2c\x73\xd3\x28\xf8\xd9\xe2\x68\xdb\x4c\xd8\x8c\xf4\x23\x1e\x25\xc1\x99\x2b\x36\xc3\x74\xa3\xab\xfe\x39\x27\x6c\x30\x07\x98\x40\xd6\x36\x68\x69\x6d\x4c\xd2\x4a\x06\x58\xcf\xe7\x49\x5c\x82\x78\x3f\xb6\xe8\x8c\xda\x32\x9e\x7b\x83\xc2\xea\x88\x38\x61\xf5\x95\xd8\xb9\x2b\x29\xea\xab\xab\xcb\xcb\xcb\xf7\xef\xdf\xff\xf0\xc3\x0f\x3f\xfe\xf8\xe3\x15\x5d\xe5\x5d\xaf\x7e\x55\x2d\x56\x7f\x0b\x57\xe7\xcd\x72\x80\x29\x3a\x38\x8a\x7b\x4c\x48\xce\xf3\x6e\x75\xba\xe5\x49\x07\x97\x09\xa5\x70\x04\x16\xd7\xc2\x96\x8a\x58\x31\x8a\xf4\x2a\x0e\xa5\x32\x6c\xbd\xcf\x0b\x2e\x78\x36\xd5\x20\xca\x52\xfa\x88\xb8\x70\xba\xa3\xf2\x83\x22\x91\x9b\x2d\x8e\xfa\xec\x44\xb2\x70\xbd\xac\x50\xc9\xe9\x6e\xc0\xd3\x8a\xd4\x61\x30\x26\x23\x22\xa7\x65\xbc\x7b\x17\xf8\x4e\x77\xf8\x75\x7c\xff\x69\x39\xb9\x79\x98\xcc\x7e\x7d\x20\x92\x79\x18\x2f\x66\x43\x5a\x3e\x3c\x38\x0c\x9e\x18\x42\x7a\xcb\x13\xe4\xfa\x52\xdd\xf5\xf5\xdd\xfd\x6c\x39\x68\x3b\xcb\xd0\x64\x4c\xab\x3d\x4c\x6f\x06\x37\xcf\xf7\x07\x0b\xe3\xc5\xec\x35\xda\x67\xe3\x5f\x26\x43\xbd\x2f\x1e\x43\xfe\x27\xed\xf3\xf1\xf2\x76\xa8\xbd\x11\x7e\xf3\x6a\xed\x11\xec\x3f\xd1\x0a\x1e\x96\xa1\x57\x16\xcd\x6b\x41\x7f\x5c\x53\x5d\x35\x85\xa7\xd1\xb8\x23\x13\x2b\x1d\xbf\x38\xe6\xc8\x65\xd1\xef\x90\x52\xc3\xd7\xaf\x69\x86\xfe\xdb\xb7\x63\xf7\x4e\xe1\xe2\xc3\xab\x5d\xfb\x0b\x18\x7c\x18\xca\xbd\x3c\x48\x19\xfd\xf0\x17\x8a\x28\x27\x1f\xde\x1d\xee\x9e\xdd\xc2\xcf\xf7\x53\x98\x0b\xe7\x76\xc6\x96\x30\xb7\xa6\x6e\xbc\xe3\xbb\xfc\x7c\x3f\x5d\x5d\xe4\x82\x26\x8a\xa6\xfb\xbd\x09\xbf\x77\x6d\x93\xc7\x8d\x7c\xdf\x8f\xe2\x87\x6e\xd7\x59\x1e\x67\x1f\xe7\xe3\x2c\x23\x1c\x74\x61\xe4\x87\xb5\xe3\x39\xf6\xfc\xf2\x2d\xef\xd1\xc6\x42\x4d\xa3\x7d\x7c\x55\x4b\x93\xff\x04\x00\x00\xff\xff\x26\x3a\x39\xbf\x0b\x17\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x4f\xe3\xc8\x12\x7d\xf7\xaf\xa8\xa7\x7b\x83\x14\x8c\x60\xe6\x29\x57\x3c\xe4\x42\x76\x88\x60\x82\x15\x87\x19\xa1\xf5\x0a\x75\xec\x72\xdc\x9a\x76\xb7\xa7\xbb\x9d\x4c\xfe\xfd\xaa\xba\xfd\x15\xf0\x20\xa4\xd5\xbe\x81\xed\xfa\x3c\xa7\x4e\x55\xc2\xcd\x1d\xec\x59\x2d\x2c\x66\xc9\xb9\x29\x50\x08\xb8\x0c\xc2\xf8\x0e\x56\xf3\xaf\x8b\x20\x8c\xa2\xa0\x79\x0b\xfe\x65\x72\x0e\xc6\x32\x6d\x0d\x30\x09\x5c\x5a\xd4\x2c\xb5\x7c\x8f\xcd\xeb\x03\xb7\x05\xd8\x02\xc1\x60\xaa\xd1\x1a\xc8\x95\x76\xff\x3b\x2f\x20\x14\xcb\x30\x23\x3b\xe5\xbf\x22\x23\x17\x2e\x7e\x5e\x3d\x46\xf1\x32\x76\x21\x93\xfc\xff\x49\x7e\x73\x12\x38\xc9\xd7\x90\xe4\x4b\xc9\x4a\x4c\xf2\x08\xfe\x4c\xf2\xe5\x63\xb4\x59\x3e\xae\xe2\x24\x8f\xfe\x0a\xc2\xad\x1e\xb3\x82\xe4\x3c\x39\x67\xc6\xd4\x64\xe5\x1c\x30\x2d\x47\xed\xe3\x3b\xb8\x5d\xc4\x37\xeb\xa5\x7b\xe8\xb2\x88\xdf\xa9\x73\x52\x1b\x34\xae\x04\x1f\x35\xbe\x5b\x3c\x3c\x50\x08\x94\x7b\xae\x95\x2c\x51\x5a\xd8\x33\xcd\xd9\x56\xe0\x14\x78\x0e\x06\xed\xff\x02\x65\x0b\xd4\x07\x6e\x10\x32\xcc\x29\x51\x03\x56\x35\x2e\x2e\xb6\x5c\x5e\x98\x22\xc9\xd7\x67\xa1\xcb\xa7\xc9\x2f\x08\x37\x6d\x47\x7e\x53\x4d\x10\x57\x98\xf2\x9c\x37\x19\xe5\xb5\x10\x30\x5f\xaf\xa0\x69\xbd\x56\x02\x81\x1a\x07\x2a\xef\x1f\x58\x05\xde\x55\x08\x31\x22\x05\x98\xc7\xf1\xd3\xd7\xe5\xea\x0b\xcc\x61\xfd\xf8\xb0\xa0\x36\x6d\x51\xa8\x83\xc3\x30\x43\xcb\xb8\x30\xa0\x24\x14\xea\x00\xdf\x9a\x2e\x7b\x17\xc6\xb9\x34\x61\x10\x2e\xa3\x60\x4d\xde\xdd\xf3\xca\x72\x25\xa1\x64\x47\xd8\x22\x54\xa8\x73\xa5\x4b\xcc\x1c\x47\x54\x6d\xc1\xb8\xac\x8f\x5c\xee\x80\x35\xfc\xb0\x0a\x4c\xc5\x0e\x12\x72\xad\xca\x30\xf8\x5e\x20\x35\x7f\xaf\x7e\x60\x06\xb6\xe0\x06\x0e\xec\x38\x85\x54\x63\x86\xd2\x72\x26\x0c\x30\x8d\x60\x54\xad\x53\xcc\x9c\x51\xdb\x58\x10\x2a\x65\x14\xdf\xc0\x04\xc3\x5d\x18\x0c\x80\x99\x42\xaa\x64\xce\x77\xb5\x76\x5f\x40\xce\x05\x9a\x29\x70\x69\x2c\x93\x29\x42\xa5\x15\x3d\x9a\x02\xda\x34\x24\x30\x4e\x00\xd0\x98\x6b\x74\x38\x79\x86\x00\x03\x89\x07\x30\x68\x0c\x39\x73\x13\x40\x0f\x2c\x96\x95\xd2\x4c\x1f\x4f\xf3\x95\x19\x30\x68\x7c\x60\x06\xf8\xab\xe2\x3e\x0d\x0f\xfa\xfc\x7b\x0c\xf7\x8b\x67\x47\xc0\xb6\xc9\x8e\x6b\x15\xea\x92\x49\xa2\xd5\xd0\x9d\xb1\x4a\xbb\x81\x1a\x0c\x99\x55\xb0\x43\x89\x9a\x59\xec\x93\x08\x86\x56\xb5\xa1\xa6\x53\xa8\x78\x13\x87\xb0\x21\x4e\xa0\xa9\x85\xa5\xc7\xaf\xbb\xdb\xf6\x8a\x20\x50\x20\x98\xb1\x44\x88\x80\xe2\x65\x6d\x07\x1b\x62\xf9\xf8\x6d\x27\x26\x03\xcb\x3d\x67\x70\x3a\x9f\x98\x71\xdb\x70\x3d\x8a\x82\xcd\x68\xb3\xca\xda\x58\xe2\x4e\x6d\x7c\x8d\x4a\x67\xa8\x7b\xe6\x52\x23\x95\xc0\xb0\xd1\x8c\xe5\x4a\x59\x9c\x79\xda\xa6\xac\x36\xd8\xb1\x74\x38\x6c\xa6\xde\x1a\xcb\x6d\xed\x6a\x1d\x6f\x2a\x41\x18\x8c\xc2\x37\x75\x65\x0e\xbf\x3d\xaa\x9a\xf8\xb2\xe7\x99\x1b\xa9\x36\x22\x91\x5e\x2a\x0b\x25\xb3\x69\x11\xd8\x42\x19\xa4\x02\x98\xa7\x37\xc9\x93\x6f\x52\xf8\x16\x68\x82\x85\x88\x98\x31\x9d\x8d\xca\x89\x17\xd5\x41\x12\xb3\x20\x5c\xc7\x34\x7b\x90\x4c\xb6\x35\x5c\x35\x64\x9d\x7f\x8f\x5f\xe6\x37\x37\x8b\x38\x7e\xb9\x5f\x3c\xbf\x2c\x6f\x89\xb2\x24\x94\x73\x09\xdc\xd9\xe6\x1c\x75\xa7\xd0\x2c\x4d\xd1\x18\xf8\x81\xc7\x10\x9e\x24\xff\x59\xbb\x82\x90\xa5\x05\x69\x17\x41\xdc\x77\x8b\xf0\x1f\xeb\x4f\x38\x9e\x45\xbc\xb8\x59\x2f\x36\x83\x64\xda\x4c\x36\xdd\xa6\xf0\x18\x13\x3e\x7c\x27\x41\xe3\xcf\x1a\x8d\x35\xff\x42\x26\x71\xbc\x7c\x5c\xbd\x6c\x1e\xef\x17\x2b\x12\xd1\x0b\x38\x49\xf3\x69\xbd\xdc\x3c\x77\x6f\x5d\x8e\x91\x47\x37\x83\x03\xa9\x91\x1f\x9d\xf1\x90\xef\xb9\x02\x6e\x5a\x9e\x64\x81\xa3\x61\x55\x29\x6d\x41\xe0\x8e\xa5\x47\x88\x6f\xef\x29\xe5\xf5\xc2\x8b\xc0\xa9\x12\x3b\x8e\xcc\x5f\xc9\x36\xa4\x4c\xd2\x6c\x98\x46\xfb\x33\x40\x4e\xdb\xc5\xd3\xcc\x4d\xd9\x7f\xcd\x2b\xa1\x9b\xec\x39\x0b\xc6\xc7\x90\x96\x45\xef\x8a\xc6\xb5\x5f\x6e\xa7\x6b\x47\x55\xf6\x0d\x71\x73\xae\x8d\xed\x54\xc7\xab\x5c\xca\xd2\x82\xfe\xec\xf4\xe0\xf4\x14\x98\x38\x8f\x03\xf1\x0f\x06\xeb\xfd\xc0\x4c\x9f\xcd\x99\x73\xd7\x2d\xdc\x5e\xa9\x5a\xc7\x56\xb5\xdb\xc5\x13\xd9\xf7\x87\xda\x15\xa4\x4c\x08\x12\x38\x6e\x80\x09\xa1\x0e\xa6\x39\x4e\x3a\xc3\x2d\xfa\x44\x33\x97\x1e\x03\xa1\xe4\x0e\x75\xaf\x6c\xb6\x60\x72\xe0\x35\xd0\x4a\x08\x20\xaf\x70\xe0\x42\x78\xa7\x30\x29\xd9\x2f\x5e\xd6\x25\x51\xf3\x12\x0a\x55\xeb\xb3\x2e\xa8\x51\x50\x22\x93\x14\x98\xd9\xd1\xfc\x1c\x35\xba\xed\xe8\x68\x6e\xb9\x53\x37\x5a\x23\x43\x05\xe0\xa6\xd3\x0f\xb7\xeb\x06\xb5\x78\x3c\x9e\x55\xed\x78\xe1\xc2\x36\xfb\xb5\x51\x49\x7f\x01\x50\x27\x5b\xd0\x7c\x01\x96\xb8\x6c\x89\x92\xa9\x46\xb7\x32\x86\x27\x84\x0b\xc3\xed\x14\x04\xff\x41\x8b\x76\xe6\xc2\x38\xb9\x91\xf9\x9b\xd3\xb0\xa5\x09\xc4\x75\x85\x9a\x0e\x81\x20\xcc\xb9\xa7\x75\x14\x05\x87\x82\xa7\x05\x1c\x54\x2d\x32\x42\x51\x89\xbd\xe3\x73\x17\x90\x69\xd9\x30\x8e\x69\x39\x63\x07\x33\xe3\xac\x9c\xcd\x2e\x2f\x2f\xaf\xae\xae\x3e\x7d\xfa\xf4\xf9\xf3\xe7\x19\x95\x72\xd1\xb9\x4f\xf2\x75\xf2\x1f\x5f\xba\xbb\x15\x06\x9c\xa2\x0f\xbd\x5c\xb7\xe0\xbc\xde\x56\xe3\x2b\x8f\x1b\xb8\x0c\x08\xc2\x29\x68\xdc\x31\x9d\x09\x52\xc5\xc6\xa4\x73\xd1\x8f\xca\x70\xf5\xbe\x1e\x38\x9f\xd9\x52\x02\xcb\x32\x6e\x1b\xc6\xf9\xaf\x5b\x29\xef\x1d\xb1\xad\xda\xe3\xb4\x43\xa7\x11\x0b\xd3\xd9\x32\x11\x8c\x6f\x03\x77\x71\x70\x49\xfc\xf1\xc9\xb1\x2d\x9d\x57\xed\xa5\xf7\x9b\xed\xf0\x6d\xfe\xf4\xb0\x59\xdc\xbe\x2c\x56\xdf\x5e\x48\x64\x5e\xe6\xeb\xd5\x50\x96\xfb\x2b\x72\x70\x34\x7a\x78\xb3\x11\x71\x7d\xeb\xee\xe6\xe6\xf1\x69\xb5\x19\xac\x9d\x8d\x5f\x32\xaa\x96\x16\x96\xb7\x83\xca\xb7\xc7\x3e\xc2\x7c\xbd\xfa\x88\x77\xfa\x75\x32\xf4\xfb\xe6\xbc\xfd\x47\xde\xa3\xf9\xe6\x6e\xe8\xbd\x62\xb6\xf8\xb0\xf7\x86\xec\x7f\x28\x0d\xf8\x8b\x95\x95\x43\xe0\x23\x43\xf3\x51\xd2\x9f\xce\x54\x3b\x4d\xa4\xa9\x0d\x17\x73\x45\xaa\x44\xc4\xee\x49\xb2\x45\xaf\x98\xf6\x34\x99\x31\x16\x5c\x7f\x38\x91\x77\x40\xbf\x1e\xda\xbd\xfd\x90\xf0\xbb\x7e\xc7\x11\x21\x70\x7d\xd1\x57\x1a\xdf\xc1\x97\xa7\x25\x44\xcc\x98\x83\xd2\x19\x44\x5a\x95\x95\x35\xae\x96\x2f\x4f\xcb\xe4\x7c\xcb\xe8\x7e\xa8\xda\xf7\x95\x7f\xdf\x2e\x49\x77\x5c\x6c\x8f\x54\xbf\x1b\xf8\x7e\xb7\xb5\x91\xe7\xf1\x7d\x34\x8f\x63\x42\xbd\x6d\x9a\xfb\x61\x74\x7a\xb5\x4e\x2e\xcf\x68\x05\xd2\xaa\x28\x95\xc6\xf6\x57\x51\x18\xfc\x1d\x00\x00\xff\xff\x50\x74\x1c\xf4\x47\x0f\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x61\x6f\xe3\x36\x12\xfd\x1c\xfe\x8a\xb9\x1c\x70\x1b\x03\x89\x92\x05\xee\xf6\xb0\x7b\xc0\x01\xde\xc4\xed\xba\xdd\xc4\x82\x95\x6c\x5b\x54\x8b\x05\x2d\x8d\x64\x62\x29\x52\xe5\x50\x76\xfc\xef\x8b\x21\x25\xc5\x71\x1c\x14\x68\x80\x00\x16\x39\xf3\xde\x9b\xe1\x70\x86\xc9\xfd\x27\xd8\xc8\x4e\x7b\x2c\xe1\xad\x48\xb2\x4f\x70\x37\xbd\x9d\x89\x24\x4d\xc5\xb0\x9c\x5f\x00\xb5\x72\x6b\x80\x90\x48\x59\x43\x50\x39\xdb\x00\x61\xd1\x39\xd4\x3b\x20\x6f\x1d\x96\xfc\xed\xd0\x53\xc0\xc8\x7e\xbb\x5b\xa4\xd9\x3c\x0b\x38\x79\xf5\x31\xaf\xae\x7b\xb4\xbc\x5a\x42\x5c\xc8\x2f\x4c\xfc\x98\x1b\xd9\x60\x5e\xa5\xf0\xfb\xb0\xa1\xf2\x6a\xf9\x55\x24\x2b\xf7\x37\x7c\xf3\x0b\x76\xe6\xad\xeb\xdb\x9b\xbc\x4a\x5f\x93\x30\xbf\x5e\xdc\xde\x4e\xef\x6e\x7a\xe7\xb9\x74\x35\x25\x49\x92\x57\xe9\xd7\x10\xc2\xcd\x2c\xbb\x5e\xce\xd3\xfb\xf9\xe2\x2e\x40\xcc\x2b\x30\xf6\xc0\x4f\x11\xb4\xce\x6e\x54\x89\xe5\x39\xbc\xe0\x40\xe5\xd7\xe8\x62\xee\xe8\x49\x10\x9c\xa9\x6a\x74\x9b\x80\x75\xa2\xb7\x90\x06\x94\xf1\xe8\x64\xe1\xd5\x06\x81\xd6\xa8\x75\xb2\x27\xbf\x8f\x0d\x1a\xb9\x83\x15\x42\x47\x58\x82\xb7\x50\xaa\xaa\x42\x87\xc6\x2b\xe9\x11\xfc\x1a\xf7\xa8\xc2\x41\x1d\x0a\xcb\xff\xf5\x86\xc0\x6e\x0d\x48\x57\x77\x0d\x1a\x4f\x49\x88\xb8\x0f\x2c\x13\xc9\xfd\x40\x29\xcb\x10\xc9\x65\x8f\x51\x38\x94\x1e\xf7\x57\x0c\x6e\xf3\x6a\x29\xe6\x4f\xba\xf5\x0e\xa2\x19\x05\x2d\x85\x35\x1e\x8d\x07\x5b\x81\x04\x83\xdb\x58\x6c\x09\x64\x88\x20\x92\x8f\xcb\xa1\xf8\x2e\x64\x59\xc2\xd9\xdb\x49\xb2\xc7\x5e\xb4\xcf\xc8\x6d\xbb\x63\xae\x6b\xdb\xaa\x63\xe0\x01\x08\xa4\x29\x81\xe4\x06\x09\x94\x07\x49\xfb\xa4\xb0\x55\x7e\xdd\x2f\xb4\x92\x68\x6b\x5d\x79\x44\x48\xd1\x1e\xea\x28\xbb\x86\x95\x88\x5f\x9c\x3a\x1a\x56\x44\xf7\x16\xc8\x97\xb6\x0b\xb4\x3f\x65\x8b\xbb\x23\xd8\x8c\x74\x88\x8e\xa5\xf2\x2f\x73\xc8\xab\x2f\xa9\x0c\xe0\xa3\x22\xaf\x4c\xfd\x6a\x1e\xd9\xf1\x05\x85\xd9\x30\xc3\xa2\xf3\x6d\xe7\x29\x56\x16\x14\xb6\x69\xa4\x29\x99\x44\x7a\xd0\x56\x8e\x57\x18\x2a\xeb\xc6\xb0\x94\xf1\x36\xe8\x88\xf5\x78\x84\xd0\x6c\x0e\xf9\x18\x8c\x09\x1f\x08\x63\x2a\xc6\x7a\xef\xb3\xa4\x0c\xff\x88\x75\x02\xd6\x81\xc3\x56\xcb\x02\x5f\x49\xed\x11\xd2\x20\xf7\x90\x95\xf6\xcb\x45\x2b\x0a\x69\xfd\xac\xc8\x13\x48\xad\xa3\x2f\x1d\x03\xa3\x43\x28\xd7\xec\x43\x95\xa8\xf1\x79\xd9\x3b\x6c\xec\x86\x57\xc4\x32\xfc\xa2\x83\x73\x39\xc6\xe2\x9a\x43\x96\x90\x51\x06\xc9\xbc\x74\xfe\x78\x03\x88\x45\x1b\xf2\xbf\x77\x38\xfc\x1d\x8f\x87\x13\x81\xe5\x5f\x9f\x52\x04\x3b\x10\xd0\xb5\xb5\x93\x65\x88\xe3\x21\xfe\x24\xd0\x58\xcb\x62\xd7\x87\x01\x3d\x6a\xd1\x39\xee\x30\x3d\x67\x65\x5d\x23\x8f\x9d\x4a\x8f\xd7\xd3\x64\x9f\x60\xf6\xeb\xfc\x1e\xae\x17\x37\x33\x6e\x2a\x99\x90\x5a\xaf\xec\xe3\xff\x44\xb1\x82\x62\x25\x0a\xd0\x2f\xfe\x13\x31\x7b\x54\x1e\x0a\x5b\xe2\xc9\x2d\x4a\xa3\x4c\x2d\xae\x4e\xb2\xae\x28\x90\x28\x11\xef\xfe\x7d\x32\x37\x1b\xa9\x55\x09\xd7\x9f\xe7\xd0\x91\xac\x11\xce\x08\x11\x1a\xa4\xf0\xc1\xd9\x69\xac\x43\x28\xd1\x4b\xa5\x69\x92\x88\x77\xff\x39\xb9\x5f\xa3\x43\xd8\xca\x90\xe3\xce\x38\x2c\xec\x06\x9d\x5c\x69\xe4\xca\x5c\x69\x6c\x9e\xf2\xdc\xc7\xa8\x34\x26\xe2\xdd\xfb\x93\x29\x38\xfc\xa3\x53\x71\xc2\xb9\x8d\x2a\x30\xb6\x7d\x24\x34\x5e\xef\xa0\x33\x72\x23\x95\x0e\x58\x67\x98\xd4\x09\x48\xfa\xce\xed\x65\x92\x88\xff\xbe\x1f\xe5\x0e\x0d\x07\xa8\x6b\x5b\xad\xb0\xe4\x73\x98\x85\x24\xfd\xf8\x30\x87\x74\xd8\x4e\x9d\x6d\x5a\x9e\xa2\x69\x2a\xa6\xda\xaf\x6d\x57\xaf\xe1\x4b\x3f\x89\xbd\x0b\x9d\xcf\x42\x23\xbf\x23\x50\xe7\x10\x76\xb6\x83\x42\x1a\x70\x58\x2a\x87\x85\xef\x0b\x34\xdc\x31\xae\x58\xee\x87\x95\x53\x68\x4a\x3a\x17\x64\x1b\xf4\xaa\x89\xcd\x51\x11\x90\x57\x5a\x73\x2c\x55\x9f\x0c\x6f\x79\xac\x80\x64\x4d\xf9\xc5\x4a\xf2\x88\x19\x95\xb7\x41\x5a\x02\x3f\x84\x02\x54\x24\x1c\x4a\xb2\xe6\x7c\x94\xc7\x3a\x56\xe1\x02\x57\xaa\xee\x5c\xbc\xed\x01\xcf\x0c\x49\x01\xd5\xb4\x1a\x79\xe8\x48\xaf\xac\x49\x06\xdf\x37\x24\x46\x0b\xe3\xb1\x76\x61\x9b\x35\x7a\xa7\xea\x1a\x19\x6c\xbb\x46\xd3\xcf\x37\x0e\xf1\xcb\xf4\xe1\xf3\xfd\xec\xe6\xdb\x34\xfb\x39\x9d\x66\x19\x07\xbb\x91\x4e\x85\x38\x38\x36\xf4\x71\x78\xa6\x56\x99\x70\x33\x5f\x75\xf3\x36\x76\x56\x2c\x3a\x1f\xdc\xf9\xf0\x63\x5b\x1c\xe5\xd2\x18\xc1\x56\x69\x2d\x0a\xc9\x71\x8d\xe7\x12\xc3\x8c\x08\xb1\x8b\x05\x08\x6a\xb1\x50\x95\x8a\x16\x31\x7d\x61\xb3\x23\x74\x5c\xa9\x62\xc8\x2d\x25\x70\x1f\x9c\x1c\x79\x68\xa5\x93\x0d\x7a\x74\xcf\xba\x26\xfb\xed\x49\x8c\x4f\x8f\x00\x88\x8f\x5e\x70\xd2\x4c\x6f\xb9\xe2\x2e\xc0\xf3\xbd\xf7\x62\xb6\x88\x7f\xfc\x10\xd8\xc8\xc0\x76\x1c\x6e\xa3\x2a\x06\x18\xcb\xc9\x76\x7e\xa8\x27\x87\xbe\x73\xfc\x60\x01\x8a\x17\x33\xdc\x57\x38\xbb\x9a\x24\x30\xe7\xae\x5d\x49\xa5\xb9\x38\xe3\xb2\xb1\x26\xbf\xb8\x9a\x08\x45\xbd\x27\xbf\x96\x58\xd8\xc8\xa3\x4c\xdb\x85\x82\x94\x2b\xeb\x7c\xb8\x1b\x69\x2a\x86\xec\xaa\x58\x13\x43\x78\x43\x7d\x70\x47\x94\x8d\x46\x22\xbd\x8b\xb7\x77\xec\xc1\x7d\x9c\xe2\x79\x9c\xd4\xdf\xcf\x3e\x24\x5a\xe7\x17\xbd\x61\x5e\x2d\x27\x91\x73\x61\xa0\x91\xc5\x22\x3b\xe7\xe0\x82\x3b\x4c\xdb\x56\x63\x56\x38\xd5\xfa\xd7\x12\xd8\x17\x3e\xbf\xc8\x3e\x04\x98\x64\x99\x89\xc4\x54\xe2\x9f\xff\xb8\xec\xc8\x5d\xae\x94\xb9\xe4\x31\x69\x49\x52\x00\x12\xc2\x1a\x70\x5d\x78\x82\x6d\x04\x00\x80\xaa\x40\xa3\xa9\xfd\x3a\xcc\x3d\x57\x6f\xe0\xff\x70\x15\x4e\x26\x6c\xf3\x1f\xa1\x1f\xdb\x1c\xe7\xc1\x63\x03\x6f\x07\xf3\x60\x85\x9a\xf0\x35\xf3\xd3\xa1\xc5\x7c\x38\x8d\xb6\xa6\x04\x55\x09\x31\x98\x56\xce\x1a\xdf\x58\xf2\xdf\x24\x37\xa8\xa2\x2f\x0d\x0b\xfc\xc2\x66\x96\x33\x65\x2a\x1b\xfa\xeb\x59\x2b\xb9\x57\xda\x27\x1f\xd8\xf3\x99\x4c\x02\xa6\xe7\x79\xb3\x0f\x75\x94\x60\x54\x5b\x2a\x6a\xb5\xdc\x41\xa9\xa4\xb6\xf5\x28\x3c\x76\x65\xe5\x35\xc2\x69\x5f\x0f\xa7\x71\x51\x15\x21\xf1\x5d\xc0\x0e\x2b\x6b\x55\x96\x68\x40\x1a\xda\xa2\x83\x12\xab\xfe\x41\x18\x3e\x4f\x4f\xc5\xc8\xc5\x37\x66\x2c\x45\x0e\xcd\x21\x75\xda\x8f\x69\x61\xe9\x82\x7f\xb8\xce\x88\xa4\x52\x22\x59\xce\xc4\x9f\x01\x00\x00\xff\xff\xf1\x15\x18\xa4\x29\x0d\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
