// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8e\x31\x4e\x03\x31\x10\x45\xfb\x3d\xc5\x3f\x00\xb1\xc4\x11\x20\x44\x8a\x0b\x36\x56\x1c\x0a\x24\x37\xa3\xf5\x18\x2c\x25\xe3\xb0\x9e\x38\xe2\xf6\x68\x4d\x40\x54\xd4\xff\xbd\x37\x63\x0e\x5b\x34\xba\x1c\x95\x63\x58\x51\x8c\xb8\x1f\x8c\xdf\x62\x7c\x78\xde\x0c\xc6\xb9\xe1\xb6\x61\x99\xc2\x0a\x59\x94\x67\x9a\x34\x37\x3e\x7e\x62\x9a\x99\x94\x2b\xf4\x9d\x31\x15\x51\x16\x45\x49\x20\x08\x5f\xbf\xab\x3d\xe6\x5f\xc7\x9d\xf3\xd6\xf7\x60\x48\x8f\x21\xad\xff\x64\x43\xda\x23\x24\x2b\x74\xe2\x90\x5c\x17\x9e\x36\x7e\xbd\xb7\xee\x60\x77\x63\x77\xfc\x99\xae\x52\x41\xf2\x7b\xbf\x31\x4e\x25\x32\x52\x99\xc1\x31\x6b\x96\xb7\x7f\xbe\x30\xbd\xf2\x72\x2e\x82\x8f\x4b\xd6\x85\xbe\xeb\xf8\x42\xfc\x28\xb9\xa2\x52\xe3\x08\x2d\x7d\xbb\x99\x5f\x01\x00\x00\xff\xff\x34\xb1\x7b\x0e\x21\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x59\xbd\x55\x62\x78\x9f\x90\x26\x86\x18\x5a\x47\x44\x69\x43\x41\x50\xc6\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\xc4\xb4\xd0\x2e\xda\x9d\xb1\x2e\xf7\x9c\xb9\xf9\x61\x0b\x23\x9e\x7b\x4f\xad\x58\x36\x03\xfc\xcf\x72\xbe\x85\x6a\xf5\x54\x64\x39\x63\x59\x7a\x82\x66\x00\xb1\x84\xc6\x0c\x8a\x1c\xf8\x8e\xa0\x31\xda\x93\xf6\x60\x24\xe0\xb5\x00\x50\xb7\xe0\x70\x24\x07\xca\x03\x3a\x40\xd0\x34\xa5\xb7\x49\xf9\x2e\xfd\x18\xd0\xb9\xc9\xd8\x36\x82\xf8\x6b\xb5\x63\xbc\xe4\x11\x26\xe4\x83\x90\xeb\x19\x29\xe4\x1e\x84\x2c\x4d\xdf\x0a\xc9\xc2\x97\xa6\x49\x48\x96\xe5\xb5\xfd\x9a\x35\xc3\xe5\xdb\x34\xdf\xc2\xa6\xe0\xeb\x7d\xc9\x0e\xe5\xae\x8a\xa4\x75\xb2\x57\x3a\x1e\x73\x0f\x27\x5b\xe5\xa0\xb1\x84\xa1\xd9\x58\xb0\x34\xf4\xd8\x50\x0b\xf5\xe5\x7e\xb6\xb4\xe6\x34\xd3\xc4\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xd5\xf3\xe3\xa1\xd8\xbc\xb1\x15\xe7\xc7\xdd\x7e\x13\xfc\x48\x8f\xca\x1a\x7d\x0a\x15\x23\x5a\x85\x75\x4f\x81\xe6\xc8\x2f\xc2\x6a\x93\xea\x7b\xa8\x09\xce\x8e\xda\x30\xa1\xef\x28\xbb\xed\x05\xd2\xd8\x19\xb9\x00\xe3\x3b\xb2\x93\x72\x14\x99\xf7\xd4\xad\xc2\xd2\xfb\x99\x5c\x38\x61\x54\x18\x23\xde\x5f\x7e\xd0\xac\x8a\xe3\x5f\x54\xb3\x4f\x12\x49\xf5\x3a\xea\x6f\x55\x3f\x02\x00\x00\xff\xff\xce\x4b\xec\x94\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xa7\xe6\x02\xf8\x54\xa4\xff\xc0\x8d\xef\x70\x42\xe0\x8b\x61\xb9\x08\x02\xe8\x65\x2d\xae\x2c\x36\xfc\x70\xf9\x61\xc5\xff\xbe\xd8\xb5\xe5\x93\xaf\x05\xf2\x4a\x72\x67\x67\x66\x87\x5b\xed\x5e\xe0\x84\xc5\x66\xd2\xed\x23\x69\x93\xe1\x93\xaa\x9a\x17\x78\x5d\xae\x9f\x54\xb5\xd9\xa8\xeb\x25\xc8\x5d\xfb\x08\xc6\x67\x8a\xd8\x65\x73\x22\x7b\x96\xd3\x04\x79\x20\xe8\x82\xcf\xe4\x33\x84\x1e\xd0\x03\xfd\x34\x29\x1b\x7f\xb8\x60\x0b\x62\xf3\xfd\xf5\xeb\xa6\xa9\x1b\x41\x6d\xfb\x3f\xdb\xfe\xf3\x1c\xbb\xed\xb7\xd0\xf6\xb5\x47\x47\x6d\xbf\x91\x8a\xd5\x53\xf3\x79\x5b\x6f\x76\xf5\xd7\x57\x29\x6a\x8e\x38\xfa\xc4\xf0\x13\x89\x13\x81\x0b\x9a\xa0\x0f\x51\x40\xb8\xe3\xaf\xc8\x54\x82\xf5\xd7\x31\x78\xf8\xa7\x98\xcc\x17\x0b\x29\xf2\x34\xde\x0a\x4d\x82\x84\x27\xd2\x90\x83\xdc\x4d\x95\xcd\x0b\x2c\xbf\x35\xf0\xe5\xe9\xbb\xaa\xb6\x8d\xaa\xea\x0d\xb4\x0f\xfb\x02\x7f\xa8\x1f\x6c\xce\x17\x3a\xab\x6a\x1f\xd5\x1a\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\x7a\x05\xe8\x35\x34\xd4\x45\xca\xf3\x8b\x2e\x92\x26\x9f\x0d\xda\x54\xcd\x01\x1d\x03\xae\x9f\x97\x77\x80\xeb\xe7\x25\x3c\xb8\x62\xb3\x69\x1f\x7b\xec\x72\x88\x80\x25\x0f\x5c\xdf\x61\x36\xc1\x7f\x84\xe5\xf6\x15\x42\x84\x44\xd1\xa0\x05\x5f\xdc\x9e\x62\x05\x75\x0f\xe4\x71\x6f\x49\x2f\x54\x49\x14\x61\x34\xd6\xc2\x9e\xe0\x18\x83\x3b\xe6\x8b\x52\x62\x5b\xa5\x47\xc7\xae\x8e\x03\x79\x40\x61\xfa\xe6\x9e\x5c\x73\xb1\x8a\xe4\xd0\xf0\x03\xce\x82\x8c\xe0\xe6\x14\xe8\x12\x85\x4e\x25\xec\xeb\x1e\xce\xa1\x00\x46\x82\x22\x50\xcd\xae\x99\xeb\x5e\xc0\x38\x98\x6e\x80\xd0\x75\x25\x26\xd8\x9f\x41\x53\x2f\x38\x0f\x89\x48\x60\x3f\xe4\x0f\x2a\x1c\x19\x12\xf6\x64\xc3\x28\xfd\x34\x65\x34\x36\x7d\x5c\x08\xbc\x2b\x29\xc3\x80\x27\x12\x8a\x57\xb5\x2c\xcb\xf8\x53\xf8\x41\x80\xfe\x0c\xf5\x72\x0d\x1d\xda\x77\x56\x47\xb6\x7a\x1b\x2c\x09\x5b\x31\xb0\x87\x18\x2c\x71\xf5\x9e\x00\x53\x2a\x8e\xf4\xff\x1b\xa2\xbe\xc9\x29\x3f\xe1\x43\x94\xc2\x4b\xa2\x1c\xfe\x34\xae\xb8\x9b\x1b\x80\xd6\x86\x91\x34\x2b\xe4\x18\x99\x04\x9f\x60\x08\xe5\x32\x9f\x73\x28\x51\xdd\x9e\x9a\x04\x87\x48\xc8\x03\xc9\x03\xfa\xeb\xc3\x0b\x85\x44\x12\xdb\xbb\x5e\xb7\xc2\xeb\x60\x15\xea\xbf\x4b\xba\x0e\xf6\xda\x65\xae\x59\x3e\x73\x53\xf6\x29\x9b\x5c\x32\xc1\x68\xf2\x00\x99\xdc\x31\x44\x8c\x77\xa9\x14\x53\x76\xe1\x70\xb0\x94\xb8\x7f\x1e\x28\x0a\x59\xd1\x30\x7b\x28\x03\x4e\x37\x48\x7d\xc1\x44\xa6\xcb\x86\xde\xc0\xd5\x3c\xf2\xf0\x1c\x22\xb8\x10\x69\x9a\x26\x04\x0f\x79\x30\x89\x93\xc9\x4e\x2f\x60\xca\x80\x0e\x5d\x71\xe4\xf3\x45\x67\x1f\xe2\xbb\x35\x92\x06\xb2\xb6\xed\xb7\xed\x6f\x77\x4a\x1b\x51\x3a\x84\xf1\xf7\x17\xa3\xe9\xf6\x47\xdf\x2b\xfa\xef\xcf\xac\x57\x3c\x05\x6d\xd2\xd1\xe2\x79\x1a\xff\xc9\xd0\xf8\xb6\xd8\x26\xce\xc6\x0b\x43\x59\x92\x8e\x7c\xa9\x60\xc7\x12\xa6\x41\x05\x6f\xcf\x80\x7d\x4f\xdd\xb4\x2d\x4b\x8c\xbc\x67\xae\x4b\x4b\x25\x8e\x14\x07\xc4\x6b\xee\x19\x89\x3d\xcb\x01\x06\xa3\x35\x79\x20\xec\x06\xc8\xc6\xd1\xec\x8b\xc9\xb3\x70\x24\x4f\x7a\xbe\xff\xee\xa4\xaf\x58\xfa\x8a\x2c\xe5\x4b\xb4\xb7\xe4\xc2\x89\x12\xe7\x50\x86\x37\xd1\x4f\x39\x44\xd2\x93\x8a\x69\xd9\x6d\x9f\xd4\xbf\x01\x00\x00\xff\xff\x41\xf4\xd7\x5c\x1f\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x6f\x6f\xdb\x38\xf2\x7e\x1d\x7e\x8a\x79\xb7\x29\xe0\xa8\x48\x77\x5f\xe5\xf7\xeb\x01\xbe\xd4\x7b\xf1\xb5\xeb\x18\x96\xd3\xa2\xa8\x17\x01\x25\x8d\x2c\x6e\x28\x52\xcb\x3f\x76\x8d\xa2\xdf\xfd\x30\x24\x25\xcb\xa9\x5b\x14\x38\x1c\x50\xb4\x85\xa4\x79\x66\x38\xf3\xcc\x33\x43\x67\xeb\x3b\xd8\x71\x2f\x1d\x56\x9b\x2b\x54\x3b\xb8\x66\x59\x7e\x07\x8b\xe9\x1f\x33\x96\x2d\x97\x2c\xbd\x03\x7a\xb5\xb9\x02\xed\x5d\xe7\x9d\x05\xdb\xa0\x94\x50\xea\xb6\xe5\xaa\xb2\xe0\x1a\xee\x40\x6a\x5e\x81\xc5\xd2\xa0\xb3\x50\x6b\x03\x3c\x22\x83\x50\x4e\x83\x6b\x30\x5a\x05\xfc\xfc\xe3\xe2\x7e\x99\xcf\xf3\xe0\x63\x53\xff\x73\x53\xdf\x8e\x3c\x6d\xea\x15\x6c\xea\xb9\xe2\x2d\x6e\xea\x25\x7c\xda\xd4\xf3\xfb\xe5\x7a\x7e\xbf\xc8\x37\xf5\xf2\x4f\x96\x15\xe6\x5b\x1b\xd8\x5c\x6d\xae\xb8\xb5\x9e\x6c\x82\x39\x37\xea\xac\x75\x7e\x07\x6f\x66\xf9\xed\x6a\x1e\x1e\x86\x08\x6e\x0d\x72\x87\x16\xb8\x22\x28\x61\xb4\x6a\x51\x39\xf0\x56\xa8\x2d\xec\xb8\x11\xbc\x90\xe1\x75\x15\xce\x31\xfd\x90\xc3\x13\x1e\xc0\x3a\x6d\xb0\x02\xa1\xc2\xd3\x10\x4c\x06\xeb\x06\x99\x41\xeb\xa5\x23\xe3\x31\xdc\x08\xc8\x20\x78\x8b\x15\x38\x0d\x5b\x54\x68\xb8\xc3\xb3\x39\xdd\x0b\x29\x59\x48\x6c\xc8\x5f\x4a\x6e\x48\x28\x8f\x06\x59\x38\xc0\xba\xcf\x2e\x08\x0b\xdc\x3b\x5d\xa1\xc3\x92\x52\x53\x1b\xdd\x06\xe3\x98\xb1\xfc\x6e\xf6\xee\x1d\x25\xe8\x5c\x60\x13\x10\xf5\xa8\x50\xc2\x82\x57\x4f\x4a\xef\x15\x68\x03\x5e\xd9\x0e\x4b\x51\x0b\xac\x26\x09\xcc\x36\x84\x54\xea\xb6\xe3\x4e\x14\x12\x8f\xc1\xd3\x01\xb1\x15\xce\x61\x95\xa5\x1a\xcf\x17\xda\xe1\x0d\x55\x24\xcf\xef\x28\x7d\xf1\x2b\xb1\x55\x21\x89\xfb\x06\x55\x9f\x8b\x67\x89\xa3\x5c\x08\x0b\x7b\x7e\xa0\xec\x0a\x4b\x67\xac\x3c\xb2\xc4\x2a\xa1\x78\x21\xa4\x70\x07\xca\xa6\x33\xbc\x7c\x0a\x8f\xa5\xa8\xd1\x89\x16\x41\xc7\x33\x8d\x00\x27\xb0\x6f\x44\xd9\x40\x8b\x5c\xd9\xf0\x32\xcf\xef\x18\xdf\x52\x2e\xf6\xda\xcb\x0a\xf0\xb3\xb0\x44\xdc\x0a\x6b\xa1\x84\x43\x79\xc8\x02\x71\x12\x91\x58\xb6\xee\x69\xfb\x1d\xda\xb1\x3c\x25\x2b\xe2\xd7\x5e\x4a\x98\xae\x16\x7d\x30\x46\x4b\xa4\x70\xa3\x65\x06\x39\x86\x02\x4d\xf3\xfc\xe1\x8f\xf9\xe2\x5f\x30\x85\xd5\xfd\xbb\x19\x25\xab\x40\xa9\xf7\x8c\xda\xa9\x42\xc7\x85\xb4\xa0\x15\x34\x7a\x0f\xef\x13\xf7\x23\x84\x0d\x90\x36\x63\xd9\x7c\xc9\x56\x84\x1e\x9e\x77\x4e\x68\x05\x2d\x3f\x40\x81\xd0\xa1\xa9\xb5\x69\x29\xd9\xc2\x35\xda\x3b\x88\x15\x3d\x50\xbe\xfb\x66\x75\x1a\x6c\xc7\xf7\x2a\x10\x27\x63\x1f\xa8\x2c\x42\xed\xf4\x13\xb1\x35\x95\x61\x02\xa5\xc1\x0a\x95\x13\x5c\xc6\x2a\x5a\xed\x4d\xd9\xb3\xad\xc2\x3a\x40\x49\x5d\x72\xf2\x6f\xe1\x12\xb3\x6d\xc6\x4e\x2a\x50\x6a\x55\x8b\xad\x37\xe1\x0b\xa8\x85\x44\x3b\x01\xa1\xac\xe3\xaa\x44\xe8\x8c\xa6\x47\x13\x40\x57\x66\x2f\xb2\x67\xf9\xa6\x53\x70\x47\xf9\xfe\xff\xc0\xd4\x49\x2d\x6c\x33\xb1\xcd\xe4\x2f\xab\xd5\x64\x53\xcf\x4b\x6f\x9d\x6e\x37\xf5\xf2\x1f\xa9\x0e\x07\xd8\x53\x3b\x45\x43\x3a\xa3\xb7\x38\xe9\x03\xb5\xf4\xa0\x67\x34\x4a\x49\xc0\x91\x20\xd4\x7e\xa3\x76\x8a\x4f\x59\x6c\xb4\x23\x16\x11\x3d\x26\x3e\x82\x50\x34\x9b\x7a\x35\x09\x7a\x31\xee\x94\x00\x47\x5f\x27\x1d\x05\xeb\x85\xa3\xc6\x0b\x72\x89\x3b\x2e\x7d\x4c\xc7\x51\x31\xfb\x96\x8b\x4e\xb3\x04\x47\xe7\x3c\x05\xa4\x8f\x5b\xde\x11\xbf\x08\x06\xc3\x99\x0a\x92\x0c\xa2\x31\xf0\x3e\x5c\x6f\xb1\xf6\x12\x84\x62\xda\x35\x68\x28\xd1\x5b\xc3\xdb\xf6\x79\xcb\x4d\x52\xb1\xc9\x81\xd2\x84\x51\x4a\x5f\x61\xf0\xc3\x8d\xe1\x87\xe8\x29\x09\x1a\x8b\xce\x0c\xb6\x7a\x17\x3a\x7e\xbe\x64\xf3\xc8\xf4\xe4\xd7\x3a\x43\x2e\xac\xef\x3a\x29\xb0\x82\x4a\xa3\x0d\xc0\x2d\x77\x65\x03\x5a\x0d\x7d\xda\x19\xdc\x5c\x85\xbe\x23\x3e\x05\x6b\xcb\x44\x94\x42\x72\x22\x94\x43\xd3\x19\x8c\xdc\x07\x0e\x0e\x3f\x3b\x70\xd8\x76\x92\x54\x34\x6a\xf6\x56\x4b\xae\xb6\xbf\x58\x28\xbc\x90\x6e\x73\x25\x54\xaa\x0d\x7d\xfc\xb2\xff\x98\x52\xd8\xf1\xf2\x89\x6f\x31\xe8\x36\x65\xc7\x1c\xa1\x7a\x8f\x43\xd0\x9c\x8e\xe1\x89\x07\xc2\x35\x14\x2c\xab\x05\xca\xca\x52\x39\x65\x88\x37\x74\x6b\x06\x53\x69\x35\xf0\x1d\x17\x32\x54\x97\x3a\x84\xa7\xd2\x19\xec\x24\x2f\x83\xeb\xda\xab\x32\xb2\x5f\x1b\xd8\x5a\x5f\x80\x14\x4f\xc8\x0a\x6c\xf8\x4e\xd0\xfc\x54\xd5\x60\xd6\x57\x7c\xb0\x89\x04\xe5\x65\x89\x9d\xb3\xa1\x7b\xa5\xc7\x60\x42\x7c\xa0\x27\x94\x23\x77\x60\x9d\xa1\x8c\x55\xf0\xef\xfc\x7e\x91\xca\x10\x0b\xb4\xd6\x60\xb0\x44\xb1\x43\xf8\xcb\xdb\x48\x21\x1a\xb9\xb6\xaf\xc4\x71\x5e\x39\x9d\x6a\x9b\x0a\x92\x72\x1f\x20\x29\x0d\xb1\xdf\x46\x99\x0b\x22\x5a\xe0\x4d\x8a\xfe\xcb\x17\xa0\x03\x40\xf6\xa0\x88\x90\x5f\xbf\x6e\xea\x15\xcb\xd6\x39\xe3\x52\x16\xfa\xf3\xff\xb1\xb2\x80\xf0\x87\x49\x90\x20\x4f\xfe\xce\xd8\xef\x94\x64\x58\xf0\x16\x2f\xd6\x87\x0e\x2f\x68\x90\x58\x96\xa3\xbb\x68\x79\xf7\x29\x1e\xe9\xcf\xf8\xcf\xc5\xb4\xef\x82\xf3\x83\xf7\xd8\x14\x5c\x6a\xb5\x1d\x0a\x29\x4c\x6a\x1b\x16\x22\xbc\xf8\x74\xc4\xb3\x52\x94\x78\xc2\x76\x38\x61\xfb\x71\xc2\x8e\x5d\x16\x58\x6b\x13\x3c\x85\x69\xa6\x70\xdf\x3b\xb8\x8d\x33\xf2\x22\x39\x58\xf7\xd3\x21\xcd\x4e\x20\x22\x0d\xcb\x41\x54\xde\x7e\x43\x4b\x5d\x48\x80\x3a\x28\xbb\x65\xd9\x7a\x16\x06\x13\xad\x24\x6f\x67\x1f\xc3\xac\xed\x27\x83\xb7\x68\x49\xf4\x5b\xae\x28\xa4\xb1\x66\x9f\xd9\x5c\x4e\x76\x11\xaa\xa4\x36\xdc\x1c\xd8\xd8\x2a\xf6\x16\xb9\xca\xd7\x79\xec\x98\xe3\xa6\xf3\x7c\x24\xf4\x02\x1f\x0f\x22\xb9\x0d\xf2\xcb\xc8\x5f\xd5\xcb\xfe\x40\x34\xf2\x6f\xd1\x5a\x7a\x78\x39\xb2\xdc\x89\xbe\x01\x86\x55\xaf\x12\xa4\xfc\x2f\xd2\xde\xd3\xc7\x79\xe2\xbe\x25\x3a\x17\x29\x8b\x82\xb6\x97\x8a\xfa\xba\x1f\xb7\xc0\xc3\xb0\xfc\x76\x31\x29\xb0\xe4\xde\xe2\x30\x5a\xc7\xf3\xc1\xfa\xc2\x3a\xe1\x7c\x38\xeb\xf9\xa4\x12\x99\x98\x3b\x17\xd1\x24\x1c\x73\xfc\xed\x41\x7b\xd2\xde\x9d\xa8\xc2\x1e\xd0\x7b\xa4\x49\x3d\xa8\x22\x73\x8d\xb6\x18\xe5\x3b\xcc\xe4\xb8\xe9\xf6\x1c\xcb\xbe\x2d\x36\x95\x86\x26\x68\xc5\x4d\xf5\x9d\x0e\x20\xad\x19\x05\x72\xc3\xb2\x55\x4e\x72\x00\x9b\xcb\xc2\xc3\xab\x24\x93\xd3\x0f\xf9\xe3\xf4\xf6\x76\x96\xe7\x8f\x6f\x67\x1f\x1f\xe7\x6f\x42\xc3\x16\x86\x4d\x15\x88\x60\x5b\x0b\x34\x01\x2c\x4c\x84\xb2\x44\x6b\x69\xa9\xcb\xe0\x41\x89\xbf\x7d\x38\x14\xf2\xb2\x09\xbd\xa6\xeb\x51\xc6\x88\x03\xe7\x72\x94\x9d\x8f\x22\x9f\xdd\xae\x66\xeb\x51\x30\x7d\x24\xeb\x61\x21\x1e\xba\xc5\x8a\xad\x02\x83\x7f\x7b\xb4\xce\xfe\x0f\x22\xc9\xf3\xf9\xfd\xe2\x71\x7d\xff\x76\xb6\x20\x2d\x7e\x09\x27\x61\x3e\xac\xe6\xeb\x8f\xc3\xdb\x10\xe3\x32\x56\x38\x6d\xb7\xb1\x7d\xce\xbb\xfc\x11\x14\xed\xbb\x89\x2b\x15\x0b\x54\xec\x3a\x6d\x1c\x48\xdc\xf2\xf2\x00\xf9\x9b\xb7\x14\xf2\x2a\x09\xc1\xe9\x0a\x19\x38\x32\x7d\xb6\x6f\x42\xc9\x55\xd0\xc1\x7e\xbb\x00\x14\x61\x1b\x08\x54\x0b\x9d\xf6\x8b\x7d\xb6\xa1\x5d\xee\x04\x7f\x7e\xeb\x4a\xad\x48\xb7\x83\x23\x14\xb5\xec\xf1\xbe\x71\xba\x1e\x47\xd5\x3a\x25\x6e\x2d\x8c\x75\x83\xf2\xc4\x4b\x56\xc9\xcb\x86\xfe\x3b\x68\x42\x4f\xb4\xa8\x14\x97\x01\x71\xb4\xb5\xb2\xd1\x6d\x71\xcf\xed\x31\x9a\x17\x01\x2e\xf4\x86\x3b\x51\xab\x1e\xd8\xe9\x7e\x2d\x8e\x44\x8e\xf9\xa1\x74\xb1\x92\xd3\xc2\x15\x2e\x1c\x5c\x4a\xbd\xb7\xe9\x0e\x36\x18\x16\x18\x03\xad\xd2\x6d\x97\x26\x0a\x9a\xa3\xba\xb9\x86\xab\x11\x2a\x33\x9a\x64\x9e\x4b\x99\xf6\x4a\x02\x85\xcb\x96\x7f\x16\xad\x6f\x89\x9a\xd7\xd0\x68\x6f\x5e\x0c\x4e\xad\x1e\xae\x28\xdc\x9d\x8d\x2f\x50\x63\x58\xeb\x03\xcd\xc3\x9d\x87\x87\x89\x33\x56\x00\x61\x07\x0d\x19\x06\x56\x3a\x4b\xac\x47\xd8\xf4\x47\x89\x25\x1f\x93\xb4\x57\xc6\x08\x9f\xcb\xf6\x79\xed\x17\x16\xae\x19\x9d\x63\x02\x06\xb7\xdc\x54\x92\xa4\x21\x99\x0c\x10\x47\xbe\x8c\x67\xd0\x73\xd6\xc5\xc8\xe6\x0a\x78\x55\x09\x97\xd2\x7e\xba\x9a\x1c\x81\x78\xa1\x77\x38\x19\xa4\x34\x75\x8c\x1d\x6c\xb9\x64\xe7\x25\x31\x2c\x01\x42\xc5\xd5\x86\x9c\xf0\x82\x2e\x47\xfd\x3d\xed\x3b\x12\xf9\x7e\xfa\xf0\x6e\x3d\x7b\xf3\x38\x5b\xbc\x7f\xa4\x4e\x7b\x9c\xae\x16\x63\x6d\x3a\x7b\xe5\x8b\xf5\xab\xce\x28\xcc\xb7\x70\xb7\xb7\xf7\x0f\x8b\xf5\x48\x7b\xd7\x51\x69\xb5\x57\x0e\xe6\x6f\x46\x27\x2f\x0e\x47\x0f\xd3\xd5\xe2\x67\xd0\x17\xd3\x3f\x66\x63\x5c\xea\x9e\x93\x48\xff\x2b\xf4\xe5\x74\x7d\x37\x46\xef\xb8\x6b\x7e\x1a\x7d\x15\x45\xeb\x77\xba\x12\x7d\xe6\x6d\x17\x2a\xb0\x5c\xc6\x2a\xa8\x7a\xf8\x49\x2a\x5e\xc3\x8e\x02\x03\xdc\xa8\x1b\xbe\xb7\x37\x82\xb7\x37\x37\xd7\xd7\xd7\xaf\x5e\xbd\xfa\xf5\xd7\x5f\x7f\xfb\xed\xb7\x1b\x42\x7f\x99\xfb\x0e\x0d\x5d\x8d\x59\x56\x8b\xc1\x4d\x5c\x55\x23\x95\x7b\x2e\xd6\x9a\x5a\xf3\xf4\xb7\x9f\x02\x43\x5b\x0c\x3b\xbd\x50\xf0\xe5\x4b\x96\xa3\xfb\xfa\xf5\x34\xbc\x73\xbc\x78\xfd\xd3\xa1\xfd\x80\x06\xaf\xc7\x76\xdf\x7e\x48\x15\x7d\xfd\x03\x20\xaa\xc9\xeb\x97\xc3\xd9\xff\x13\x00\x00\xff\xff\xfc\x0b\x06\x39\xf9\x13\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0a\x83\x30\x10\x45\xf7\x39\xc5\x3f\x80\x06\x7a\x84\xd6\x0a\x0a\xad\x06\xc7\x4d\x21\x1b\x8b\x11\x02\x83\x29\xce\xd8\xf3\x17\xd2\x42\xc1\xed\xbc\xf7\xe6\xdb\xb1\xc1\x7b\xda\x59\xc3\xec\x4b\x16\x9c\x8c\xa5\x06\xdd\xf9\x5e\x1b\xeb\x9c\xf9\x21\xb0\xc0\x97\xe0\x28\x2a\x98\x98\xbf\x89\x64\x97\x1e\x5d\xef\xa8\xa5\xec\xfb\xe5\xe2\x97\xea\x5f\xf9\x65\x30\xf6\xb9\x1d\xef\x51\x34\x13\x6a\x70\xad\xa9\x1a\x5a\x37\xb6\x7d\x97\x3f\xdc\x0e\x1b\x05\xd2\x1a\xf0\x0a\x1b\x38\xae\xa1\x80\x26\x88\xce\x69\x57\x6b\x3e\x01\x00\x00\xff\xff\x32\x37\x94\xc4\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x65\xd5\x08\x7a\x84\x36\x0d\xc4\x8b\x26\xc2\xf6\xa6\x30\x1b\xd9\x1a\xd5\x02\x5b\x4a\xf5\x13\x9a\xdb\x17\x2b\x82\xb6\xbb\x81\x79\xdf\xfb\x66\xc4\x70\xc2\x4d\xe5\x25\xb1\xa6\x7d\x58\xf1\xdc\x88\xfe\x84\xf3\xcb\xfb\xb1\x11\x52\x36\x75\x85\xb0\x82\xf6\x08\xbc\xfa\x1b\x47\xf0\xb7\x8d\xc9\xba\xcf\x07\x19\x0b\xd2\x7f\x9c\x2f\xb2\x6f\xfb\x82\x91\x79\x25\x73\xf8\x85\xc9\x74\x20\xd3\x3a\xb5\x32\x19\xb9\x8d\xb4\x13\x42\x90\x91\x85\x7d\x3b\xf6\x87\xae\x95\x43\x7b\x39\x17\xbc\xab\x9e\x34\x73\x55\x20\x5e\x79\xb2\xc6\xb2\xc6\x78\xff\x53\x45\x3b\x81\x61\xe6\xed\xa2\x84\xc9\x6b\x86\x8d\xe0\xaf\xac\x16\x24\x5f\x78\x97\xd7\x91\x03\xbc\x69\x6a\x53\x9a\xd5\x16\xcd\x8b\x86\xf3\x09\x23\xd7\xb7\xb4\x28\xee\xd6\x40\x3d\xa4\x98\x94\xfb\x9f\x78\x2a\x8d\x1c\x82\x0f\x9b\x47\xdb\x78\x5d\xd4\x9d\x35\xbc\x43\x4c\xda\xe7\x24\x9a\x9f\x00\x00\x00\xff\xff\x85\x0f\x9d\xfc\x51\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\xe6\xb6\x2e\xe0\x28\x48\xda\x93\x17\x39\x78\x1d\xef\xc6\x48\x6a\x1b\x92\xd2\x22\x58\x2d\x0c\x5a\x1a\x59\x44\x29\xd2\x25\x29\xbb\xfe\xfb\xc5\x90\x92\x2c\x27\x6a\x50\x60\xb1\x37\x5b\xd2\xbc\x79\x33\xf3\xe6\x91\x61\xf2\x00\x07\x56\x0b\x8b\x79\x7a\x65\x4a\x14\x02\x6e\x82\x30\x7e\x80\xe5\xf4\xf3\x3c\x08\xd7\xeb\xa0\x79\x0b\xfe\x65\x7a\x05\xc6\x32\x6d\x0d\x30\x09\x5c\x5a\xd4\x2c\xb3\xfc\x80\xcd\xeb\x23\xb7\x25\xd8\x12\xc1\x60\xa6\xd1\x1a\x28\x94\x76\xff\x1d\x0a\x08\xc5\x72\xcc\x29\x4e\xf9\xaf\x28\xc8\xa5\x8b\x5f\x96\xab\x75\xbc\x88\x5d\xca\xb4\xf8\x23\x2d\x66\x17\x89\xd3\x22\x82\xb4\x58\x48\x56\x61\x5a\xac\xe1\xef\xb4\x58\xac\xd6\xc9\x62\xb5\x8c\xd3\x62\xfd\x4f\x10\x6e\xf5\x50\x14\xa4\x57\xe9\x15\x33\xa6\xa6\x28\x07\xc0\xb4\x1c\x8c\x8f\x1f\xe0\x7e\x1e\xcf\xa2\x85\x7b\xe8\x58\xc4\xef\xd4\x39\xaa\x0d\x1a\x57\x82\xcf\x1a\x3f\xcc\x9f\x9e\x28\x05\xca\x03\xd7\x4a\x56\x28\x2d\x1c\x98\xe6\x6c\x2b\x70\x0c\xbc\x00\x83\xf6\xf7\x40\xd9\x12\xf5\x91\x1b\x84\x1c\x0b\x22\x6a\xc0\xaa\x06\xe2\x7a\xcb\xe5\xb5\x29\xd3\x22\xfa\x10\x3a\x3e\x0d\xbf\x20\x4c\xda\x8e\xfc\xa4\x9a\x20\xde\x63\xc6\x0b\xde\x30\x2a\x6a\x21\x60\x1a\x2d\x41\x15\xee\xbf\x56\x02\x29\x8d\x8f\x0c\x21\x46\xc7\x7a\x1a\xc7\xcf\x9f\x17\xcb\xbf\x60\x0a\xd1\xea\x69\x4e\x5d\xd9\xa2\x50\xc7\x80\x46\x96\xa3\x65\x5c\x18\x50\x12\x4a\x75\x84\x2f\x4d\x53\x3d\x84\x71\x90\x26\x0c\xc2\xc5\x3a\x88\x08\xdd\x3d\xdf\x5b\xae\x24\x54\xec\x04\x5b\x84\x3d\xea\x42\xe9\x0a\x73\x27\x09\x55\x5b\x30\x8e\xe4\x89\xcb\x1d\xb0\x46\x0e\x56\x81\xd9\xb3\xa3\x84\x42\xab\x2a\x0c\xbe\x96\x48\xbd\x3e\xa8\x6f\x98\x83\x2d\xb9\x81\x23\x3b\x8d\x21\xd3\x98\xa3\xb4\x9c\x09\x03\x4c\x23\x18\x55\xeb\x0c\x73\x17\xd4\xf6\x11\x84\xca\x18\xe5\x37\x30\xc2\x70\x17\x06\xbd\x39\x8c\x21\x53\xb2\xe0\xbb\x5a\xbb\x2f\xa0\xe0\x02\xcd\x18\xb8\x34\x96\xc9\x0c\x61\xaf\x15\x3d\x1a\x03\xda\x2c\x6c\x7a\x3f\xfd\x1a\xc3\xe3\xfc\xc5\xe9\xa0\x2d\xde\x8d\x7c\x8f\xba\x62\x92\xa6\xdb\xa7\x65\xac\xd2\x4e\xd7\x3d\xad\x5b\x05\x3b\x94\xa8\x99\x45\xb0\x58\xed\x95\x66\xfa\x14\xf4\xa3\x6a\x43\xcd\xa0\x54\x71\x12\x87\x90\xd0\xac\xd0\xd4\xc2\xd2\xe3\xd7\x55\xb7\x35\x50\x6b\x14\x08\x66\x2c\xed\x56\x40\xf9\xf2\xb6\xb2\x66\xe0\x3e\xbf\x41\x63\xe8\xe1\xa8\x17\x79\xe0\x0c\x2e\xd7\x04\x73\x6e\x1b\xc9\xad\xd7\x41\xd2\xf2\xbc\x48\x5f\xd5\xc6\xd2\x4c\x6b\xe3\x6b\x54\x3a\x47\x7d\x56\x14\x30\xa7\x87\xb0\x59\xdd\xc5\x52\x59\x9c\x78\x39\x65\xac\x36\xd8\xa9\xa7\xaf\x79\x53\x6f\x8d\xe5\xb6\x76\xb5\x0e\x37\x95\x84\x13\xd8\x21\x46\x63\x57\x66\xff\xdb\x93\xaa\x69\x8e\x07\x9e\x3b\xa9\xb7\x19\x49\x8c\x52\x59\xa8\x98\xcd\xca\xc0\x96\xca\x20\x15\xc0\xbc\xec\xa8\xfc\xb3\x4c\xc2\xb7\xc3\xa6\xd1\x90\x48\x72\xa6\xf3\xc1\xcd\xf6\xfe\xd6\x23\x32\x09\xc2\x28\xa6\xbd\x80\x74\xb4\xad\xe1\xb6\x59\xdc\xe9\xd7\x78\x33\x9d\xcd\xe6\x71\xbc\x79\x9c\xbf\x6c\x16\xf7\x69\x11\x39\xcf\x9a\x4a\xe0\x2e\xb6\xe0\xa8\x3b\xb3\x64\x59\x86\xc6\xc0\x37\x3c\x85\xf0\x2c\xf9\xf7\xda\x15\x85\x2c\x2b\xc9\x46\x68\xcc\xe7\x8e\x91\x06\x86\x7a\x14\x0e\xb3\x88\xe7\xb3\x68\x9e\xf4\xc8\xb4\x4c\x92\xce\xb4\xfd\x9c\x69\x46\x7c\x27\x41\xe3\xf7\x1a\x8d\x35\xff\x03\x93\x38\x5e\xac\x96\x9b\x64\xf5\x38\x5f\x92\x9f\x5d\xc3\x05\xcd\xe7\x68\x91\xbc\x74\x6f\x1d\xc7\xb5\x9f\x70\x0e\x47\x72\x0a\xbf\x3e\xc3\x29\xdf\x83\x02\x6e\x5a\xad\xe4\x81\x93\xe2\x7e\xaf\xb4\x05\x81\x3b\x96\x9d\x20\xbe\x7f\x24\xca\xd1\xdc\x1b\xc1\xa5\x4b\x3a\x8d\x4c\x5f\x59\x2a\x64\x4c\xd2\x7e\x98\xc6\x86\x73\x40\x4e\x46\xef\xa5\xe6\x36\xed\x37\xf3\xca\x84\x46\x07\xce\x82\xe1\x55\x04\xa5\x7b\x50\xb4\xb2\xe7\x73\xe6\xf2\x04\x50\xce\x72\x2f\x85\x5b\x70\x6d\x6c\xe7\x3c\x74\x7c\xe5\x90\xb1\xac\xa4\x9f\x9d\x27\x5c\x9e\xca\x23\x87\xd8\x33\xe6\xa0\x77\xd2\x1e\x99\x39\xb3\xf9\xe0\xe0\xba\xb3\xef\xec\x56\x2d\xb0\x55\xad\xf3\x7b\x21\xfb\xfe\x50\xbb\x82\x8c\x09\x41\x26\xc7\x0d\x30\x21\xd4\xd1\x34\xf7\x84\x2e\x70\x8b\x9e\x68\xee\xe8\x31\x10\x4a\xee\x50\x9f\xdd\xcd\x96\x4c\xf6\x50\x03\xad\x84\x00\x42\x85\x23\x17\xc2\x83\xc2\xa8\x62\x3f\x78\x55\x57\x24\xcd\x1b\x28\x55\xad\x3f\x74\x49\x8d\x82\x0a\x99\xa4\xc4\xcc\x0e\xf2\x73\xd2\xe8\x4e\x2e\x27\x73\xcb\x9d\xc3\x49\x3c\x5e\x38\x00\x37\x9d\x87\xb8\x73\xa8\x57\x8b\x9f\x87\x3b\xcc\x7a\x8d\xa5\x1c\xde\xb7\x5a\x86\xaf\x6d\x7b\xd8\xfb\xb9\x81\x9b\x80\xea\x18\x83\xc6\x1d\xd3\xb9\x20\x6b\x68\x42\x3a\x88\xb3\x5e\xfa\x67\xd0\x6b\xd5\x79\x66\x0b\x09\x2c\xcf\xb9\x6d\xda\xee\xbf\x6e\xfd\xec\x0c\xc4\xb6\xea\x80\xe3\xce\x4a\x9b\x8d\x31\x5d\x2c\x13\xc1\xb0\x25\xba\x3b\x20\x97\xd4\x44\x4f\x8e\x6d\xe9\xfc\x6f\xaf\x22\x3f\xb1\xc8\x2f\xd3\xe7\xa7\x64\x7e\xbf\x99\x2f\xbf\x6c\x68\xd3\x36\xd3\x68\xd9\xf7\xa6\xc1\x5b\x8d\x9f\x5f\x3e\xe0\x30\x6f\xe1\x66\xb3\xd5\xf3\x32\xe9\x79\x6f\xe2\x9d\x56\xd5\xd2\xc2\xe2\xbe\x57\xf9\xf6\x74\xce\x30\x8d\x96\xbf\x82\x4e\xb7\xe5\x3e\x2e\x6d\xcf\x05\xd3\xff\x84\xbe\x9e\x26\x0f\x7d\xf4\x3d\xb3\xe5\x2f\xa3\x47\xde\xb4\xfe\x54\x1a\xf0\x07\xab\xf6\x6e\x02\xeb\xb5\x9f\x82\x2c\xde\xdc\xef\x5b\x83\x01\xa6\xe5\x84\x1d\xcd\x84\xb3\x6a\x32\xb9\xb9\xb9\xb9\xbd\xbd\xfd\xf8\xf1\xe3\xa7\x4f\x9f\x26\x84\x7e\x1d\xd7\x7b\xd4\x74\xfb\x0b\xc2\x82\x77\x69\x8e\xaa\x16\x79\x23\xe5\x56\x8b\x85\xa2\xd5\x24\x61\x9f\x45\xb2\x45\x6f\x1b\xf6\x92\xcc\x90\x0a\xee\x7e\x99\xc8\x3b\x43\xbf\xeb\xc7\xbd\xfd\x90\xe6\x77\xf7\x0e\x10\x4d\xe0\xee\xba\xab\xf4\xdf\x00\x00\x00\xff\xff\x65\x9d\x45\x40\x36\x0d\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x4f\x6f\xe3\x36\x10\xc5\xcf\xe1\xa7\x98\x53\x9b\x00\x8d\xda\x05\xda\x2d\x8a\x9e\x76\x1d\x03\x51\xb1\xfe\x03\xcb\x45\x5b\x54\x7b\x18\x93\x23\x9b\x00\x45\x0a\x1c\x4a\x8e\xbf\x7d\x41\x4a\x76\x1c\x59\x41\x81\x3d\x18\x10\x29\xcf\xef\xbd\x79\x1c\x31\xdb\x3e\x43\x87\xad\x09\xa4\xe0\x83\xc8\x8a\x67\x58\x7e\x5a\xcc\x45\xb6\x5e\x8b\xf3\x76\xf9\x08\xdc\xe0\xd1\x02\xd9\x4e\x7b\x67\x6b\xb2\x81\xa1\xf2\xae\x06\x26\xd9\x7a\x32\x27\xe0\xe0\x3c\xa9\xb8\xf6\x14\x38\x71\x8a\x7f\x96\xab\x75\x91\x17\x89\x55\x56\x9f\xcb\x6a\x36\x10\xcb\x6a\x03\xfd\x46\xf9\x68\xfb\x45\x6e\xb1\xa6\xb2\x5a\xc3\xbf\xe7\x17\xba\xac\x36\x5f\x45\xb6\xf3\xdf\x50\x5b\x3e\xc6\xe2\xf8\x6a\xb6\x78\x2a\xab\xf5\x7b\x16\xf2\xd9\x6a\xb1\xf8\xb4\x7c\x1a\x8a\x73\xf4\x7b\xce\xb2\xac\xac\xd6\x5f\x53\x0b\x4f\xf3\x62\xb6\xc9\xd7\xdb\x7c\xb5\x4c\x88\xbc\x02\xeb\x46\x75\x9a\xa1\xf1\xae\xd3\x8a\xd4\x0f\x70\xa3\x41\x3a\x1c\xc8\xf7\xf9\xf1\xab\x21\xb8\xd7\xd5\xa5\xec\x01\x9c\x17\xc3\x3f\xd0\x82\xb6\x81\x3c\xca\xa0\x3b\x02\x3e\x90\x31\xd9\x95\xfd\xa1\x37\xa8\xf1\x04\x3b\x82\x96\x49\x41\x70\xa0\x74\x55\x91\x27\x1b\x34\x06\x82\x70\xa0\x2b\xa9\x74\x50\x63\x63\xe5\x77\xdf\x33\xb8\xa3\x05\xf4\xfb\x36\x1d\x68\x96\x3a\x1e\x1a\x2b\x44\xb6\x3d\x4b\xa2\x8a\x05\x22\x7f\xb5\x65\x4e\x20\x3d\x61\x20\x4e\x52\xd2\xd9\x40\x36\x80\xab\x00\xc1\xd2\xb1\x9f\xa7\x0c\x0a\x22\x10\xd9\xe7\xcd\x79\xbe\x1e\x51\x29\xb8\xff\xf0\x90\x5d\xc1\x65\x13\xbb\xf9\x71\xf0\x27\x5d\x73\x8a\x5a\x33\xd7\xe8\x29\x78\x02\x01\x5a\x05\x8c\x1d\x31\xe8\x00\xc8\xd7\xa2\x70\xd4\xe1\x30\x6c\x34\xc8\x7c\x74\x5e\x4d\x18\x91\xcd\xd8\x87\x6a\xeb\xe8\x44\xfc\xe5\xf5\x64\x5b\x3d\x3d\x38\xe0\xa0\x5c\x9b\x64\xff\x28\x56\xcb\x09\x76\x24\x8d\xe9\xa4\x74\xb8\xcd\x30\xee\xde\x4a\x59\xa0\x17\xcd\x41\xdb\xfd\xbb\x39\xc6\xc2\x1b\x09\xdb\x45\x85\x55\x1b\x9a\x36\x70\x3f\x38\x20\x5d\x5d\xa3\x55\x51\x04\x03\x18\x87\x97\x2f\x14\x2a\xe7\x2f\x6d\x69\x1b\x5c\xf2\xd1\x8f\xdb\x84\xa0\xed\xc6\x7a\x11\x16\x05\xff\x64\xea\xa3\xb8\x8c\xf3\x90\x92\xb6\xf1\xa1\x9f\x13\x70\x1e\x3c\x35\x06\x25\xbd\x13\xed\x84\x68\xb2\x3b\x56\xe5\xeb\x71\x31\x9a\x53\xac\x5f\x34\x07\x06\x34\xa6\xaf\xe5\x29\x18\x8f\x51\xbe\x8e\xa5\x1b\xaa\x5d\x9c\xa4\xb7\x99\x4f\x11\x7c\x3d\x26\xa4\xb4\x22\xa4\x08\xe8\xc3\xf4\xb7\xdb\x0f\x64\xca\xf6\x2a\xf8\xb8\xee\xa3\x8f\x4d\x92\xfa\xff\x13\xe8\x61\x23\x03\x6d\xb3\xf7\xa8\x28\x1d\x43\xff\xc8\x60\x68\x8f\xf2\x34\xb4\x01\x03\x55\xb6\x3e\x5e\x0e\x83\x66\xe5\x7c\x8d\x53\x89\x0f\xbc\x41\xa6\x78\x86\xf9\xdf\xf9\x16\x66\xab\xa7\x79\xbc\x0f\x0a\x81\xc6\xec\xdc\xcb\xef\x42\xee\x40\xee\x84\x04\xf3\xe6\x97\x89\xf9\x8b\x0e\x20\x9d\xa2\xbb\x05\xa1\xd5\x76\x2f\x7e\xba\x2b\x5a\x29\x89\x39\x13\x1f\x7f\xbe\xcb\x6d\x87\x46\x2b\x98\x7d\xc9\xa1\x65\xdc\x13\xdc\x33\x11\xd4\xc4\x69\x11\x93\xa9\x9d\x27\x50\x14\x50\x1b\x7e\xc8\xc4\xc7\x5f\xee\xb6\x07\xf2\x04\x47\x4c\xf9\xb6\xd6\x93\x74\x1d\x79\xdc\x19\x8a\x13\xb7\x33\x54\xbf\x66\x3c\xf4\xa7\x0d\x65\xe2\xd7\xdf\x2e\x7a\xe7\x9b\x00\xb8\x6d\x1a\xa3\x49\xc5\x10\xe7\xe2\xbf\x00\x00\x00\xff\xff\x55\x02\xb2\x49\xfb\x06\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
