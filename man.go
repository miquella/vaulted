// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8e\x31\x4e\x03\x31\x10\x45\xfb\x3d\xc5\x3f\x00\xb1\xc4\x11\x20\x44\x8a\x0b\x36\x56\x1c\x0a\x24\x37\xa3\xf5\x18\x2c\x25\xe3\xb0\x9e\x38\xe2\xf6\x68\x4d\x40\x54\xd4\xff\xbd\x37\x63\x0e\x5b\x34\xba\x1c\x95\x63\x58\x51\x8c\xb8\x1f\x8c\xdf\x62\x7c\x78\xde\x0c\xc6\xb9\xe1\xb6\x61\x99\xc2\x0a\x59\x94\x67\x9a\x34\x37\x3e\x7e\x62\x9a\x99\x94\x2b\xf4\x9d\x31\x15\x51\x16\x45\x49\x20\x08\x5f\xbf\xab\x3d\xe6\x5f\xc7\x9d\xf3\xd6\xf7\x60\x48\x8f\x21\xad\xff\x64\x43\xda\x23\x24\x2b\x74\xe2\x90\x5c\x17\x9e\x36\x7e\xbd\xb7\xee\x60\x77\x63\x77\xfc\x99\xae\x52\x41\xf2\x7b\xbf\x31\x4e\x25\x32\x52\x99\xc1\x31\x6b\x96\xb7\x7f\xbe\x30\xbd\xf2\x72\x2e\x82\x8f\x4b\xd6\x85\xbe\xeb\xf8\x42\xfc\x28\xb9\xa2\x52\xe3\x08\x2d\x7d\xbb\x99\x5f\x01\x00\x00\xff\xff\x34\xb1\x7b\x0e\x21\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x59\xbd\x55\x62\x78\x9f\x90\x26\x86\x18\x5a\x47\x44\x69\x43\x41\x50\xc6\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\xc4\xb4\xd0\x2e\xda\x9d\xb1\x2e\xf7\x9c\xb9\xf9\x61\x0b\x23\x9e\x7b\x4f\xad\x58\x36\x03\xfc\xcf\x72\xbe\x85\x6a\xf5\x54\x64\x39\x63\x59\x7a\x82\x66\x00\xb1\x84\xc6\x0c\x8a\x1c\xf8\x8e\xa0\x31\xda\x93\xf6\x60\x24\xe0\xb5\x00\x50\xb7\xe0\x70\x24\x07\xca\x03\x3a\x40\xd0\x34\xa5\xb7\x49\xf9\x2e\xfd\x18\xd0\xb9\xc9\xd8\x36\x82\xf8\x6b\xb5\x63\xbc\xe4\x11\x26\xe4\x83\x90\xeb\x19\x29\xe4\x1e\x84\x2c\x4d\xdf\x0a\xc9\xc2\x97\xa6\x49\x48\x96\xe5\xb5\xfd\x9a\x35\xc3\xe5\xdb\x34\xdf\xc2\xa6\xe0\xeb\x7d\xc9\x0e\xe5\xae\x8a\xa4\x75\xb2\x57\x3a\x1e\x73\x0f\x27\x5b\xe5\xa0\xb1\x84\xa1\xd9\x58\xb0\x34\xf4\xd8\x50\x0b\xf5\xe5\x7e\xb6\xb4\xe6\x34\xd3\xc4\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xd5\xf3\xe3\xa1\xd8\xbc\xb1\x15\xe7\xc7\xdd\x7e\x13\xfc\x48\x8f\xca\x1a\x7d\x0a\x15\x23\x5a\x85\x75\x4f\x81\xe6\xc8\x2f\xc2\x6a\x93\xea\x7b\xa8\x09\xce\x8e\xda\x30\xa1\xef\x28\xbb\xed\x05\xd2\xd8\x19\xb9\x00\xe3\x3b\xb2\x93\x72\x14\x99\xf7\xd4\xad\xc2\xd2\xfb\x99\x5c\x38\x61\x54\x18\x23\xde\x5f\x7e\xd0\xac\x8a\xe3\x5f\x54\xb3\x4f\x12\x49\xf5\x3a\xea\x6f\x55\x3f\x02\x00\x00\xff\xff\xce\x4b\xec\x94\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xa7\xe6\x02\xf8\x54\xa4\xff\xc0\x8d\xef\x70\x42\xe0\x8b\x61\xb9\x08\x02\xe8\x65\x2d\xae\x2c\x36\xfc\x70\xf9\x61\xc5\xff\xbe\xd8\xb5\xe5\x93\xaf\x05\xf2\x4a\x72\x67\x67\x66\x87\x5b\xed\x5e\xe0\x84\xc5\x66\xd2\xed\x23\x69\x93\xe1\x93\xaa\x9a\x17\x78\x5d\xae\x9f\x54\xb5\xd9\xa8\xeb\x25\xc8\x5d\xfb\x08\xc6\x67\x8a\xd8\x65\x73\x22\x7b\x96\xd3\x04\x79\x20\xe8\x82\xcf\xe4\x33\x84\x1e\xd0\x03\xfd\x34\x29\x1b\x7f\xb8\x60\x0b\x62\xf3\xfd\xf5\xeb\xa6\xa9\x1b\x41\x6d\xfb\x3f\xdb\xfe\xf3\x1c\xbb\xed\xb7\xd0\xf6\xb5\x47\x47\x6d\xbf\x91\x8a\xd5\x53\xf3\x79\x5b\x6f\x76\xf5\xd7\x57\x29\x6a\x8e\x38\xfa\xc4\xf0\x13\x89\x13\x81\x0b\x9a\xa0\x0f\x51\x40\xb8\xe3\xaf\xc8\x54\x82\xf5\xd7\x31\x78\xf8\xa7\x98\xcc\x17\x0b\x29\xf2\x34\xde\x0a\x4d\x82\x84\x27\xd2\x90\x83\xdc\x4d\x95\xcd\x0b\x2c\xbf\x35\xf0\xe5\xe9\xbb\xaa\xb6\x8d\xaa\xea\x0d\xb4\x0f\xfb\x02\x7f\xa8\x1f\x6c\xce\x17\x3a\xab\x6a\x1f\xd5\x1a\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\x7a\x05\xe8\x35\x34\xd4\x45\xca\xf3\x8b\x2e\x92\x26\x9f\x0d\xda\x54\xcd\x01\x1d\x03\xae\x9f\x97\x77\x80\xeb\xe7\x25\x3c\xb8\x62\xb3\x69\x1f\x7b\xec\x72\x88\x80\x25\x0f\x5c\xdf\x61\x36\xc1\x7f\x84\xe5\xf6\x15\x42\x84\x44\xd1\xa0\x05\x5f\xdc\x9e\x62\x05\x75\x0f\xe4\x71\x6f\x49\x2f\x54\x49\x14\x61\x34\xd6\xc2\x9e\xe0\x18\x83\x3b\xe6\x8b\x52\x62\x5b\xa5\x47\xc7\xae\x8e\x03\x79\x40\x61\xfa\xe6\x9e\x5c\x73\xb1\x8a\xe4\xd0\xf0\x03\xce\x82\x8c\xe0\xe6\x14\xe8\x12\x85\x4e\x25\xec\xeb\x1e\xce\xa1\x00\x46\x82\x22\x50\xcd\xae\x99\xeb\x5e\xc0\x38\x98\x6e\x80\xd0\x75\x25\x26\xd8\x9f\x41\x53\x2f\x38\x0f\x89\x48\x60\x3f\xe4\x0f\x2a\x1c\x19\x12\xf6\x64\xc3\x28\xfd\x34\x65\x34\x36\x7d\x5c\x08\xbc\x2b\x29\xc3\x80\x27\x12\x8a\x57\xb5\x2c\xcb\xf8\x53\xf8\x41\x80\xfe\x0c\xf5\x72\x0d\x1d\xda\x77\x56\x47\xb6\x7a\x1b\x2c\x09\x5b\x31\xb0\x87\x18\x2c\x71\xf5\x9e\x00\x53\x2a\x8e\xf4\xff\x1b\xa2\xbe\xc9\x29\x3f\xe1\x43\x94\xc2\x4b\xa2\x1c\xfe\x34\xae\xb8\x9b\x1b\x80\xd6\x86\x91\x34\x2b\xe4\x18\x99\x04\x9f\x60\x08\xe5\x32\x9f\x73\x28\x51\xdd\x9e\x9a\x04\x87\x48\xc8\x03\xc9\x03\xfa\xeb\xc3\x0b\x85\x44\x12\xdb\xbb\x5e\xb7\xc2\xeb\x60\x15\xea\xbf\x4b\xba\x0e\xf6\xda\x65\xae\x59\x3e\x73\x53\xf6\x29\x9b\x5c\x32\xc1\x68\xf2\x00\x99\xdc\x31\x44\x8c\x77\xa9\x14\x53\x76\xe1\x70\xb0\x94\xb8\x7f\x1e\x28\x0a\x59\xd1\x30\x7b\x28\x03\x4e\x37\x48\x7d\xc1\x44\xa6\xcb\x86\xde\xc0\xd5\x3c\xf2\xf0\x1c\x22\xb8\x10\x69\x9a\x26\x04\x0f\x79\x30\x89\x93\xc9\x4e\x2f\x60\xca\x80\x0e\x5d\x71\xe4\xf3\x45\x67\x1f\xe2\xbb\x35\x92\x06\xb2\xb6\xed\xb7\xed\x6f\x77\x4a\x1b\x51\x3a\x84\xf1\xf7\x17\xa3\xe9\xf6\x47\xdf\x2b\xfa\xef\xcf\xac\x57\x3c\x05\x6d\xd2\xd1\xe2\x79\x1a\xff\xc9\xd0\xf8\xb6\xd8\x26\xce\xc6\x0b\x43\x59\x92\x8e\x7c\xa9\x60\xc7\x12\xa6\x41\x05\x6f\xcf\x80\x7d\x4f\xdd\xb4\x2d\x4b\x8c\xbc\x67\xae\x4b\x4b\x25\x8e\x14\x07\xc4\x6b\xee\x19\x89\x3d\xcb\x01\x06\xa3\x35\x79\x20\xec\x06\xc8\xc6\xd1\xec\x8b\xc9\xb3\x70\x24\x4f\x7a\xbe\xff\xee\xa4\xaf\x58\xfa\x8a\x2c\xe5\x4b\xb4\xb7\xe4\xc2\x89\x12\xe7\x50\x86\x37\xd1\x4f\x39\x44\xd2\x93\x8a\x69\xd9\x6d\x9f\xd4\xbf\x01\x00\x00\xff\xff\x41\xf4\xd7\x5c\x1f\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x56\x4d\x6f\xe4\x36\x0c\x3d\x47\xbf\x82\xb7\xb6\x80\xe3\xa2\xd7\x6d\x51\x20\x4d\x53\x64\x8a\xed\x64\x10\x4f\xb1\x28\xd6\x7b\xa0\x6d\x6a\xac\x8d\x2c\x19\xfa\x98\xc9\x60\xb1\xff\xbd\xa0\x24\xcf\xc7\x36\x05\x82\x24\x90\xc5\x47\xf2\xf1\x3d\xda\xf5\xf6\x11\xf6\x18\x75\xa0\xa1\xbd\x25\xb3\x87\x9f\x44\xdd\x3c\xc2\xfa\xee\xaf\x07\x51\x6f\x36\xa2\x3c\x03\x7e\xd4\xde\x82\x8d\x61\x8e\xc1\x83\x1f\x49\x6b\xe8\xed\x34\xa1\x19\x3c\x84\x11\x03\x68\x8b\x03\x78\xea\x1d\x05\x0f\xd2\x3a\xc0\x8c\x0c\xca\x04\x0b\x61\xa4\x1c\x95\xf0\x9b\x7f\xd6\x4f\x9b\x66\xd5\xa4\x1c\xad\xfc\xad\x95\xf7\x17\x99\x5a\xf9\x0c\xad\x5c\x19\x9c\xa8\x95\x1b\xf8\xd8\xca\xd5\xd3\x66\xbb\x7a\x5a\x37\xad\xdc\x7c\x12\x75\xe7\xfe\x1b\x03\xed\x6d\x7b\x8b\xde\x47\x8e\x49\xe1\xe8\xcc\x9b\xd1\xcd\x23\xfc\xfe\xd0\xdc\x3f\xaf\xd2\x61\xaa\xe0\xde\x11\x06\xf2\x80\x86\xa1\x94\xb3\x66\x22\x13\x20\x7a\x65\x76\xb0\x47\xa7\xb0\xd3\xe9\xf1\x90\xfa\xb8\xfb\xd0\xc0\x0b\x1d\xc1\x07\xeb\x68\x00\x65\xd2\x69\x2a\xa6\x86\xed\x48\xc2\x91\x8f\x3a\x70\xf0\x25\xdc\x05\x90\x23\x88\x9e\x06\x08\x16\x76\x64\xc8\x61\xa0\x37\x39\x3d\x28\xad\x45\x22\x36\xf1\x57\xc8\x4d\x84\x62\x0e\xa8\x53\x03\xdb\x85\x5d\x50\x1e\x30\x06\x3b\x50\xa0\x9e\xa9\x91\xce\x4e\x29\x38\x33\xd6\x3c\x3e\xbc\x7f\xcf\x04\xbd\x55\x58\x05\x4a\x5e\x0c\x4a\x79\x88\xe6\xc5\xd8\x83\x01\xeb\x20\x1a\x3f\x53\xaf\xa4\xa2\xa1\x2a\x60\x7e\x64\xa4\xde\x4e\x33\x06\xd5\x69\x3a\x17\xcf\x0d\xd2\xa4\x42\xa0\xa1\x2e\x33\x5e\xad\x6d\xa0\x77\x3c\x91\xa6\x79\x64\xfa\xf2\x2d\xb5\x33\x89\xc4\xc3\x48\x66\xe1\xe2\x1b\xe2\x98\x0b\xe5\xe1\x80\x47\x66\x57\x79\xee\x71\x88\x24\x8a\xaa\x94\xc1\x4e\x69\x15\x8e\xcc\x66\x70\xd8\xbf\xa4\x63\xad\x24\x05\x35\x11\xd8\xdc\xd3\x05\x60\x05\x87\x51\xf5\x23\x4c\x84\xc6\xa7\x87\x4d\xf3\x28\x70\xc7\x5c\x1c\x6c\xd4\x03\xd0\xab\xf2\x2c\xdc\x81\xa4\x32\x2a\x90\x3e\xd6\x49\x38\x45\x48\xa2\xde\x2e\xb2\xfd\x1f\xd9\x89\xa6\x90\x95\xf1\x65\xd4\x1a\xee\x9e\xd7\x4b\x31\xce\x6a\xe2\x72\x73\x64\x12\x4d\x3e\xe3\xf1\xa5\xb3\x01\x50\x06\x72\xc2\xcf\x78\x30\x4c\x48\x16\x80\xf7\xca\x9a\xe4\xae\x0b\xc9\x7d\x18\x15\xc3\xf1\x05\xbe\x4d\xc3\xdb\x17\x79\xa0\x7b\xd4\x6a\x38\x1d\x0f\x91\xd9\xb6\x06\x4e\xa3\xbd\x12\x73\x95\xfe\xed\x1d\x0d\x64\x82\x42\xed\xe1\x24\x6c\x71\xd2\x55\x2e\x37\x57\xcf\x03\x3d\x67\x40\x98\xf0\x55\x4d\x71\xe2\xae\xad\x21\x18\x6d\x74\xb5\xa8\x57\x1b\xf1\x9c\x6e\x73\xe4\x9c\xf2\x4f\x78\x84\x8e\x60\x26\x27\xad\xe3\xe6\x0f\x2a\x8c\x36\x86\x52\xd8\x91\x09\x58\xd6\x49\xb0\xb9\xcd\x24\xed\x5a\x7c\x60\xe1\x28\xb3\xb7\x2f\xec\xa7\x22\x94\xea\xaa\x6a\x2e\xcb\xdb\xe8\xfa\xc5\x0f\x03\xc9\x04\xa5\x6d\x9f\xfa\xf7\xf0\x3d\xd5\xbb\x5a\x5c\x69\xa4\xb7\x46\xaa\xdd\xc2\x90\x54\x9a\x7c\x05\xca\xf8\x80\xa6\x27\x98\x9d\xe5\xa3\x0a\x28\xf4\xf5\x0f\xf5\x37\x8a\xe0\x2e\x30\xb0\x22\x7e\x49\x5e\xaa\xa4\xf2\x63\xe5\xc7\xea\xb3\xb7\xa6\x6a\xe5\xaa\x8f\x3e\xd8\xa9\x95\x9b\x5f\x8b\x52\x8e\x70\x60\xc3\xe7\x40\xee\x31\x7a\xaa\x96\x42\x3d\x1f\x2c\x9e\x23\xad\x19\x38\x4b\x98\x17\xc4\x85\xe1\xf3\xa9\xc8\xab\xe0\x8c\xc5\x56\xcc\xc4\x67\x10\xae\xa6\x95\xcf\x55\xda\x68\x97\x5e\x4e\x70\x7c\xbb\x6c\x7a\xf0\x51\x05\x5e\x0d\x69\xa0\xb4\x47\x1d\x33\x1d\xe7\x9d\xbe\x28\x27\x27\xad\x0b\x1c\xf7\x79\x0d\xc8\x97\x27\x9c\x59\x0b\x0c\x43\xa9\xa7\x8e\x35\xcd\x46\x03\x5c\xca\x8d\x9e\x64\xd4\xa0\x8c\xb0\x61\x24\xc7\x44\xef\x1c\x4e\xd3\xb7\x4b\xa1\x2a\xc3\xe6\x04\xc6\x32\x46\xaf\xe3\x90\x6d\x80\xce\xe1\x31\x67\x2a\x2b\x57\xe4\x64\x8e\x26\xbb\x4f\x3b\x69\xb5\x11\xab\xec\xc5\x92\xd7\x07\xc7\x29\x7c\x9c\x67\xcd\x46\x18\x2c\xf9\x04\x3c\x61\xe8\xc7\xa4\xdf\x62\xde\xd9\x51\x7b\x9b\x36\x03\x0d\x25\xda\x0b\x95\x97\x35\x27\x51\x26\x90\x9b\x1d\xf1\xfa\x45\x0f\x08\x81\x5e\x03\x04\x9a\x66\xcd\x7b\x3e\xbf\x55\x76\x56\xa3\xd9\x7d\xe7\xa1\x8b\x4a\x87\xf6\x56\x99\x32\x1b\xbe\xfc\xe3\x72\x99\x29\x9c\xb1\x7f\xc1\x5d\x59\x12\xd1\x93\x3b\x43\x2d\x19\x4f\x45\x23\xb7\x11\x59\x07\x2a\x8c\x5c\xac\x90\x8a\xf4\xe0\x79\x9c\x3a\xd5\xdb\x91\xb6\x87\x1a\xee\xb4\xb7\x80\x7b\x54\x3a\x4d\x97\x1d\x82\x65\x74\x8e\x66\x8d\x7d\x4a\x2d\xa3\xe9\xc3\xb2\x47\x76\x3e\x76\xa0\xd5\x0b\x89\x8e\x46\xdc\x2b\x76\xb8\x19\x4e\x61\xcb\xc4\x4f\x31\x59\xa0\xd8\xf7\x34\x07\x9f\xdc\xab\x23\xa5\x10\xd6\x03\x9f\x30\x47\xe1\x28\x66\xc7\x8c\x0d\xf0\x67\xf3\xb4\x2e\x63\xc8\x03\xda\x5a\x70\xd4\x93\xda\x13\x7c\x8e\x3e\x4b\x88\x3f\x0a\xfc\x32\x89\xf3\x1b\x35\xd8\x32\xdb\x32\x90\xc2\x7d\x82\x64\x1a\xb2\xdf\x2e\x98\x4b\x6b\xbe\xa3\x77\xa5\xfa\x2f\x5f\x80\x1b\x80\xfa\x6f\xc3\x82\xfc\xfa\xb5\x95\xcf\xa2\xde\x36\x02\xb5\xee\xec\xeb\xcf\xa2\xef\x20\xfd\x08\x0d\x1a\xf4\xd5\xef\x5a\xfc\xc1\x24\xc3\x1a\x27\xba\xd9\x1e\x67\xba\xe1\x57\x9d\x17\x0d\x85\x9b\x09\xe7\x8f\xb9\xa5\x4f\xf9\xcf\xcd\xdd\xe2\x82\xb7\x3f\x0d\xce\xa6\x40\x6d\xcd\xee\x34\x48\xe5\x8a\x6d\x44\xaa\xf0\xe6\xe3\x19\xcf\x6b\xd5\xd3\x95\xda\xe1\x4a\xed\xe7\x6f\x80\xcb\x94\x1d\x49\xeb\x52\xa6\xf4\xbe\x35\x74\x58\x12\xdc\xe7\xb7\xf8\x4d\x49\xb0\x5d\xde\x5f\xe5\xed\x0e\x2c\xa4\xd3\xe7\x4b\xde\xbc\xcb\x37\x64\x71\x21\x03\xda\xb4\xd9\xbd\xa8\xb7\x0f\xe2\xdf\x00\x00\x00\xff\xff\x60\xea\x67\xa6\x66\x0a\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0a\x83\x30\x10\x45\xf7\x39\xc5\x3f\x80\x06\x7a\x84\xd6\x0a\x0a\xad\x06\xc7\x4d\x21\x1b\x8b\x11\x02\x83\x29\xce\xd8\xf3\x17\xd2\x42\xc1\xed\xbc\xf7\xe6\xdb\xb1\xc1\x7b\xda\x59\xc3\xec\x4b\x16\x9c\x8c\xa5\x06\xdd\xf9\x5e\x1b\xeb\x9c\xf9\x21\xb0\xc0\x97\xe0\x28\x2a\x98\x98\xbf\x89\x64\x97\x1e\x5d\xef\xa8\xa5\xec\xfb\xe5\xe2\x97\xea\x5f\xf9\x65\x30\xf6\xb9\x1d\xef\x51\x34\x13\x6a\x70\xad\xa9\x1a\x5a\x37\xb6\x7d\x97\x3f\xdc\x0e\x1b\x05\xd2\x1a\xf0\x0a\x1b\x38\xae\xa1\x80\x26\x88\xce\x69\x57\x6b\x3e\x01\x00\x00\xff\xff\x32\x37\x94\xc4\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x65\xd5\x08\x7a\x84\x36\x0d\xc4\x8b\x26\xc2\xf6\xa6\x30\x1b\xd9\x1a\xd5\x02\x5b\x4a\xf5\x13\x9a\xdb\x17\x2b\x82\xb6\xbb\x81\x79\xdf\xfb\x66\xc4\x70\xc2\x4d\xe5\x25\xb1\xa6\x7d\x58\xf1\xdc\x88\xfe\x84\xf3\xcb\xfb\xb1\x11\x52\x36\x75\x85\xb0\x82\xf6\x08\xbc\xfa\x1b\x47\xf0\xb7\x8d\xc9\xba\xcf\x07\x19\x0b\xd2\x7f\x9c\x2f\xb2\x6f\xfb\x82\x91\x79\x25\x73\xf8\x85\xc9\x74\x20\xd3\x3a\xb5\x32\x19\xb9\x8d\xb4\x13\x42\x90\x91\x85\x7d\x3b\xf6\x87\xae\x95\x43\x7b\x39\x17\xbc\xab\x9e\x34\x73\x55\x20\x5e\x79\xb2\xc6\xb2\xc6\x78\xff\x53\x45\x3b\x81\x61\xe6\xed\xa2\x84\xc9\x6b\x86\x8d\xe0\xaf\xac\x16\x24\x5f\x78\x97\xd7\x91\x03\xbc\x69\x6a\x53\x9a\xd5\x16\xcd\x8b\x86\xf3\x09\x23\xd7\xb7\xb4\x28\xee\xd6\x40\x3d\xa4\x98\x94\xfb\x9f\x78\x2a\x8d\x1c\x82\x0f\x9b\x47\xdb\x78\x5d\xd4\x9d\x35\xbc\x43\x4c\xda\xe7\x24\x9a\x9f\x00\x00\x00\xff\xff\x85\x0f\x9d\xfc\x51\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\xbd\xf3\x57\xcc\x31\x0b\x38\x5a\xa4\x45\x7b\xd8\x9e\xb2\x89\x81\x18\xd9\x3a\x86\xe5\x36\x08\xaa\x22\xa0\xa5\xa1\x45\x84\x22\x05\x72\x68\xd7\xff\xbe\x18\x8a\xf2\xc7\xc6\x9b\xdb\x5e\x82\x98\x9c\x8f\xf7\x86\xef\x8d\x8a\xd5\x03\x6c\x65\x34\x84\x4d\x75\x1d\x5a\x34\x06\x6e\x44\x51\x3e\xc0\xfc\xf6\xcf\xa9\x28\x16\x0b\x91\x6f\x61\xb8\xac\xae\x21\x90\xf4\x14\x40\x5a\xd0\x96\xd0\xcb\x9a\xf4\x16\xf3\xf5\x4e\x53\x0b\xd4\x22\x04\xac\x3d\x52\x00\xe5\x7c\xfa\x9d\xaa\x80\x71\xb2\xc1\x86\xf3\xdc\x10\xc5\x49\xa9\x5d\xf9\x32\x7f\x5a\x94\xb3\x32\xb5\xac\xd4\xd7\x4a\xdd\x9d\x35\xae\xd4\x12\x2a\x35\xb3\xb2\xc3\x4a\x2d\xe0\x9f\x4a\xcd\x9e\x16\xab\xd9\xd3\xbc\xac\xd4\xe2\x5f\x51\xac\xfd\xa5\x2c\xa8\xae\xab\x6b\x19\x42\xe4\xac\x54\x40\x7a\x7b\x31\xbf\x7c\x80\xfb\x69\x79\xb7\x9c\xa5\xc3\x84\xa2\xfc\x80\xe7\x55\x0c\x18\x12\x85\xa1\x6b\xf9\x30\xfd\xf6\x8d\x5b\xa0\xdd\x6a\xef\x6c\x87\x96\x60\x2b\xbd\x96\x6b\x83\x13\xd0\x0a\x02\xd2\x1f\xc2\x51\x8b\x7e\xa7\x03\x42\x83\x8a\x81\x06\x20\x97\x4b\x7c\x5e\x6b\xfb\x39\xb4\x95\x5a\x7e\x2a\x12\x9e\x8c\x4f\x14\xab\x71\x22\x3f\x60\x23\xca\x1e\x6b\xad\x74\x46\xa4\xa2\x31\x70\xbb\x9c\x83\x53\xe9\xb7\x77\x06\xb9\xcd\x90\x59\xc0\x6a\x3c\xd3\x21\x9f\x35\x20\x15\xa1\x17\xa1\x97\x3b\xab\xed\x26\xbf\x60\x08\xda\xd9\xf3\x17\x2c\xe0\xb9\xd5\x5c\x8e\x03\x38\x9a\x27\x7d\x29\x50\xe8\x00\x5b\x69\x74\x73\x38\x6e\xa2\x97\xc4\x71\x21\xa3\x65\x1d\x1c\x13\x26\xe9\xdf\xda\x63\x83\x96\xb4\x34\x01\x3c\x86\x68\x48\xdb\x8d\x50\xde\x75\xe9\x7a\x80\x3b\xa0\x97\x1e\x4f\x3a\x48\xe8\xe4\x7f\xba\x8b\x1d\xb3\x76\x16\xa1\x75\xd1\x17\xa2\x98\x2d\xc4\x32\x45\x73\x66\x9f\xfa\x77\x72\x0f\x6b\x84\x1e\xbd\x72\x9e\xc9\xb3\x68\x5d\xa4\x0c\x6c\xcf\x03\x90\x59\xb0\xe4\x06\x9a\xc0\x10\x0a\xf1\xdc\x22\xab\x61\xeb\xde\xb0\x01\x6a\x75\x80\x9d\xdc\x4f\xce\x50\x33\xac\xe0\xa2\xaf\xb1\x49\x49\xe3\x4b\x83\x71\x75\xe2\x1f\xe0\x0a\x8b\x4d\x21\x4e\x94\x32\x81\xda\x59\xa5\x37\xe3\x84\x94\x36\x18\x26\xa0\x6d\x20\x69\x6b\x84\xde\x3b\x3e\x9a\x00\x52\x5d\x64\x75\xdc\x3e\x97\xf0\x38\x7d\x49\x4a\x9d\x3b\xc2\x2f\xf0\x75\x3f\xf6\x9a\xc0\xdf\xa3\x0b\xe2\x3a\x90\xa6\x48\x18\x40\x02\x61\xd7\x3b\x2f\xfd\x9e\xd5\xc8\x83\x3a\x05\xbe\x63\x6e\x07\x05\x48\x7b\x2a\xe5\x42\xb0\x68\xb8\xe5\x1b\xee\x41\xdb\x3e\x12\xb4\xe8\x31\xcd\xd2\x3a\x82\x4e\x52\x3d\x18\x9f\x03\x4e\x6d\xbe\x77\xd1\x9f\x95\x82\x15\xcf\x4d\xa1\xa4\xe8\x11\x6a\x69\xf9\x31\xc8\x6d\x36\xe6\xa0\x88\xef\xac\x8c\x8d\x26\x16\x7c\x87\x36\x16\x89\xf0\x48\xef\xe0\xc2\x1e\x7d\x27\x2d\x9b\xee\x94\x52\x20\xe7\xbf\x93\x19\xbf\xe8\x06\x2d\x7a\x49\x08\x72\x9c\xc3\x71\x30\xa7\xe9\x31\xf0\x24\x98\x75\xb9\x2a\x87\x11\x5c\x0e\x1c\x0b\x36\xef\x44\x99\xb5\x5e\x1f\xd4\x3f\x49\x2d\x33\xa2\x0f\x68\x0e\x53\x1a\xb3\x44\xd6\x2c\xe7\xae\x91\x76\x88\x16\x6e\x7e\xeb\x40\xda\x06\x7e\xfd\xbd\x2d\xf2\xd6\x9c\x0d\x42\xc0\x2d\xab\x54\x9d\xbb\xce\xa9\x83\xa8\x75\x48\x85\x5a\xbd\x69\x91\xbd\x29\x2d\xdc\x24\xbf\x4c\x06\x9b\xa4\xf7\x17\xc9\x64\xb5\xec\xc3\x79\x1d\x72\x39\x18\x24\xb1\xa4\xf4\xb8\x52\xc6\x35\x40\xee\x0d\x2d\xec\xb4\x31\x10\x88\xff\xae\x51\xfc\x68\x13\x1c\x47\x91\x77\xc0\x3a\xd2\x3b\xa3\xef\x86\x22\x47\xc3\x0a\x94\x2c\x36\xdd\xe1\x41\xe7\x3a\x8c\xb6\x2c\x78\x21\xf2\x38\xd2\x00\x75\xd7\xcb\x9a\xf2\x5e\x74\xc6\xb8\x1d\x93\xbb\xb4\xa4\xc3\x17\x51\x2c\x4b\x5e\x18\x50\x5d\xad\x23\xfc\x92\x45\x78\xfb\x5c\xbe\xde\xde\xdd\x4d\xcb\xf2\xf5\x71\xfa\xf2\x3a\xbb\xaf\xd4\x32\x7d\x6e\x86\xfa\x43\xe9\xa3\x2c\x64\x5d\x63\x08\x83\x4d\x1a\xc8\x84\xcf\x0f\x2f\xa8\x72\x22\x1a\xec\xd1\x36\x0c\xce\x59\xb6\x22\x7f\x28\x8e\xee\xe5\x61\xe9\x00\x68\x19\x69\x53\x5c\x46\x59\x4e\xef\x96\xd3\xd5\x09\xd8\x8f\x91\x0e\x5f\xe8\x53\x6c\x19\xed\xfb\x8b\x9f\x87\xb8\x2c\x67\x4f\xf3\xd7\xd5\xd3\xe3\x74\xce\xd2\xbf\x92\x4d\xa3\x39\x57\x1a\xb3\x9f\xc0\x19\xb7\xbf\x96\xb3\xd5\xcb\x31\x34\x8b\x98\x17\x74\xec\x7b\xe7\x09\x0c\x6e\x64\xbd\x87\xf2\xfe\x31\x7c\xca\xbc\x31\xe0\xf1\x81\x93\x39\xa3\x4d\xa2\xbb\x6c\xf9\x77\xf0\x1b\x1d\x46\xfc\xcb\xa9\xf8\x3f\x00\x00\xff\xff\xd8\xb6\xfa\xd4\x2c\x09\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x4f\x6f\xe3\x36\x10\xc5\xcf\xe1\xa7\x98\x53\x9b\x00\x8d\xda\x05\xda\x2d\x8a\x9e\x76\x1d\x03\x51\xb1\xfe\x03\xcb\x45\x5b\x54\x7b\x18\x93\x23\x9b\x00\x45\x0a\x1c\x4a\x8e\xbf\x7d\x41\x4a\x76\x1c\x59\x41\x81\x3d\x18\x10\x29\xcf\xef\xbd\x79\x1c\x31\xdb\x3e\x43\x87\xad\x09\xa4\xe0\x83\xc8\x8a\x67\x58\x7e\x5a\xcc\x45\xb6\x5e\x8b\xf3\x76\xf9\x08\xdc\xe0\xd1\x02\xd9\x4e\x7b\x67\x6b\xb2\x81\xa1\xf2\xae\x06\x26\xd9\x7a\x32\x27\xe0\xe0\x3c\xa9\xb8\xf6\x14\x38\x71\x8a\x7f\x96\xab\x75\x91\x17\x89\x55\x56\x9f\xcb\x6a\x36\x10\xcb\x6a\x03\xfd\x46\xf9\x68\xfb\x45\x6e\xb1\xa6\xb2\x5a\xc3\xbf\xe7\x17\xba\xac\x36\x5f\x45\xb6\xf3\xdf\x50\x5b\x3e\xc6\xe2\xf8\x6a\xb6\x78\x2a\xab\xf5\x7b\x16\xf2\xd9\x6a\xb1\xf8\xb4\x7c\x1a\x8a\x73\xf4\x7b\xce\xb2\xac\xac\xd6\x5f\x53\x0b\x4f\xf3\x62\xb6\xc9\xd7\xdb\x7c\xb5\x4c\x88\xbc\x02\xeb\x46\x75\x9a\xa1\xf1\xae\xd3\x8a\xd4\x0f\x70\xa3\x41\x3a\x1c\xc8\xf7\xf9\xf1\xab\x21\xb8\xd7\xd5\xa5\xec\x01\x9c\x17\xc3\x3f\xd0\x82\xb6\x81\x3c\xca\xa0\x3b\x02\x3e\x90\x31\xd9\x95\xfd\xa1\x37\xa8\xf1\x04\x3b\x82\x96\x49\x41\x70\xa0\x74\x55\x91\x27\x1b\x34\x06\x82\x70\xa0\x2b\xa9\x74\x50\x63\x63\xe5\x77\xdf\x33\xb8\xa3\x05\xf4\xfb\x36\x1d\x68\x96\x3a\x1e\x1a\x2b\x44\xb6\x3d\x4b\xa2\x8a\x05\x22\x7f\xb5\x65\x4e\x20\x3d\x61\x20\x4e\x52\xd2\xd9\x40\x36\x80\xab\x00\xc1\xd2\xb1\x9f\xa7\x0c\x0a\x22\x10\xd9\xe7\xcd\x79\xbe\x1e\x51\x29\xb8\xff\xf0\x90\x5d\xc1\x65\x13\xbb\xf9\x71\xf0\x27\x5d\x73\x8a\x5a\x33\xd7\xe8\x29\x78\x02\x01\x5a\x05\x8c\x1d\x31\xe8\x00\xc8\xd7\xa2\x70\xd4\xe1\x30\x6c\x34\xc8\x7c\x74\x5e\x4d\x18\x91\xcd\xd8\x87\x6a\xeb\xe8\x44\xfc\xe5\xf5\x64\x5b\x3d\x3d\x38\xe0\xa0\x5c\x9b\x64\xff\x28\x56\xcb\x09\x76\x24\x8d\xe9\xa4\x74\xb8\xcd\x30\xee\xde\x4a\x59\xa0\x17\xcd\x41\xdb\xfd\xbb\x39\xc6\xc2\x1b\x09\xdb\x45\x85\x55\x1b\x9a\x36\x70\x3f\x38\x20\x5d\x5d\xa3\x55\x51\x04\x03\x18\x87\x97\x2f\x14\x2a\xe7\x2f\x6d\x69\x1b\x5c\xf2\xd1\x8f\xdb\x84\xa0\xed\xc6\x7a\x11\x16\x05\xff\x64\xea\xa3\xb8\x8c\xf3\x90\x92\xb6\xf1\xa1\x9f\x13\x70\x1e\x3c\x35\x06\x25\xbd\x13\xed\x84\x68\xb2\x3b\x56\xe5\xeb\x71\x31\x9a\x53\xac\x5f\x34\x07\x06\x34\xa6\xaf\xe5\x29\x18\x8f\x51\xbe\x8e\xa5\x1b\xaa\x5d\x9c\xa4\xb7\x99\x4f\x11\x7c\x3d\x26\xa4\xb4\x22\xa4\x08\xe8\xc3\xf4\xb7\xdb\x0f\x64\xca\xf6\x2a\xf8\xb8\xee\xa3\x8f\x4d\x92\xfa\xff\x13\xe8\x61\x23\x03\x6d\xb3\xf7\xa8\x28\x1d\x43\xff\xc8\x60\x68\x8f\xf2\x34\xb4\x01\x03\x55\xb6\x3e\x5e\x0e\x83\x66\xe5\x7c\x8d\x53\x89\x0f\xbc\x41\xa6\x78\x86\xf9\xdf\xf9\x16\x66\xab\xa7\x79\xbc\x0f\x0a\x81\xc6\xec\xdc\xcb\xef\x42\xee\x40\xee\x84\x04\xf3\xe6\x97\x89\xf9\x8b\x0e\x20\x9d\xa2\xbb\x05\xa1\xd5\x76\x2f\x7e\xba\x2b\x5a\x29\x89\x39\x13\x1f\x7f\xbe\xcb\x6d\x87\x46\x2b\x98\x7d\xc9\xa1\x65\xdc\x13\xdc\x33\x11\xd4\xc4\x69\x11\x93\xa9\x9d\x27\x50\x14\x50\x1b\x7e\xc8\xc4\xc7\x5f\xee\xb6\x07\xf2\x04\x47\x4c\xf9\xb6\xd6\x93\x74\x1d\x79\xdc\x19\x8a\x13\xb7\x33\x54\xbf\x66\x3c\xf4\xa7\x0d\x65\xe2\xd7\xdf\x2e\x7a\xe7\x9b\x00\xb8\x6d\x1a\xa3\x49\xc5\x10\xe7\xe2\xbf\x00\x00\x00\xff\xff\x55\x02\xb2\x49\xfb\x06\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
