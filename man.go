// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8e\x31\x4e\x03\x31\x10\x45\xfb\x3d\xc5\x3f\x00\xb1\xc4\x11\x20\x44\x8a\x0b\x36\x56\x1c\x0a\x24\x37\xa3\xf5\x18\x2c\x25\xe3\xb0\x9e\x38\xe2\xf6\x68\x4d\x40\x54\xd4\xff\xbd\x37\x63\x0e\x5b\x34\xba\x1c\x95\x63\x58\x51\x8c\xb8\x1f\x8c\xdf\x62\x7c\x78\xde\x0c\xc6\xb9\xe1\xb6\x61\x99\xc2\x0a\x59\x94\x67\x9a\x34\x37\x3e\x7e\x62\x9a\x99\x94\x2b\xf4\x9d\x31\x15\x51\x16\x45\x49\x20\x08\x5f\xbf\xab\x3d\xe6\x5f\xc7\x9d\xf3\xd6\xf7\x60\x48\x8f\x21\xad\xff\x64\x43\xda\x23\x24\x2b\x74\xe2\x90\x5c\x17\x9e\x36\x7e\xbd\xb7\xee\x60\x77\x63\x77\xfc\x99\xae\x52\x41\xf2\x7b\xbf\x31\x4e\x25\x32\x52\x99\xc1\x31\x6b\x96\xb7\x7f\xbe\x30\xbd\xf2\x72\x2e\x82\x8f\x4b\xd6\x85\xbe\xeb\xf8\x42\xfc\x28\xb9\xa2\x52\xe3\x08\x2d\x7d\xbb\x99\x5f\x01\x00\x00\xff\xff\x34\xb1\x7b\x0e\x21\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\x59\xbd\x55\x62\x78\x9f\x90\x26\x86\x18\x5a\x47\x44\x69\x43\x41\x50\xc6\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\xc4\xb4\xd0\x2e\xda\x9d\xb1\x2e\xf7\x9c\xb9\xf9\x61\x0b\x23\x9e\x7b\x4f\xad\x58\x36\x03\xfc\xcf\x72\xbe\x85\x6a\xf5\x54\x64\x39\x63\x59\x7a\x82\x66\x00\xb1\x84\xc6\x0c\x8a\x1c\xf8\x8e\xa0\x31\xda\x93\xf6\x60\x24\xe0\xb5\x00\x50\xb7\xe0\x70\x24\x07\xca\x03\x3a\x40\xd0\x34\xa5\xb7\x49\xf9\x2e\xfd\x18\xd0\xb9\xc9\xd8\x36\x82\xf8\x6b\xb5\x63\xbc\xe4\x11\x26\xe4\x83\x90\xeb\x19\x29\xe4\x1e\x84\x2c\x4d\xdf\x0a\xc9\xc2\x97\xa6\x49\x48\x96\xe5\xb5\xfd\x9a\x35\xc3\xe5\xdb\x34\xdf\xc2\xa6\xe0\xeb\x7d\xc9\x0e\xe5\xae\x8a\xa4\x75\xb2\x57\x3a\x1e\x73\x0f\x27\x5b\xe5\xa0\xb1\x84\xa1\xd9\x58\xb0\x34\xf4\xd8\x50\x0b\xf5\xe5\x7e\xb6\xb4\xe6\x34\xd3\xc4\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xd5\xf3\xe3\xa1\xd8\xbc\xb1\x15\xe7\xc7\xdd\x7e\x13\xfc\x48\x8f\xca\x1a\x7d\x0a\x15\x23\x5a\x85\x75\x4f\x81\xe6\xc8\x2f\xc2\x6a\x93\xea\x7b\xa8\x09\xce\x8e\xda\x30\xa1\xef\x28\xbb\xed\x05\xd2\xd8\x19\xb9\x00\xe3\x3b\xb2\x93\x72\x14\x99\xf7\xd4\xad\xc2\xd2\xfb\x99\x5c\x38\x61\x54\x18\x23\xde\x5f\x7e\xd0\xac\x8a\xe3\x5f\x54\xb3\x4f\x12\x49\xf5\x3a\xea\x6f\x55\x3f\x02\x00\x00\xff\xff\xce\x4b\xec\x94\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\xd8\xa7\xe6\x02\xf8\x54\xa4\xff\xc0\x8d\xef\x70\x42\xe0\x8b\x61\xb9\x08\x02\xe8\x65\x2d\xae\x2c\x36\xfc\x70\xf9\x61\xc5\xff\xbe\xd8\xb5\xe5\x93\xaf\x05\xf2\x4a\x72\x67\x67\x66\x87\x5b\xed\x5e\xe0\x84\xc5\x66\xd2\xed\x23\x69\x93\xe1\x93\xaa\x9a\x17\x78\x5d\xae\x9f\x54\xb5\xd9\xa8\xeb\x25\xc8\x5d\xfb\x08\xc6\x67\x8a\xd8\x65\x73\x22\x7b\x96\xd3\x04\x79\x20\xe8\x82\xcf\xe4\x33\x84\x1e\xd0\x03\xfd\x34\x29\x1b\x7f\xb8\x60\x0b\x62\xf3\xfd\xf5\xeb\xa6\xa9\x1b\x41\x6d\xfb\x3f\xdb\xfe\xf3\x1c\xbb\xed\xb7\xd0\xf6\xb5\x47\x47\x6d\xbf\x91\x8a\xd5\x53\xf3\x79\x5b\x6f\x76\xf5\xd7\x57\x29\x6a\x8e\x38\xfa\xc4\xf0\x13\x89\x13\x81\x0b\x9a\xa0\x0f\x51\x40\xb8\xe3\xaf\xc8\x54\x82\xf5\xd7\x31\x78\xf8\xa7\x98\xcc\x17\x0b\x29\xf2\x34\xde\x0a\x4d\x82\x84\x27\xd2\x90\x83\xdc\x4d\x95\xcd\x0b\x2c\xbf\x35\xf0\xe5\xe9\xbb\xaa\xb6\x8d\xaa\xea\x0d\xb4\x0f\xfb\x02\x7f\xa8\x1f\x6c\xce\x17\x3a\xab\x6a\x1f\xd5\x1a\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\x7a\x05\xe8\x35\x34\xd4\x45\xca\xf3\x8b\x2e\x92\x26\x9f\x0d\xda\x54\xcd\x01\x1d\x03\xae\x9f\x97\x77\x80\xeb\xe7\x25\x3c\xb8\x62\xb3\x69\x1f\x7b\xec\x72\x88\x80\x25\x0f\x5c\xdf\x61\x36\xc1\x7f\x84\xe5\xf6\x15\x42\x84\x44\xd1\xa0\x05\x5f\xdc\x9e\x62\x05\x75\x0f\xe4\x71\x6f\x49\x2f\x54\x49\x14\x61\x34\xd6\xc2\x9e\xe0\x18\x83\x3b\xe6\x8b\x52\x62\x5b\xa5\x47\xc7\xae\x8e\x03\x79\x40\x61\xfa\xe6\x9e\x5c\x73\xb1\x8a\xe4\xd0\xf0\x03\xce\x82\x8c\xe0\xe6\x14\xe8\x12\x85\x4e\x25\xec\xeb\x1e\xce\xa1\x00\x46\x82\x22\x50\xcd\xae\x99\xeb\x5e\xc0\x38\x98\x6e\x80\xd0\x75\x25\x26\xd8\x9f\x41\x53\x2f\x38\x0f\x89\x48\x60\x3f\xe4\x0f\x2a\x1c\x19\x12\xf6\x64\xc3\x28\xfd\x34\x65\x34\x36\x7d\x5c\x08\xbc\x2b\x29\xc3\x80\x27\x12\x8a\x57\xb5\x2c\xcb\xf8\x53\xf8\x41\x80\xfe\x0c\xf5\x72\x0d\x1d\xda\x77\x56\x47\xb6\x7a\x1b\x2c\x09\x5b\x31\xb0\x87\x18\x2c\x71\xf5\x9e\x00\x53\x2a\x8e\xf4\xff\x1b\xa2\xbe\xc9\x29\x3f\xe1\x43\x94\xc2\x4b\xa2\x1c\xfe\x34\xae\xb8\x9b\x1b\x80\xd6\x86\x91\x34\x2b\xe4\x18\x99\x04\x9f\x60\x08\xe5\x32\x9f\x73\x28\x51\xdd\x9e\x9a\x04\x87\x48\xc8\x03\xc9\x03\xfa\xeb\xc3\x0b\x85\x44\x12\xdb\xbb\x5e\xb7\xc2\xeb\x60\x15\xea\xbf\x4b\xba\x0e\xf6\xda\x65\xae\x59\x3e\x73\x53\xf6\x29\x9b\x5c\x32\xc1\x68\xf2\x00\x99\xdc\x31\x44\x8c\x77\xa9\x14\x53\x76\xe1\x70\xb0\x94\xb8\x7f\x1e\x28\x0a\x59\xd1\x30\x7b\x28\x03\x4e\x37\x48\x7d\xc1\x44\xa6\xcb\x86\xde\xc0\xd5\x3c\xf2\xf0\x1c\x22\xb8\x10\x69\x9a\x26\x04\x0f\x79\x30\x89\x93\xc9\x4e\x2f\x60\xca\x80\x0e\x5d\x71\xe4\xf3\x45\x67\x1f\xe2\xbb\x35\x92\x06\xb2\xb6\xed\xb7\xed\x6f\x77\x4a\x1b\x51\x3a\x84\xf1\xf7\x17\xa3\xe9\xf6\x47\xdf\x2b\xfa\xef\xcf\xac\x57\x3c\x05\x6d\xd2\xd1\xe2\x79\x1a\xff\xc9\xd0\xf8\xb6\xd8\x26\xce\xc6\x0b\x43\x59\x92\x8e\x7c\xa9\x60\xc7\x12\xa6\x41\x05\x6f\xcf\x80\x7d\x4f\xdd\xb4\x2d\x4b\x8c\xbc\x67\xae\x4b\x4b\x25\x8e\x14\x07\xc4\x6b\xee\x19\x89\x3d\xcb\x01\x06\xa3\x35\x79\x20\xec\x06\xc8\xc6\xd1\xec\x8b\xc9\xb3\x70\x24\x4f\x7a\xbe\xff\xee\xa4\xaf\x58\xfa\x8a\x2c\xe5\x4b\xb4\xb7\xe4\xc2\x89\x12\xe7\x50\x86\x37\xd1\x4f\x39\x44\xd2\x93\x8a\x69\xd9\x6d\x9f\xd4\xbf\x01\x00\x00\xff\xff\x41\xf4\xd7\x5c\x1f\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x61\x6f\xdb\x38\xd2\xfe\x1c\xfe\x8a\xf9\xb6\x29\xe0\xa8\x48\x77\x3f\xe5\x7d\x7b\x80\x2f\xf5\x5e\x7c\xed\x3a\x86\xe5\xb4\x28\xea\x45\x40\x49\x23\x8b\x1b\x8a\xd4\x92\x94\x5d\xa3\xe8\x7f\x3f\xcc\x50\x92\xe5\xd4\x2d\x0a\x1c\x0e\x28\x1a\x40\xd2\x3c\x33\x9c\x79\xe6\x99\xa1\x93\xf5\x1d\xec\x64\xab\x03\x16\x9b\x2b\x34\x3b\xb8\x16\x49\x7a\x07\x8b\xe9\x1f\x33\x91\x2c\x97\xa2\x7b\x07\xf4\x6a\x73\x05\xb6\x0d\x4d\x1b\x3c\xf8\x0a\xb5\x86\xdc\xd6\xb5\x34\x85\x87\x50\xc9\x00\xda\xca\x02\x3c\xe6\x0e\x83\x87\xd2\x3a\x90\x11\x19\x94\x09\x16\x42\x85\xd1\x8a\xf1\xd3\x8f\x8b\xfb\x65\x3a\x4f\xd9\xc7\xa6\xfc\xe7\xa6\xbc\x1d\x79\xda\x94\x2b\xd8\x94\x73\x23\x6b\xdc\x94\x4b\xf8\xb4\x29\xe7\xf7\xcb\xf5\xfc\x7e\x91\x6e\xca\xe5\x9f\x22\xc9\xdc\xb7\x36\xb0\xb9\xda\x5c\x49\xef\x5b\xb2\x61\x73\xe9\xcc\x59\xeb\xf4\x0e\xde\xcc\xd2\xdb\xd5\x9c\x1f\x72\x04\xb7\x0e\x65\x40\x0f\x12\x3c\x7a\xaf\xac\x81\xd6\x2b\xb3\x85\x9d\x74\x4a\x66\x9a\xde\x98\x82\x8f\x30\xfd\x90\xc2\x13\x1e\xc0\x07\xeb\xb0\x00\x65\xf8\x29\xc7\x91\xc0\xba\x42\xe1\xd0\xb7\x3a\x90\x31\x9a\x9d\x72\xd6\xd4\x68\xc2\x18\xc8\x21\xb4\x1e\x0b\x08\x16\xb6\x68\xd0\xc9\x80\x67\xd3\xb9\x57\x5a\x0b\xce\x29\xa7\xae\xcb\x2b\xe7\x52\x46\x83\x84\x63\x5f\xf7\x89\x05\xe5\x41\xb6\xc1\x16\x18\x30\xa7\xac\x94\xce\xd6\x6c\x1c\x93\x95\xde\xcd\xde\xbd\xa3\xdc\x9c\x0b\x6c\x02\xaa\x1c\xd5\x48\x79\x68\xcd\x93\xb1\x7b\x03\xd6\x41\x6b\x7c\x83\xb9\x2a\x15\x16\x93\x0e\xcc\x57\x84\x94\xdb\xba\x91\x41\x65\x1a\x8f\xc1\xd3\x01\xb1\x56\x21\x60\x91\x74\xe5\x9d\x2f\x6c\xc0\x1b\x2a\x46\x9a\xde\x51\xfa\xe2\x57\x6a\x6b\x38\x89\xfb\x0a\x4d\x9f\x0b\x4a\x5c\x57\x03\xca\x83\xf2\xb0\x97\x07\xca\xac\xf2\x74\xbe\xa2\x45\x08\x56\x50\xa0\xca\xc8\x4c\x69\x15\x0e\x94\xc9\xe0\x64\xfe\xc4\xf1\x6b\x55\x62\x50\x35\x82\xed\xce\x13\xc1\x26\xb0\xaf\x54\x5e\x41\x8d\x92\x81\x91\x43\x91\x5b\x34\x41\xec\x6d\xab\x0b\xc0\xcf\xca\x13\x57\x0b\x2c\x95\x51\x01\xf5\x21\x61\xae\x74\xdc\x11\xc9\xba\x67\xea\x77\x98\x26\xd2\x2e\x49\x11\xbf\x6c\xb5\x86\xe9\x6a\xd1\x07\xe2\xac\xa6\xd8\x21\x5a\x26\x90\x22\x17\x66\x9a\xa6\x0f\x7f\xcc\x17\xff\x82\x29\xac\xee\xdf\xcd\x28\x49\x19\x6a\xbb\x17\xd4\x41\x05\x06\xa9\xb4\x07\x6b\xa0\xb2\x7b\x78\xdf\xd1\x3d\x42\x78\x86\xf4\x89\x48\xe6\x4b\xb1\x22\x74\x7e\xde\x04\xe2\x6f\x2d\x0f\x90\x21\x34\xe8\x4a\xeb\x6a\x4a\xb2\x0a\x95\x6d\x03\xc4\x4a\x1e\x28\xcf\x7d\x7f\x06\x0b\xbe\x91\x7b\xc3\x84\x49\xc4\x07\x2a\x87\x32\x3b\xfb\x44\x2c\xed\x4a\x30\x81\xdc\x61\x81\x26\x28\xa9\x63\xf5\xbc\x6d\x5d\xde\xb3\xac\xc0\x92\xa1\xb4\xcd\x65\xe0\xda\x5d\x62\xb2\x4d\xc4\x88\x6a\x13\xc8\xad\x29\xd5\xb6\x75\xfc\x05\x94\x4a\xa3\x9f\x80\x32\x3e\x48\x93\x23\x34\xce\xd2\xa3\x09\x60\xc8\x93\x17\xc9\xb3\x7c\xd3\x29\x64\xa0\x7c\xff\x3f\x33\x74\x52\x2a\x5f\x4d\x7c\x35\xf9\xcb\x5b\x33\xd9\x94\xf3\xbc\xf5\xc1\xd6\x9b\x72\xf9\x8f\xae\x0e\x07\xd8\x53\x1b\x45\x43\x3a\x63\xeb\x71\xd2\x07\xea\xe9\x41\xcf\x64\xd4\x9a\x80\x23\x41\xa8\xed\x46\x6d\x14\x9f\x8a\xd8\x60\x47\x2c\x22\x78\x4c\x7c\x04\xa1\x68\x36\xe5\x6a\xc2\x3a\x31\xee\x10\x86\xa3\xaf\x3b\xe9\x04\xdf\xaa\x40\x0d\xc7\x0a\x89\x3b\xa9\xdb\x98\x8e\xa3\x48\xf6\xad\x16\x9d\x26\x1d\x1c\x9d\xf3\x14\x90\x3e\xae\x65\x43\xfc\x22\x18\xe4\x33\x65\xc4\x78\xa2\x31\xc8\x3e\xdc\xd6\x63\xd9\x6a\x50\x46\xd8\x50\xa1\xa3\x44\x6f\x9d\xac\xeb\x67\x1a\xe5\x27\x5d\xb1\xc9\x81\xb1\x84\x91\xeb\xb6\x40\xf6\x23\x9d\x93\x87\xe8\xa9\x13\x32\x11\x9d\x39\xac\xed\x8e\x3b\x7d\xbe\x14\xf3\xc8\xf4\xce\xaf\x0f\x8e\xbb\xb9\x6d\x1a\xad\xb0\x80\xc2\xa2\x67\xe0\x5a\x86\xbc\x02\x6b\x86\x1e\x6d\x1c\x6e\xae\xb8\xef\x88\x4f\x6c\xed\x85\x8a\x12\x48\x4e\x94\x09\xe8\x1a\x87\x91\xfb\x20\x21\xe0\xe7\x00\x01\xeb\x46\x93\x7a\x46\xad\xde\x5a\x2d\xcd\xf6\x17\x0f\x59\xab\x74\xd8\x5c\x29\xd3\xd5\x86\x3e\x7e\xd9\x7f\x4c\x29\x6c\x64\xfe\x24\xb7\xc8\x7a\x4d\xd9\x71\x47\xa8\xde\xe3\x10\xb4\xa4\x63\xb4\xc4\x03\x15\x2a\x0a\x56\x94\x0a\x75\xe1\xa9\x9c\x9a\xe3\xe5\x6e\x4d\x60\xaa\xbd\x05\xb9\x93\x4a\x73\x75\xa9\x43\x64\x57\x3a\x87\x8d\x96\x39\xbb\x2e\x5b\x93\x47\xf6\x5b\x07\x5b\xdf\x66\xa0\xd5\x13\x8a\x0c\x2b\xb9\x53\x34\x32\x4d\x31\x98\xf5\x15\x1f\x6c\x22\x41\x65\x9e\x63\x13\x3c\x77\xaf\x6e\x91\x4d\x88\x0f\xf4\x84\x72\x14\x0e\xa2\x71\x94\xb1\x02\xfe\x9d\xde\x2f\xba\x32\xc4\x02\xad\x2d\x38\xcc\x51\xed\x10\xfe\x6a\x7d\xa4\x10\x4d\x59\xdf\x57\xe2\x38\xa7\x82\xed\x6a\xdb\x15\xa4\xcb\x3d\x43\x52\x1a\x62\xbf\x8d\x32\xc7\x22\x9a\xe1\x4d\x17\xfd\x97\x2f\x40\x07\x80\xe4\xc1\x10\x21\xbf\x7e\xdd\x94\x2b\x91\xac\x53\x21\xb5\xce\xec\xe7\xff\x13\x79\x06\xfc\x4f\x68\xd0\xa0\x4f\xfe\x4f\xc4\xef\x94\x64\x58\xc8\x1a\x2f\xd6\x87\x06\x2f\x68\x80\x78\x91\x62\xb8\xa8\x65\xf3\x29\x1e\xe9\xcf\xf8\xe7\x62\xda\x77\xc1\xf9\x81\x7b\x6c\x0a\xa9\xad\xd9\x0e\x85\x54\xae\x6b\x1b\xc1\x11\x5e\x7c\x3a\xe2\x79\xad\x72\x3c\x61\x3b\x9c\xb0\xfd\x38\x59\xc7\x2e\x33\x2c\xad\x63\x4f\x3c\xc5\x0c\xee\x7b\x07\xb7\x71\x36\x5e\x74\x0e\xd6\xfd\x74\xe8\x66\x26\x10\x91\x86\xa5\x20\x2a\x6f\xbf\x94\x75\x5d\x48\x80\x96\x95\xdd\x8b\x64\x3d\xe3\xc1\x44\xab\xc8\xdb\xd9\x47\x9e\xb1\xfd\x64\x68\x3d\x7a\x12\xfd\x5a\x1a\x0a\x69\xac\xd9\x67\x36\x96\x93\x1d\x84\x2a\x69\x9d\x74\x07\x31\xb6\x8a\xbd\x45\xae\xd2\x75\x1a\x3b\xe6\xb8\xe1\x3c\x1f\x09\xbd\xc0\xc7\x83\x68\xe9\x59\x7e\x79\x5a\x17\xbd\xec\x0f\x44\x23\xff\xfd\xb6\x75\x39\xb2\xdc\xa9\xbe\x01\x86\xed\xae\x50\xa4\xfc\x2f\xba\x7d\xa7\x8f\xf3\xc4\x7d\x4d\x74\xce\xba\x2c\x2a\xda\x5a\x0a\xea\xeb\x7e\xdc\x82\xe4\x61\xf9\xed\x42\x92\x61\x2e\x5b\x8f\xc3\x68\x1d\xcf\x07\xdf\x66\x3e\xa8\xd0\xf2\x59\xcf\x27\x95\xc8\x24\xc2\xb9\x88\x26\x7c\xcc\xf1\xb7\x07\xdb\x92\xf6\xee\x54\xc1\x7b\x40\xef\x91\x26\xf5\xa0\x8a\x22\x54\xd6\x63\x94\x6f\x9e\xc9\x58\xf4\x49\x4a\xbe\x2d\x34\x95\x85\xa6\x67\x21\x5d\xf1\x1d\xf6\x93\xce\x8c\x82\xb8\x11\xc9\x2a\x25\x29\x80\xcd\x65\xd6\xc2\xab\x4e\x22\xa7\x1f\xd2\xc7\xe9\xed\xed\x2c\x4d\x1f\xdf\xce\x3e\x3e\xce\xdf\x70\xb3\x66\x4e\x4c\x0d\x28\xb6\x2d\x15\x3a\x06\xe3\x69\x90\xe7\xe8\x3d\x2d\x72\x09\x3c\x18\xf5\x37\x2f\x65\x80\x32\xaf\xb8\xcf\x6c\x39\xca\x16\xd5\xff\x5c\x7e\x92\xf3\x51\xa4\xb3\xdb\xd5\x6c\x3d\x0a\xa6\x8f\x64\x3d\x2c\xc1\x43\xa7\x78\xb5\x35\xe0\xf0\xef\x16\x7d\xf0\xff\x83\x48\xd2\x74\x7e\xbf\x78\x5c\xdf\xbf\x9d\x2d\x48\x87\x5f\xc2\x49\x98\x0f\xab\xf9\xfa\xe3\xf0\x96\x63\x5c\xc6\xea\x76\x1b\x6d\x6c\x9d\xf3\x2e\x7f\x04\x45\x7b\x6e\xc7\x93\x42\x30\x0d\x9b\xc6\xba\x00\x1a\xb7\x32\x3f\x40\xfa\xe6\x2d\x85\xbc\xea\x44\xe0\x74\x7d\x64\x8e\x4c\x9f\xed\x9a\x90\x4b\xc3\x1a\xd8\x6f\x16\x80\x8a\x37\x01\xa6\x19\x77\xd9\x2f\xfe\xd9\x76\x76\xb9\x53\xf2\xf9\x25\xab\x6b\x43\xba\x11\x1c\xa1\xa8\x5d\x8f\x77\x8c\xd3\xd5\x38\x2a\xd6\x29\x71\x4b\xe5\x7c\x18\x54\x27\x5e\xac\x72\x99\x57\x27\xb7\xaf\x9e\x68\x51\x25\x2e\x19\x71\xb4\xb1\x8a\xd1\xe5\x70\x2f\xfd\x31\x9a\x17\x0c\xc7\xbd\x11\x4e\x94\xaa\x07\x0e\xb6\x5f\x89\x23\x91\x63\x7e\x28\x5d\x22\x97\xb4\x6c\xf1\x45\x43\x6a\x6d\xf7\x7e\x7c\x7d\xe8\xf4\x9f\x03\x2d\xba\xcb\x2d\x4d\x13\x74\x47\x65\x0b\x95\x34\x23\x54\xe1\x2c\x49\xbc\xd4\xba\xdb\x29\x09\x14\x2e\x6b\xf9\x59\xd5\x6d\x4d\xd4\xbc\x86\xca\xb6\xee\xc5\xe0\xd4\xdb\xe1\x7a\x22\xc3\xd9\xf8\x98\x1a\xc3\x4a\xcf\x34\xe7\xbb\x8e\xe4\x69\x33\x56\x00\xe5\x07\xfd\x18\x86\xd5\x89\x90\xf0\x96\x3f\x4a\x2c\xf9\x98\x74\x3b\x65\x8c\xf0\xb9\x64\x9f\xd7\x7d\xe5\xe1\x5a\xd0\x39\x26\xe0\x70\x2b\x5d\xa1\x49\x1a\x3a\x93\x01\xe2\xc8\x97\xf1\xfc\x79\xce\xba\x18\xd9\xdc\x80\x2c\x0a\x15\xba\xb4\x9f\xae\x25\x47\x20\x99\xd9\x1d\x4e\x06\x19\xed\x3a\xc6\x0f\xb6\x52\x8b\xf3\x92\xc8\x0b\x80\x32\x71\xad\x21\x27\x32\xa3\x8b\x51\x7f\x47\xfb\x8e\x44\xbe\x9f\x3e\xbc\x5b\xcf\xde\x3c\xce\x16\xef\x1f\xa9\xd3\x1e\xa7\xab\xc5\x58\x9b\xce\x5e\xf7\x62\xfd\x8a\x33\x0a\xf3\x2d\xdc\xed\xed\xfd\xc3\x62\x3d\xd2\xde\x75\x54\x5a\xdb\x9a\x00\xf3\x37\xa3\x93\x67\x87\xa3\x87\xe9\x6a\xf1\x33\xe8\x8b\xe9\x1f\xb3\x31\x2e\x75\xcf\x49\xa4\xff\x15\xfa\x72\xba\xbe\x1b\xa3\x37\x32\x54\x3f\x8d\xbe\x8a\xa2\xf5\x3b\x5d\x87\x3e\xcb\xba\xe1\x0a\x2c\x97\xb1\x0a\xa6\x1c\x7e\x81\x8a\x57\xb0\xa3\xc0\x80\x74\xe6\x46\xee\xfd\x8d\x92\xf5\xcd\xcd\xf5\xf5\xf5\xab\x57\xaf\x7e\xfd\xf5\xd7\xdf\x7e\xfb\xed\x86\xd0\x5f\xa6\x6d\x83\x8e\xae\xc5\x22\x29\xd5\xe0\x26\xae\xa9\x91\xca\x3d\x17\x4b\x4b\xad\x79\xfa\x7b\x4f\x86\xdc\x16\xc3\x3e\xaf\x0c\x7c\xf9\x92\xa4\x18\xbe\x7e\x3d\x0d\xef\x1c\x2f\x5e\xff\x74\x68\x3f\xa0\xc1\xeb\xb1\xdd\xb7\x1f\x52\x45\x5f\xff\x00\x88\x6a\xf2\xfa\xe5\x70\xf6\xff\x04\x00\x00\xff\xff\xfe\x48\x7f\x9d\xe8\x13\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8d\x41\x0a\x83\x30\x10\x45\xf7\x39\xc5\x3f\x80\x06\x7a\x84\xd6\x0a\x0a\xad\x06\xc7\x4d\x21\x1b\x8b\x11\x02\x83\x29\xce\xd8\xf3\x17\xd2\x42\xc1\xed\xbc\xf7\xe6\xdb\xb1\xc1\x7b\xda\x59\xc3\xec\x4b\x16\x9c\x8c\xa5\x06\xdd\xf9\x5e\x1b\xeb\x9c\xf9\x21\xb0\xc0\x97\xe0\x28\x2a\x98\x98\xbf\x89\x64\x97\x1e\x5d\xef\xa8\xa5\xec\xfb\xe5\xe2\x97\xea\x5f\xf9\x65\x30\xf6\xb9\x1d\xef\x51\x34\x13\x6a\x70\xad\xa9\x1a\x5a\x37\xb6\x7d\x97\x3f\xdc\x0e\x1b\x05\xd2\x1a\xf0\x0a\x1b\x38\xae\xa1\x80\x26\x88\xce\x69\x57\x6b\x3e\x01\x00\x00\xff\xff\x32\x37\x94\xc4\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\xc5\x5b\x65\xd5\x08\x7a\x84\x36\x0d\xc4\x8b\x26\xc2\xf6\xa6\x30\x1b\xd9\x1a\xd5\x02\x5b\x4a\xf5\x13\x9a\xdb\x17\x2b\x82\xb6\xbb\x81\x79\xdf\xfb\x66\xc4\x70\xc2\x4d\xe5\x25\xb1\xa6\x7d\x58\xf1\xdc\x88\xfe\x84\xf3\xcb\xfb\xb1\x11\x52\x36\x75\x85\xb0\x82\xf6\x08\xbc\xfa\x1b\x47\xf0\xb7\x8d\xc9\xba\xcf\x07\x19\x0b\xd2\x7f\x9c\x2f\xb2\x6f\xfb\x82\x91\x79\x25\x73\xf8\x85\xc9\x74\x20\xd3\x3a\xb5\x32\x19\xb9\x8d\xb4\x13\x42\x90\x91\x85\x7d\x3b\xf6\x87\xae\x95\x43\x7b\x39\x17\xbc\xab\x9e\x34\x73\x55\x20\x5e\x79\xb2\xc6\xb2\xc6\x78\xff\x53\x45\x3b\x81\x61\xe6\xed\xa2\x84\xc9\x6b\x86\x8d\xe0\xaf\xac\x16\x24\x5f\x78\x97\xd7\x91\x03\xbc\x69\x6a\x53\x9a\xd5\x16\xcd\x8b\x86\xf3\x09\x23\xd7\xb7\xb4\x28\xee\xd6\x40\x3d\xa4\x98\x94\xfb\x9f\x78\x2a\x8d\x1c\x82\x0f\x9b\x47\xdb\x78\x5d\xd4\x9d\x35\xbc\x43\x4c\xda\xe7\x24\x9a\x9f\x00\x00\x00\xff\xff\x85\x0f\x9d\xfc\x51\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\xe6\xb6\x2e\xe0\x28\x48\xda\x93\x17\x39\x78\x1d\xef\xc6\x48\x6a\x1b\x92\xd2\x22\x58\x2d\x0c\x5a\x1a\x59\x44\x29\xd2\x25\x29\xbb\xfe\xfb\xc5\x90\x92\x2c\x27\x6a\x50\x60\xb1\x37\x5b\xd2\xbc\x79\x33\xf3\xe6\x91\x61\xf2\x00\x07\x56\x0b\x8b\x79\x7a\x65\x4a\x14\x02\x6e\x82\x30\x7e\x80\xe5\xf4\xf3\x3c\x08\xd7\xeb\xa0\x79\x0b\xfe\x65\x7a\x05\xc6\x32\x6d\x0d\x30\x09\x5c\x5a\xd4\x2c\xb3\xfc\x80\xcd\xeb\x23\xb7\x25\xd8\x12\xc1\x60\xa6\xd1\x1a\x28\x94\x76\xff\x1d\x0a\x08\xc5\x72\xcc\x29\x4e\xf9\xaf\x28\xc8\xa5\x8b\x5f\x96\xab\x75\xbc\x88\x5d\xca\xb4\xf8\x23\x2d\x66\x17\x89\xd3\x22\x82\xb4\x58\x48\x56\x61\x5a\xac\xe1\xef\xb4\x58\xac\xd6\xc9\x62\xb5\x8c\xd3\x62\xfd\x4f\x10\x6e\xf5\x50\x14\xa4\x57\xe9\x15\x33\xa6\xa6\x28\x07\xc0\xb4\x1c\x8c\x8f\x1f\xe0\x7e\x1e\xcf\xa2\x85\x7b\xe8\x58\xc4\xef\xd4\x39\xaa\x0d\x1a\x57\x82\xcf\x1a\x3f\xcc\x9f\x9e\x28\x05\xca\x03\xd7\x4a\x56\x28\x2d\x1c\x98\xe6\x6c\x2b\x70\x0c\xbc\x00\x83\xf6\xf7\x40\xd9\x12\xf5\x91\x1b\x84\x1c\x0b\x22\x6a\xc0\xaa\x06\xe2\x7a\xcb\xe5\xb5\x29\xd3\x22\xfa\x10\x3a\x3e\x0d\xbf\x20\x4c\xda\x8e\xfc\xa4\x9a\x20\xde\x63\xc6\x0b\xde\x30\x2a\x6a\x21\x60\x1a\x2d\x41\x15\xee\xbf\x56\x02\x29\x8d\x8f\x0c\x21\x46\xc7\x7a\x1a\xc7\xcf\x9f\x17\xcb\xbf\x60\x0a\xd1\xea\x69\x4e\x5d\xd9\xa2\x50\xc7\x80\x46\x96\xa3\x65\x5c\x18\x50\x12\x4a\x75\x84\x2f\x4d\x53\x3d\x84\x71\x90\x26\x0c\xc2\xc5\x3a\x88\x08\xdd\x3d\xdf\x5b\xae\x24\x54\xec\x04\x5b\x84\x3d\xea\x42\xe9\x0a\x73\x27\x09\x55\x5b\x30\x8e\xe4\x89\xcb\x1d\xb0\x46\x0e\x56\x81\xd9\xb3\xa3\x84\x42\xab\x2a\x0c\xbe\x96\x48\xbd\x3e\xa8\x6f\x98\x83\x2d\xb9\x81\x23\x3b\x8d\x21\xd3\x98\xa3\xb4\x9c\x09\x03\x4c\x23\x18\x55\xeb\x0c\x73\x17\xd4\xf6\x11\x84\xca\x18\xe5\x37\x30\xc2\x70\x17\x06\xbd\x39\x8c\x21\x53\xb2\xe0\xbb\x5a\xbb\x2f\xa0\xe0\x02\xcd\x18\xb8\x34\x96\xc9\x0c\x61\xaf\x15\x3d\x1a\x03\xda\x2c\x6c\x7a\x3f\xfd\x1a\xc3\xe3\xfc\xc5\xe9\xa0\x2d\xde\x8d\x7c\x8f\xba\x62\x92\xa6\xdb\xa7\x65\xac\xd2\x4e\xd7\x3d\xad\x5b\x05\x3b\x94\xa8\x99\x45\xb0\x58\xed\x95\x66\xfa\x14\xf4\xa3\x6a\x43\xcd\xa0\x54\x71\x12\x87\x90\xd0\xac\xd0\xd4\xc2\xd2\xe3\xd7\x55\xb7\x35\x50\x6b\x14\x08\x66\x2c\xed\x56\x40\xf9\xf2\xb6\xb2\x66\xe0\x3e\xbf\x41\x63\xe8\xe1\xa8\x17\x79\xe0\x0c\x2e\xd7\x04\x73\x6e\x1b\xc9\xad\xd7\x41\xd2\xf2\xbc\x48\x5f\xd5\xc6\xd2\x4c\x6b\xe3\x6b\x54\x3a\x47\x7d\x56\x14\x30\xa7\x87\xb0\x59\xdd\xc5\x52\x59\x9c\x78\x39\x65\xac\x36\xd8\xa9\xa7\xaf\x79\x53\x6f\x8d\xe5\xb6\x76\xb5\x0e\x37\x95\x84\x13\xd8\x21\x46\x63\x57\x66\xff\xdb\x93\xaa\x69\x8e\x07\x9e\x3b\xa9\xb7\x19\x49\x8c\x52\x59\xa8\x98\xcd\xca\xc0\x96\xca\x20\x15\xc0\xbc\xec\xc8\x25\x7c\x93\xc2\xb7\x83\xa6\xb1\x90\x40\x72\xa6\xf3\xc1\xad\xf6\xde\xd6\x23\x31\x09\xc2\x28\xa6\x9d\x80\x74\xb4\xad\xe1\xb6\x59\xda\xe9\xd7\x78\x33\x9d\xcd\xe6\x71\xbc\x79\x9c\xbf\x6c\x16\xf7\x69\x11\x39\xbf\x9a\x4a\xe0\x2e\xb6\xe0\xa8\x3b\xa3\x64\x59\x86\xc6\xc0\x37\x3c\x85\xf0\x2c\xf9\xf7\xda\x15\x84\x2c\x2b\xc9\x42\x68\xc4\xe7\x6e\xd1\xfc\x87\xfa\x13\x0e\xb3\x88\xe7\xb3\x68\x9e\xf4\xc8\xb4\x4c\x92\xce\xb0\xfd\x8c\x69\x3e\x7c\x27\x41\xe3\xf7\x1a\x8d\x35\xff\x03\x93\x38\x5e\xac\x96\x9b\x64\xf5\x38\x5f\x92\x97\x5d\xc3\x05\xcd\xe7\x68\x91\xbc\x74\x6f\x1d\xc7\xb5\x9f\x6e\x0e\x47\x72\x09\xbf\x3a\xc3\x29\xdf\x83\x02\x6e\x5a\x9d\xe4\x81\x93\xe1\x7e\xaf\xb4\x05\x81\x3b\x96\x9d\x20\xbe\x7f\x24\xca\xd1\xdc\x9b\xc0\xa5\x43\x3a\x8d\x4c\x5f\xd9\x29\x64\x4c\xd2\x6e\x98\xc6\x82\x73\x40\x4e\x26\xef\x65\xe6\xb6\xec\x37\xf3\xca\x80\x46\x07\xce\x82\xe1\x35\x04\xa5\x7b\x50\xb4\xae\xe7\x33\xe6\xd2\xfd\x95\xb3\xdb\x4b\xe1\x16\x5c\x1b\xdb\xb9\x0e\x1d\x5d\x39\x64\x2c\x2b\xe9\x67\xe7\x07\x97\x27\xf2\xc8\x21\xf6\x4c\x39\xe8\x9d\xb2\x47\x66\xce\x6c\x3e\x38\xb8\xee\xdc\x3b\x3b\x55\x0b\x6c\x55\xeb\xfa\x5e\xc8\xbe\x3f\xd4\xae\x20\x63\x42\x90\xc1\x71\x03\x4c\x08\x75\x34\xcd\x1d\xa1\x0b\xdc\xa2\x27\x9a\x3b\x7a\x0c\x84\x92\x3b\xd4\x67\x67\xb3\x25\x93\x3d\xd4\x40\x2b\x21\x80\x50\xe1\xc8\x85\xf0\xa0\x30\xaa\xd8\x0f\x5e\xd5\x15\x49\xf3\x06\x4a\x55\xeb\x0f\x5d\x52\xa3\xa0\x42\x26\x29\x31\xb3\x83\xfc\x9c\x34\xba\x53\xcb\xc9\xdc\x72\xe7\x6e\x12\x8f\x17\x0e\xc0\x4d\xe7\x1f\xee\x0c\xea\xd5\xe2\xe7\xe1\x0e\xb2\x5e\x63\x29\x87\xf7\xac\x96\xe1\x6b\xcb\x1e\xf6\x7d\x6e\xe0\x26\xa0\x3a\xc6\xa0\x71\xc7\x74\x2e\xc8\x1a\x9a\x90\x0e\xe2\xac\x97\xfe\xf9\xf3\x5a\x75\x9e\xd9\x42\x02\xcb\x73\x6e\x9b\xb6\xfb\xaf\x5b\x3f\x3b\x03\xb1\xad\x3a\xe0\xb8\xb3\xd1\x66\x63\x4c\x17\xcb\x44\x30\x6c\x89\xee\xfe\xc7\x25\x35\xd1\x93\x63\x5b\x3a\xfb\xdb\x6b\xc8\x4f\x2c\xf2\xcb\xf4\xf9\x29\x99\xdf\x6f\xe6\xcb\x2f\x1b\xda\xb4\xcd\x34\x5a\xf6\xbd\x69\xf0\x46\xe3\xe7\x97\x0f\x38\xcc\x5b\xb8\xd9\x6c\xf5\xbc\x4c\x7a\xde\x9b\x78\xa7\x55\xb5\xb4\xb0\xb8\xef\x55\xbe\x3d\x9d\x33\x4c\xa3\xe5\xaf\xa0\xd3\x4d\xb9\x8f\x4b\xdb\x73\xc1\xf4\x3f\xa1\xaf\xa7\xc9\x43\x1f\x7d\xcf\x6c\xf9\xcb\xe8\x91\x37\xad\x3f\x95\x06\xfc\xc1\xaa\xbd\x9b\xc0\x7a\xed\xa7\x20\x8b\x37\x77\xfb\xd6\x60\x80\x69\x39\x61\x47\x33\xe1\xac\x9a\x4c\x6e\x6e\x6e\x6e\x6f\x6f\x3f\x7e\xfc\xf8\xe9\xd3\xa7\x09\xa1\x5f\xc7\xf5\x1e\x35\xdd\xfc\x82\xb0\xe0\x5d\x9a\xa3\xaa\x45\xde\x48\xb9\xd5\x62\xa1\x68\x35\x49\xd8\x67\x91\x6c\xd1\xdb\x86\xbd\x24\x33\xa4\x82\xbb\x5f\x26\xf2\xce\xd0\xef\xfa\x71\x6f\x3f\xa4\xf9\xdd\xbd\x03\x44\x13\xb8\xbb\xee\x2a\xfd\x37\x00\x00\xff\xff\xb9\x7c\x2c\x24\x32\x0d\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x4f\x6f\xe3\x36\x13\xc6\xcf\xe1\xa7\x98\xd3\xfb\x26\x40\xc3\x76\x81\x76\x8b\xa2\xa7\x5d\xc7\x40\x54\xac\xff\xc0\x72\xd1\x16\xd5\x1e\xc6\xe4\xc8\x26\x40\x91\x02\x87\xb2\xe3\x6f\x5f\x90\x92\x1d\xaf\xa2\xa0\x40\x0f\x06\x44\xca\xf3\x7b\x9e\x79\x38\xa2\xdc\x3e\xc3\x11\x3b\x1b\x49\xc3\x07\x21\xcb\x67\x58\x7e\x5a\xcc\x85\x5c\xaf\xc5\x65\xbb\x7a\x04\x6e\xf1\xe4\x80\x89\xd9\x78\xc7\x50\x07\xdf\x00\x93\xea\x02\xd9\x33\x70\xf4\x81\x74\x5a\x07\x8a\x9c\x19\xe5\x5f\xcb\xd5\xba\x2c\xca\xcc\xa9\xea\xcf\x55\x3d\x1b\x68\x55\xbd\x81\x7e\xa3\x7a\x74\xfd\xa2\x70\xd8\x50\x55\xaf\xe1\xef\xcb\x0b\x53\xd5\x9b\xaf\x42\xee\xc2\x7f\xa8\xad\x1e\x53\x71\x7a\x35\x5b\x3c\x55\xf5\xfa\x3d\x0b\xc5\x6c\xb5\x58\x7c\x5a\x3e\x0d\xc5\x05\x86\x3d\x4b\x29\xab\x7a\xfd\x35\xb7\xf0\x34\x2f\x67\x9b\x62\xbd\x2d\x56\xcb\x8c\x28\x6a\x70\x7e\x54\x67\x18\xda\xe0\x8f\x46\x93\xfe\x0e\xde\x68\x90\x89\x07\x0a\x7d\x76\xfc\x6a\x08\xee\x4d\x7d\x2d\x7b\x00\x1f\xc4\xf0\x0f\x74\x60\x5c\xa4\x80\x2a\x9a\x23\x01\x1f\xc8\x5a\x79\x63\x7f\xe8\x0d\x1a\x3c\xc3\x8e\xa0\x63\xd2\x10\x3d\x68\x53\xd7\x14\xc8\x45\x83\x91\x20\x1e\xe8\x46\x2a\x1f\xd4\xd8\x58\xf5\xbf\xff\x33\xf8\x93\x03\x0c\xfb\xae\x21\x17\x59\xe6\x8e\x87\xc6\x4a\x21\xb7\x17\x49\xd4\xa9\x40\x14\xaf\xb6\xec\x19\x54\x20\x8c\xc4\x59\x4a\x79\x17\xc9\x45\xf0\x35\x20\x38\x3a\xf5\xb3\x24\xa1\x24\x02\x21\x3f\x6f\x2e\xb3\xf5\x88\x5a\xc3\xfd\x87\x07\x79\x03\x57\x6d\xea\xe6\xfb\xc1\x9f\xf2\xed\x39\x69\xcd\x7c\x6b\xa6\xe0\x19\x04\xe8\x34\x30\x1e\x89\xc1\x44\x40\xbe\x15\x85\x93\x89\x87\x61\xa3\x45\xe6\x93\x0f\x7a\xc2\x88\x6a\xc7\x3e\x74\xd7\x24\x27\xe2\x8f\x60\x26\xdb\xea\xe9\xd1\x03\x47\xed\xbb\x2c\xfb\x5b\xb9\x5a\x4e\xb0\x13\x69\x4c\x27\x6d\xe2\xdb\x0c\xd3\xee\x5b\x29\x07\xf4\x62\x38\x1a\xb7\x7f\x37\xc7\x54\xf8\x46\xc2\x1d\x93\xc2\xaa\x8b\x6d\x17\xb9\x1f\x1c\x50\xbe\x69\xd0\xe9\x24\x82\x11\xac\xc7\xeb\x17\x0a\xb5\x0f\xd7\xb6\x8c\x8b\x3e\xfb\xe8\xc7\x6d\x42\xd0\x1d\xc7\x7a\x09\x96\x04\x7f\x67\xea\xa3\xb8\x8e\xf3\x90\x92\x71\xe9\xa1\x9f\x13\xf0\x01\x02\xb5\x16\x15\xbd\x13\xed\x84\x68\xb6\x3b\x56\xe5\xdb\x71\xb1\x86\x73\xac\x5f\x0c\x47\x06\xb4\xb6\xaf\xe5\x29\x18\x8f\x51\xa1\x49\xa5\x1b\x6a\x7c\x9a\xa4\x6f\x33\x9f\x22\x84\x66\x4c\xc8\x69\x25\x48\x19\x31\xc4\xe9\x6f\xb7\x1f\xc8\x9c\xed\x4d\xf0\x69\xdd\x47\x9f\x9a\x24\xfd\xef\x27\xd0\xc3\x46\x06\xba\x76\x1f\x50\x53\x3e\x86\xfe\x91\xc1\xd2\x1e\xd5\x79\x68\x03\x06\xaa\xea\x42\xba\x1c\x06\xcd\xda\x87\x06\xa7\x12\x1f\x78\x83\x4c\xf9\x0c\xf3\x3f\x8b\x2d\xcc\x56\x4f\xf3\x74\x1f\x94\x02\xad\xdd\xf9\x97\x5f\x85\xda\x81\xda\x09\x05\xf6\x9b\x9f\x14\xf3\x17\x13\x41\x79\x4d\x77\x0b\x42\x67\xdc\x5e\xfc\x70\x57\x76\x4a\x11\xb3\x14\x1f\x7f\xbc\x2b\xdc\x11\xad\xd1\x30\xfb\x52\x40\xc7\xb8\x27\xb8\x67\x22\x68\x88\xf3\x22\x25\xd3\xf8\x40\xa0\x29\xa2\xb1\xfc\x20\xc5\xc7\x9f\xee\xb6\x07\x0a\x04\x27\xcc\xf9\x76\x2e\x90\xf2\x47\x0a\xb8\xb3\x94\x26\x6e\x67\xa9\x79\xcd\x78\xe8\xcf\x58\x92\xe2\xe7\x5f\xae\x7a\x97\x9b\x00\xb8\x6b\x5b\x6b\x48\xa7\x10\xe7\xe2\x9f\x00\x00\x00\xff\xff\x38\xb7\xfe\x02\xf7\x06\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
