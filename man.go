// Code generated by go-bindata.
// sources:
// doc/man/vaulted-add.1
// doc/man/vaulted-cp.1
// doc/man/vaulted-dump.1
// doc/man/vaulted-edit.1
// doc/man/vaulted-env.1
// doc/man/vaulted-load.1
// doc/man/vaulted-ls.1
// doc/man/vaulted-passwd.1
// doc/man/vaulted-rm.1
// doc/man/vaulted-shell.1
// doc/man/vaulted-upgrade.1
// doc/man/vaulted.1
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _vaultedAdd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x3f\x00\x8d\xc4\x11\xa0\x54\x4a\x16\xa4\x56\x5d\x16\x48\xde\x0c\xf1\x18\x2c\xb5\xe3\x92\x4c\x1d\x71\x7b\x14\xb7\x20\x14\xa1\xae\xdf\x9b\x37\xfa\xf5\xbe\x41\xa6\xf3\x41\xd9\xbb\x15\x79\x8f\xfb\xaa\xb6\x0d\xba\x87\xe7\x4d\x55\x1b\x53\x5d\x19\x66\xe4\x56\x88\xa2\x3c\x50\xaf\x31\xf3\xe1\x0b\xfd\xc0\xa4\x3c\x42\x3f\x18\x7d\x12\x65\x51\xa4\x00\x82\xf0\x74\xa9\x96\x98\x7d\xed\xb6\xc6\xb6\xb6\x04\x5d\x78\x74\x61\xfd\x27\xeb\xc2\x0e\x2e\xb4\x42\x47\x76\xc1\xfc\xe3\x5c\xbe\x2c\xb5\xb7\x61\xa1\x09\x4f\x4b\xc7\x36\x78\xda\xd8\xf5\xae\x35\xfb\x76\xdb\x95\xb4\x3d\xd1\x24\x23\x48\x7e\xa7\x64\xc6\x31\x79\x46\x48\x03\xd8\x47\x8d\xf2\x7e\x63\x50\x5d\x2a\x2f\xa7\x24\xf8\x3c\x47\x9d\xed\xbb\xa2\xcf\xc6\xcf\x49\x1c\x31\x52\x66\x0f\x4d\x85\x5d\x2f\xbf\x03\x00\x00\xff\xff\xb4\x37\x77\xb9\x6c\x01\x00\x00")

func vaultedAdd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedAdd1,
		"vaulted-add.1",
	)
}

func vaultedAdd1() (*asset, error) {
	bytes, err := vaultedAdd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-add.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedCp1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x6a\xeb\x30\x10\x45\xf7\xfe\x8a\xbb\x7a\xab\xc4\xf0\x3e\x21\x4d\x0c\x31\xb4\x8e\x89\xd2\x86\x82\xa0\x28\xf6\x08\x0b\x1c\xc9\x95\x14\x9b\xfc\x7d\x91\xa2\x24\x14\xda\x2e\xda\x9d\xf1\x5c\xdd\x73\x66\xf2\xdd\x1a\xa3\x38\xf5\x9e\x5a\x3e\x6f\x06\xfc\xcf\x72\xb6\x46\xb5\x78\x2a\xb2\xbc\xae\xb3\x34\x42\x33\x80\xcf\xd1\x98\x41\x91\x83\xef\x08\x8d\xd1\x9e\xb4\x87\x91\x10\x97\x02\x08\xdd\xc2\x89\x91\x1c\x94\x87\x70\x10\xd0\x34\xa5\xd9\xa4\x7c\x97\x7e\x0c\xc2\xb9\xc9\xd8\x36\x82\xd8\x6b\xb5\xa9\x59\xc9\x22\x8c\xcb\x07\x2e\x97\x77\x24\x97\x5b\x70\x59\x9a\xbe\xe5\xb2\x0e\x5f\x9a\x26\x2e\xeb\xaf\xb2\x66\x38\x7f\x9b\x66\x6b\xac\x0a\xb6\xdc\x96\xf5\xae\xdc\x54\xf1\xf5\x32\xd9\x2b\x1d\x97\xb9\x85\x93\xad\x72\x68\x2c\x89\xd0\x6c\x2c\x2c\x0d\xbd\x68\xa8\xc5\xe1\x7c\x5b\x5b\x5a\x73\xbc\xd3\xf8\xbf\x3c\xd6\x96\x32\xd5\x05\xb7\x97\xc5\xf3\xe3\xae\x58\xbd\xd5\x0b\xc6\xf6\x9b\xed\x2a\xf8\x91\x1e\x95\x35\xfa\x18\x2a\x46\x61\x95\x38\xf4\x14\x68\x8e\xfc\x2c\x5c\x6d\x52\x7d\x8f\x03\xe1\xe4\xa8\x0d\x27\xf4\x1d\x65\xd7\x7b\x41\x1a\x7b\x47\xce\x60\x7c\x47\x76\x52\x8e\x22\xf3\x96\xba\x56\x58\x7a\x3f\x91\x0b\x2b\x8c\x4a\xc4\x88\xf7\xe7\x1f\x34\xab\x62\xff\x17\xd5\xec\x93\x44\x52\xbd\x1c\xf5\xb7\xaa\x1f\x01\x00\x00\xff\xff\xac\xf1\xb5\x97\x9b\x02\x00\x00")

func vaultedCp1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedCp1,
		"vaulted-cp.1",
	)
}

func vaultedCp1() (*asset, error) {
	bytes, err := vaultedCp1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-cp.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedDump1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcd\x41\x8a\x83\x30\x14\xc6\xf1\x7d\x4e\xf1\x5d\xc0\xc0\x1c\x61\x46\x05\x33\x30\x1a\x8c\x9b\x81\x6c\x42\xcd\xa3\x42\x93\x88\xbe\xb4\xd7\x2f\xa6\x5d\x94\x76\xf9\xf8\x78\xbf\xbf\x9c\x3a\x5c\x5d\xbe\xb0\x9f\x6d\x35\xe7\xb0\xe2\x4b\x48\xd3\xa1\xff\xfe\x6b\x85\xd4\x5a\x3c\x47\x94\xcd\x56\xb8\x6d\x0b\xfb\x1d\x7c\xf6\x38\xa5\xc8\x3e\x32\x12\xc1\x3d\x10\x70\xc2\xce\x73\xca\x0c\xb7\xe3\xd7\x0c\x7d\xc1\xcc\x7f\x3f\x68\xa3\x4c\x01\x2d\xfd\x58\xaa\x5f\x59\x4b\x23\x2c\xa9\xe8\x82\xb7\xa4\xcb\x47\xd3\x9a\x7a\x54\x7a\x52\x87\xa0\xb5\x68\x72\x58\x3f\xa2\xc7\xf9\x9e\x5d\x62\xc9\x82\xd2\x16\x1c\x4b\x71\x0f\x00\x00\xff\xff\xbe\x1d\xa8\x5d\xe0\x00\x00\x00")

func vaultedDump1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedDump1,
		"vaulted-dump.1",
	)
}

func vaultedDump1() (*asset, error) {
	bytes, err := vaultedDump1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-dump.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEdit1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xdb\x6e\xdb\x46\x10\x7d\xdf\xaf\x98\xa7\xc6\x01\x64\x16\xe9\x1f\x28\xb1\x5c\x0b\x89\x6c\x41\x54\x11\x04\xe0\xcb\x90\x3b\x14\xb7\xd9\x8b\xba\x17\x31\xfa\xfb\x62\x86\x94\x2c\x1b\x05\xfa\xba\x33\x73\xf6\x5c\x66\xb7\xda\x3f\xc1\x09\x8b\xcd\xa4\x9b\x7b\xd2\x26\xc3\x27\x55\xd5\x4f\xf0\xbc\xdc\xac\x54\xb5\xdd\xaa\xb9\x08\x52\x6b\xee\xc1\xf8\x4c\x11\xbb\x6c\x4e\x64\xcf\x72\x9a\x20\x0f\x04\x5d\xf0\x99\x7c\x86\xd0\x03\x7a\xa0\x5f\x26\x65\xe3\x0f\x13\xb6\x20\xd6\x3f\x9e\x5f\xb6\xf5\xba\x16\xd4\xa6\xff\xdc\xf4\x5f\x6e\xb1\x9b\x7e\x07\x4d\xbf\xf6\xe8\xa8\xe9\xb7\x32\xf1\xb0\xaa\xbf\xec\xd6\xdb\xfd\xfa\xe5\x59\x86\xea\x23\x8e\x3e\x31\xfc\x85\xc4\x89\xc0\x05\x4d\xd0\x87\x28\x20\x7c\xe3\xff\x91\xa9\x04\xeb\xaf\x63\xf0\xf0\x4f\x31\x99\x0b\x0b\x19\xf2\x34\x5e\x07\x4d\x82\x84\x27\xd2\x90\x83\xd4\x2e\x93\xf5\x13\xfc\xf9\xed\xe5\xf3\xf2\x9b\xaa\x76\xb5\xaa\xd6\x5b\x68\xee\xda\x02\x7f\xa8\x9a\xbd\xa9\x87\x30\xfe\xfe\x64\x34\x41\x4d\x5d\xa4\x9c\x54\xd5\x46\xb5\x0f\x87\x83\xa5\x04\xe3\x40\x79\xa0\x08\x49\x6a\x70\x42\x5b\x28\x01\x46\x02\x6d\xd2\xd1\xe2\x99\x34\xf7\x78\x38\x19\x1a\xaf\x74\x41\x53\x46\x63\x93\x32\x5e\x98\x48\x0e\x8e\x7c\xa9\x60\x3f\x30\x4d\x12\x09\xcc\xf8\x60\x43\x8b\x16\xd0\x6b\xc0\xbe\xa7\x6e\x4e\x86\x7c\x36\x91\x2e\xfe\xa8\x44\x29\x99\xe0\xa5\xcd\x24\x88\x94\x28\xb3\xcc\xc1\x68\x4d\x1e\x08\xbb\x01\xb2\x71\xf4\xaa\x7b\x6a\x0b\x47\xf2\xa4\xd9\x6a\x35\x43\x55\xaa\xda\xad\xc4\x93\xe5\xf7\x1a\xbe\xae\x7e\xbc\x37\xe5\x27\x9b\xf2\x95\xce\x62\xc3\x06\x3d\x1e\x28\xc1\xb2\xeb\x28\x25\x3e\x86\xf5\x83\xb0\x98\xcc\xba\x2d\x74\x91\x34\xd3\x46\x9b\xaa\x5b\x40\xc7\x80\x9b\xc7\xe5\x1b\xc0\xcd\xe3\x12\xee\x5c\xb1\xd9\x34\xf7\x3d\x76\x39\x44\xc0\x92\x07\x9e\xef\x30\x9b\xe0\x3f\xc2\x72\xf7\x0c\x81\x9d\x8f\x06\x2d\xf8\xe2\x5a\x8a\x15\xac\x7b\x20\x8f\xad\x25\xbd\x50\x25\x51\x84\xd1\x58\x0b\x2d\xc1\x31\x06\x77\xcc\x53\xfa\xc4\xab\x26\x77\x74\xbc\x69\x12\x10\x0a\xd3\xd7\x8d\x92\x32\x0f\xab\x48\x0e\x0d\x37\xf0\xfb\x90\xb5\x7c\x75\x51\x97\x28\x74\x2a\x61\xbf\xee\xe1\x1c\x8a\xc4\x5f\x04\xaa\xde\xd7\xb7\xba\x17\x30\x0e\xa6\x1b\x20\x74\x5d\x89\x09\xda\x33\x68\xea\x05\xe7\x2e\xd1\x14\xce\x87\xfc\x41\x85\x23\x43\x42\x4b\x36\x8c\x72\xdf\xbc\x2e\x1f\x17\x02\xef\x4a\xca\x30\xe0\x89\x84\xe2\xac\x96\x65\x19\x7f\x0a\x3f\x09\xd0\x9f\x61\xbd\xdc\x40\x87\xf6\x9d\xd5\x91\xad\xde\x05\x4b\xc2\x56\x0c\xec\x21\x06\x4b\x3c\xdd\x12\x60\x4a\xc5\x5d\x36\xf6\xbd\x21\xea\xbb\x9c\x72\x0b\x1f\xa2\x0c\x4e\xaf\xcc\xe1\x2f\xe3\x8a\xbb\xba\x01\x68\x6d\x18\x49\xb3\x42\x5e\x23\x93\xe0\x13\x0c\xa1\x4c\xf9\x9c\x43\x89\xea\xda\xca\x3b\x1e\x09\x39\x90\x3c\xa0\x9f\x1b\x27\x0a\x97\x77\x70\x7b\xd7\x75\x70\x0e\x56\xa1\xfe\xbb\xa4\x39\xd8\xf9\x96\x5b\xcd\xf2\xc1\xd5\xa5\x4d\xd9\xe4\x92\x09\x46\x93\x07\xc8\xe4\x8e\x21\x62\x7c\xb3\x95\xff\xf9\xb0\x99\xac\x68\xb8\x69\x94\x80\xd3\x15\x52\x4f\x98\xc8\x74\xd9\xd0\x2b\xb8\xba\x5d\x79\x78\x0c\x11\x5c\xe0\x9f\x61\x4a\x13\x02\x3f\x7e\x93\x78\x33\xd9\xe9\x05\x5c\x76\x40\x87\xae\x38\xf2\x79\xd2\xc9\x8f\xf3\xed\xd7\x9a\x06\xb2\xb6\xe9\x77\xcd\x6f\x6f\x94\x3e\xb0\xd2\x07\xb2\x94\xa7\x7c\x77\xe4\xc2\x89\x7f\x23\x6b\x45\xc1\xe5\xde\x94\x43\x24\x0d\xf3\xdf\x73\xf9\x05\x77\x2b\xf5\x6f\x00\x00\x00\xff\xff\xf3\x29\xcb\x6c\x38\x06\x00\x00")

func vaultedEdit1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEdit1,
		"vaulted-edit.1",
	)
}

func vaultedEdit1() (*asset, error) {
	bytes, err := vaultedEdit1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-edit.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedEnv1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdb\x38\x12\x7f\x8e\x3e\xc5\x3c\x5d\x53\xc0\x51\x91\xee\x3e\xe5\xae\x07\xf8\x12\xef\xc6\xd7\xae\x63\x58\xce\x16\xc5\x7a\x11\x50\xd2\xc8\xe6\x86\x22\xb5\x24\x65\xd7\x28\xfa\xdd\x0f\x33\xa4\x64\x39\x75\xba\x39\x1c\x0e\x28\x0a\x44\xe6\xfc\xe1\xcc\x6f\x7e\x33\xc3\x74\x79\x0b\x5b\xd1\x2a\x8f\xe5\xea\x02\xf5\x16\x2e\x93\x34\xbb\x85\xd9\xf8\x97\x49\x92\xce\xe7\x49\xfc\x0d\xe8\xa7\xd5\x05\x98\xd6\x37\xad\x77\xe0\x36\xa8\x14\x14\xa6\xae\x85\x2e\x1d\xf8\x8d\xf0\xa0\x8c\x28\xc1\x61\x61\xd1\x3b\xa8\x8c\x05\x11\x34\x83\xd4\xde\x80\xdf\x60\x90\x62\xfd\xd9\xa7\xd9\xdd\x3c\x9b\x66\x6c\x63\x55\xfd\x6b\x55\x5d\x0f\x2c\xad\xaa\x05\xac\xaa\xa9\x16\x35\xae\xaa\x39\xfc\xb6\xaa\xa6\x77\xf3\xe5\xf4\x6e\x96\xad\xaa\xf9\xef\x49\x9a\xdb\x6f\x65\x60\x75\xb1\xba\x10\xce\xb5\x24\xc3\xe2\xc2\xea\xff\x4e\x5a\x9b\xd5\x85\x43\xe7\xa4\xd1\x7f\xe5\x41\x76\x0b\x37\x93\xec\x7a\x31\xe5\x8f\x7c\x8b\x6b\x8b\xc2\xa3\x03\x01\x51\x07\xb4\x4e\xea\x35\x6c\x85\x95\x22\x57\xf4\x8b\x2e\x39\x0c\xe3\x8f\x19\x3c\xe2\x1e\x9c\x37\x16\x4b\x90\x9a\xbf\xb2\x37\x29\x2c\x37\x98\x58\x74\xad\xf2\x24\x8c\x7a\x2b\xad\xd1\x35\x6a\x3f\x54\x64\x11\x5a\x87\x25\x78\x03\x6b\xd4\x68\x85\xc7\x93\x29\xd9\x49\xa5\x12\xce\x0b\x87\x3f\xe6\x86\xf3\x21\x82\x40\xca\xbe\x2f\xbb\xe4\x80\x74\x20\x5a\x6f\x4a\xf4\x58\x50\x6c\x2a\x6b\x6a\x16\x0e\x21\xcb\x6e\x27\x1f\x3e\x50\x70\x4e\x39\x36\x02\x59\x0d\xf2\x2c\x1d\xb4\xfa\x51\x9b\x9d\x06\x63\xa1\xd5\xae\xc1\x42\x56\x12\xcb\x51\x54\xe6\x36\xa4\xa9\x30\x75\x23\xbc\xcc\x15\x1e\x9c\xa7\x0b\x62\x2d\xbd\xc7\x32\x8d\x10\x99\xce\x8c\xc7\x2b\x4a\x46\x96\xdd\x52\xf8\xc2\x29\xb9\xd6\x1c\xc4\xdd\x06\x75\x17\x0b\x0a\x5c\xcc\x01\xc5\x41\x3a\xd8\x89\x3d\x45\x56\x3a\xba\x5f\xd9\x22\x78\x93\x90\xa3\x52\x8b\x5c\x2a\xe9\xf7\x14\x49\x6f\x45\xf1\xc8\xfe\x2b\x59\xa1\x97\x35\x82\x89\xf7\x09\xca\x46\xb0\xdb\xc8\x62\x03\x35\x0a\x56\x8c\xec\x8a\x58\xa3\xf6\xc9\xce\xb4\xaa\x04\xfc\x2c\x1d\xe1\xbd\xc4\x4a\x6a\xe9\x51\xed\x53\xc6\x4a\xc4\x4e\x92\x2e\x3b\xb4\x3f\x83\xd6\x24\x8b\x41\x0a\xfa\xab\x56\x29\x18\x2f\x66\x14\x40\xb7\x31\xd6\x03\x21\xb2\x73\xcb\x1a\x45\x37\x81\xa0\x27\x85\x0c\x91\xb4\x8f\xb3\xec\xfe\x97\xe9\xec\x67\x18\xc3\xe2\xee\xc3\x84\x42\x96\xa3\x32\x3b\xae\xc9\x12\xbd\x90\xca\x81\xd1\xb0\x31\x3b\xf8\x35\x96\x40\x50\xe1\x58\xa5\x4b\x93\x74\x3a\x4f\x16\xa4\x9d\xbf\x37\x9e\xd0\x5c\x8b\x3d\xe4\x08\x0d\xda\xca\xd8\x9a\x42\x2e\xfd\xc6\xb4\x1e\x42\x5e\xf7\x14\xf5\xae\xe2\xbd\x01\xd7\x88\x9d\x66\xf8\xa4\xc9\x47\x4a\x8e\xd4\x5b\xf3\x48\x98\x8d\x09\x19\x41\x61\xb1\x44\xed\xa5\x50\x21\x97\xce\xb4\xb6\xe8\x30\x57\x62\xc5\xaa\x94\x29\x84\xe7\x4c\x9e\x63\xba\x4e\x93\x01\xf0\x46\x50\x18\x5d\xc9\x75\x6b\xf9\x04\x54\x52\xa1\x1b\x81\xd4\xce\x0b\x5d\x20\x34\xd6\xd0\xa7\x11\xa0\x2f\xd2\xd7\xe9\x93\xe8\x1f\x57\x7b\x72\x23\x5d\x28\x2e\x8a\x6c\x07\x24\xa3\x39\xd6\x58\x37\xc6\x0a\xbb\x3f\xf6\x58\x97\x21\x03\x87\x18\x85\xea\x6d\xd0\xd6\x42\x53\x61\x0c\x8f\x9f\x28\xf6\x43\x1d\x93\xcb\x28\xca\xd3\x81\x2f\x84\x3e\x0e\xbc\xa8\x3c\xda\x10\xe0\x10\xf4\x50\xba\x81\x6e\x0e\xb5\x7a\x04\xb1\x24\xd6\x16\x67\x2d\xb0\x10\xc1\x6a\x00\xa4\xbd\x69\x61\x27\xdd\x66\x80\xa8\x27\x11\x23\xf3\xc2\x13\x5e\xff\xc1\x16\x47\x95\x74\x9b\x91\xdb\x8c\xfe\x70\x46\x8f\x56\xd5\xb4\x68\x9d\x37\xf5\xaa\x9a\xff\x33\xe2\x78\x0f\x3b\xa2\xa1\x20\x48\x8a\x5b\x87\xa3\x2e\xb5\x8e\x3e\x74\x4c\x80\x4a\x91\xe2\x50\x60\x44\x5b\x03\x1a\x0a\x5f\x93\x70\xcb\x83\x2e\x22\x88\x10\xb1\xa0\x84\xbc\x59\x55\x8b\x11\x67\x66\xc8\x30\xac\x8e\x4e\xc7\xf6\x05\xae\x95\x9e\x92\xcd\x15\x81\x5b\xa1\xda\x90\xeb\x43\xa3\xea\xa8\x2a\x18\x4d\xa3\x3a\xba\xe7\xb1\x42\x3a\x5c\x8b\x86\x02\x49\x6a\x90\xef\x94\x13\x63\x10\x0d\x80\xe8\xdc\x6d\x1d\x56\xad\x02\xa9\x13\xe3\x37\x68\x09\x9a\x6b\x2b\xea\xfa\x09\xc7\xbb\x51\x2c\x0f\x32\xa0\x0d\xe9\x28\x54\x5b\x22\xdb\x11\xd6\x8a\x7d\xb0\x14\x1b\x41\x12\x8c\x59\xac\xcd\x16\x23\x7a\xa6\x21\xa5\xd1\xae\xf3\x96\xd9\xb0\x6d\x1a\x25\xb1\x84\xd2\xa0\x63\xc5\xb5\xf0\xc5\x06\x8c\xee\xc9\xa4\xb1\xb8\xba\x60\xde\xa2\x0a\x64\x69\x97\xc8\xd0\x42\xc8\x88\xd4\x1e\x6d\x63\x31\xb0\x05\x08\xf0\xf8\xd9\x73\x69\x28\xea\x3e\x01\x7c\x6b\xa3\x84\x5e\xbf\x72\x90\xb7\x52\xf9\xd5\x85\xd4\x31\x37\x74\xf8\x4d\x77\x98\x42\xd8\x88\xe2\x51\xac\x91\x2b\x86\xa2\x63\x0f\xaa\x3a\x8b\xbd\xd3\x82\xae\xd1\x12\x0e\x22\x76\x93\x4a\xa2\x2a\x1d\xa5\x53\xb1\xbf\xcc\x6f\x29\x8c\x95\x33\x20\xb6\x42\x2a\xce\x2e\x95\x97\x88\xa9\xb3\xd8\x28\x51\xb0\xe9\xaa\xd5\x45\xe0\x0b\x63\x61\xed\xda\x1c\x94\x7c\xc4\x24\xc7\x8d\xd8\x4a\x1a\x5b\x74\xd9\x8b\x75\x19\xef\x65\x02\x40\x45\x51\x60\xe3\x1d\xf3\x9d\x6a\x91\x45\x08\x0f\xf4\x85\x62\xe4\xf7\x49\x63\x29\x62\x25\xfc\x3b\xbb\x9b\xc5\x34\x84\x04\x8d\x89\x3a\x00\x3f\x8b\xba\x21\x6e\xf2\xa6\x43\xe5\x1f\xad\xf3\xfd\x7c\x30\xa4\x0e\x06\x12\xeb\x09\x79\x19\x51\xc0\x38\x0e\xa1\xe0\xfa\xd0\x5d\xc1\xd3\x62\x85\x57\x5f\xbe\x00\x5d\x02\xd2\xf1\xc7\xec\xda\x62\xe9\xe0\xeb\xd7\x57\x44\x08\xc7\xb5\x6d\xb1\xb2\xc8\xe5\x92\x64\x5e\x58\x0f\x02\x34\xee\xfa\x51\x86\x23\x4f\x1f\x9e\xe7\x42\x01\x51\x07\x4d\x54\x9f\x1b\x19\xf8\x93\x38\x24\x4b\x84\x52\xb9\xf9\xfc\xf7\xa4\xc8\x81\xff\x25\x0a\x14\xa8\x17\xfd\x9f\x26\x3f\x51\xb2\x61\x26\x6a\x3c\x5b\xee\x1b\x3c\xa3\x41\xc0\x25\xd7\x81\xcf\xce\x42\x68\xcf\x96\x5d\xb7\xec\x78\x8e\x80\xd1\x0f\x49\xa1\xf7\x74\x83\x6e\xac\x2a\x02\xac\x61\x8a\x75\x49\x17\x9c\xb3\x80\x34\x56\x47\x69\xa0\x44\x3b\xc7\xd3\x1a\xa1\x25\x0e\x03\xd2\xe8\x5e\x22\x9d\xde\x74\x3e\x4c\x6f\xfa\x43\xc7\xb2\x87\xc3\x19\x8f\x60\x9d\x40\xf8\xeb\x2f\x85\x96\xe6\x11\xf5\x41\x26\x64\xc4\xd3\xc7\x67\x44\xe1\x9c\x2f\x1e\xca\xe5\x54\xc2\x5e\x27\x19\xfa\xb3\x5a\x34\xbf\x05\xad\xbf\x47\xe5\xe3\x8e\xcc\x4e\xcf\x9d\x07\x6e\x13\xca\xe8\x75\x5f\x8f\xd2\x46\xf6\x4b\xee\xb5\x43\x7f\xf6\xdb\x41\x9f\x53\xb2\xc0\x23\xd2\x82\x23\xd2\x3a\x0c\x98\x43\x93\x39\x56\xc6\xb2\x25\x1e\xe6\x08\x78\xd1\x40\xba\x9c\xf0\x44\x45\x17\x7e\x3f\xf9\xc4\xc3\x61\x37\xc4\xb4\x0e\x1d\xbc\xbc\xfb\x0e\x87\xe7\x3e\x4a\xc9\x50\x2a\x90\x1a\x99\xca\x96\x59\xa0\xaa\xc3\x68\xfe\x74\x7a\xe9\x66\x91\x80\x38\x25\x1c\x27\x96\xc7\xcc\xb2\x1d\x0c\x13\xbd\xfd\xae\xb6\xce\x07\x92\x5b\xd9\x31\x4f\xbf\x9c\x94\x92\x5a\xee\xeb\x38\xa8\x9f\x2c\xbf\x9a\x98\x23\xef\x67\x09\x30\xb6\x24\x42\xed\xfa\x38\x95\xa6\x51\xf8\xed\x24\x9d\x63\x21\x88\x4a\xba\x00\x0e\x1b\xb3\x6b\x73\xe7\xa5\x6f\xf9\xae\xa7\x83\x4a\xe9\x4f\x4e\xe2\x6b\xc4\xd7\x1c\x9e\xa5\xe9\xa2\xb1\x66\x2b\x4b\x1e\x59\x3b\x8b\x34\x54\xf6\xed\x28\xf1\x1b\xe3\x30\xd0\x1d\x4f\x37\x58\x76\x41\x4a\xbf\x4d\x34\xa5\x85\x06\xbd\x52\xd8\xf2\x19\xbc\x52\x75\x0c\x9c\xb8\x4a\xd2\x45\x46\x1c\x0c\xab\xf3\xbc\x85\xb7\x91\xfe\xc6\x1f\xb3\x87\xf1\xf5\xf5\x24\xcb\x1e\xde\x4f\x3e\x3d\x4c\x6f\x98\x1d\x73\x9b\x8c\x35\x48\x96\xad\x24\xda\xbe\xd4\x0e\x65\x96\xc2\xbd\x96\x7f\xf2\x36\x01\x28\x8a\x0d\x57\x86\xa9\x06\xd1\xa2\xfc\x9f\x8a\x4f\x7a\xda\x8b\x6c\x72\xbd\x98\x2c\x07\xce\x74\x9e\x2c\xfb\xed\xad\xa7\x34\x27\xd7\x1a\x2c\xfe\xd9\xa2\xf3\xee\xff\xe0\x49\x96\x4d\xef\x66\x0f\xcb\xbb\xf7\x93\x19\x35\xc0\x37\x70\xe4\xe6\xfd\x62\xba\xfc\xd4\xff\xca\x3e\xce\x43\x76\xe3\x2a\x16\x87\xd1\x93\x26\xbf\xa7\x8a\x16\xb4\x88\x93\x32\x61\x18\x36\x0d\xed\x3d\x0a\xd7\xa2\xd8\x43\x76\xf3\x9e\x5c\x5e\x44\x12\x38\xde\x74\x18\x23\xe3\x27\x6b\x51\x37\x3e\xf7\x23\x1d\xa0\xe4\x11\x8c\x61\xc6\x55\xf6\xca\x3d\x59\x24\xce\xb7\x52\x3c\x7d\x23\x88\x65\xc8\x9b\x58\xaf\x8a\xca\xf5\x99\x81\x3b\xb6\x96\x63\xe0\x56\xd2\x3a\xdf\xb3\x4e\xe8\x9b\x85\x28\x36\x47\xcf\x06\x1d\xd0\x02\x4b\x9c\xb3\xc6\xc1\x72\x95\x0c\xde\x25\x76\xc2\x1d\xbc\x79\xcd\xea\xb8\x36\xfc\x11\x53\xb9\xbe\x65\x74\x4b\x44\x00\x72\x88\x0f\x85\x2b\x29\x04\x4d\xb9\xbc\x21\x0b\xa5\xcc\xce\x0d\xf7\xde\xc8\xd8\xec\x68\x19\x5f\x76\x88\xff\xd1\x1e\x98\xcd\x6f\x84\x1e\x68\x4d\xac\xa1\x5e\x2c\x94\x8a\xc3\x3c\x29\x85\xf3\x5a\x7c\x96\x75\x5b\x13\x34\x2f\x61\x63\x5a\xfb\xba\x37\xea\x4c\xbf\x57\x0b\x7f\xd2\x3f\x86\x46\xbf\x04\x31\xcc\x79\x49\x0f\x93\xca\x90\x01\xa4\xeb\xf9\xa3\x6f\x2f\x47\x44\xf2\xc9\xb4\x8c\x0b\x36\x1b\xf7\xd7\xc8\x92\x61\xc3\xa6\x48\x76\x49\x0b\x17\xf0\x84\x65\x6e\x1a\x05\x3f\xf4\x1c\xed\xe7\x09\x9b\x91\x7e\xc4\xa3\x24\x38\x73\xc5\x66\x98\x6e\x74\xd5\x3f\xa2\x85\x0d\xe6\x00\x13\xc8\xda\x06\x2d\xed\x7b\x49\x5a\xc9\x00\xeb\xf9\x3c\x89\x4b\x10\xbf\x28\x58\x74\x46\x6d\x19\xcf\xbd\x41\x61\x75\x44\x9c\xb0\xfa\x4a\xec\xdc\x95\x14\xf5\xd5\xd5\xe5\xe5\xe5\xdb\xb7\x6f\x7f\xf8\xe1\x87\x1f\x7f\xfc\xf1\x8a\xae\xf2\xa6\x57\xbf\xaa\x16\xab\xbf\x85\xab\xf3\x2e\x3e\xc0\x14\x1d\x1c\xc5\x3d\x26\x24\xe7\x69\xb7\x3a\xdd\xf2\xa4\x83\xcb\x84\x52\x38\x02\x8b\x6b\x61\x4b\x45\xac\x18\x45\x7a\x15\x87\x52\x19\xb6\xde\xa7\x05\x17\x3c\x9b\x6a\x10\x65\x29\x7d\x44\x5c\x38\xdd\x51\xf9\x41\x91\xc8\xcd\x16\x47\x7d\x76\x22\x59\xb8\x5e\x56\xa8\xe4\x74\x37\xe0\x69\x45\xea\x30\x18\x93\x11\x91\x9b\xd6\xf7\x0b\xf0\x33\xdd\xe1\xd7\xf1\xfd\x87\xe5\xe4\xe6\x61\x32\xfb\xf5\x81\x48\xe6\x61\xbc\x98\x0d\x69\xf9\xf0\x44\x33\xd8\xa5\x43\x7a\xcb\x13\xe4\xfa\xad\xba\xeb\xeb\xbb\xfb\xd9\x72\xd0\x76\x96\xa1\xc9\x98\x56\x7b\x98\xde\x0c\x6e\x9e\xef\x0f\x16\xc6\x8b\xd9\x4b\xb4\xcf\xc6\xbf\x4c\x86\x7a\xbf\x79\x3e\xfa\x9f\xb4\xcf\xc7\xcb\xdb\xa1\xf6\x46\xf8\xcd\x8b\xb5\x47\xb0\xff\x44\x2b\x78\x58\x86\x5e\x58\x34\x2f\x05\xfd\x71\x4d\x75\xd5\x14\x1e\xa4\xe3\x8e\x4c\xac\x74\xfc\x46\x9b\x23\x97\x45\xbf\x43\x4a\x0d\x5f\xbe\xa4\x19\xfa\xaf\x5f\x8f\xdd\x3b\x85\x8b\x77\x2f\x76\xed\x3b\x30\x78\x37\x94\xfb\xf6\x20\x65\xf4\xdd\x77\x14\x51\x4e\xde\xbd\x39\xdc\x3d\xbb\x85\x9f\xef\xa7\x30\x17\xce\xed\x8c\x2d\x61\x6e\x4d\xdd\x78\xc7\x77\xf9\xf9\x7e\xba\xba\xc8\x05\x4d\x14\x4d\xf7\x7b\x13\x7e\xef\xda\x26\x8f\x1b\xf9\xbe\x1f\xc5\x0f\xdd\xae\xb3\x3c\xce\xde\xcf\xc7\x59\x46\x38\xe8\xc2\xc8\x4f\x91\xc7\x73\xec\xf9\xe5\x6b\xde\xa3\x8d\x85\x9a\x46\xfb\xf8\x0e\x99\x26\xff\x09\x00\x00\xff\xff\x5c\x20\x94\x6c\x81\x18\x00\x00")

func vaultedEnv1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedEnv1,
		"vaulted-env.1",
	)
}

func vaultedEnv1() (*asset, error) {
	bytes, err := vaultedEnv1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-env.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLoad1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x5f\x6a\x03\x21\x18\x04\xf0\x77\x4f\x31\x17\x88\xd0\x23\xb4\x69\x20\x16\xea\xca\x9a\x97\x82\x2f\xb2\x7e\x12\x61\xab\x41\xbf\xdd\x5e\xbf\x54\xfb\x8f\xbc\x0d\x0c\xc3\x6f\xe4\xe5\x8c\xdd\x6f\x2b\x53\x70\x87\xb5\xf8\x80\x07\x21\xed\x19\xfa\xf1\xf5\x24\xa4\x31\xe2\xbb\x44\xef\xdc\x01\x5b\xa3\x86\x17\x3b\x69\xdc\x6a\xd9\x53\xa0\x00\x2e\x68\x1c\x52\xfe\x0a\x4b\x25\xcf\x84\x52\x51\xe9\xb6\xfa\x85\xc0\x57\xc2\x52\x32\x53\x66\x94\x08\x3f\xb8\x8e\xd8\x37\x3d\x19\xab\x6c\x87\x5c\x7c\x72\xf1\xf8\x9f\x73\x71\x86\x8b\x2a\xfb\x77\x72\xd1\xf4\xc5\xf3\xc9\x1e\x67\x65\x2e\x6a\xd2\x7d\x34\x0f\xa4\xdd\x2b\x7f\x33\x7c\x24\xbe\x8e\xc3\x3f\xfd\xef\xf1\x3d\xf9\xf1\x5c\x8a\xcf\x00\x00\x00\xff\xff\x29\xac\xab\x44\x08\x01\x00\x00")

func vaultedLoad1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLoad1,
		"vaulted-load.1",
	)
}

func vaultedLoad1() (*asset, error) {
	bytes, err := vaultedLoad1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-load.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedLs1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x41\x0a\xc2\x30\x10\x45\xf7\x39\xc5\x3f\x40\x1b\xf0\x08\x5a\x0b\x2d\x68\x1b\x3a\xdd\x08\xd9\x14\x9a\x40\x60\x68\xc4\x99\x7a\x7e\x21\x0a\x82\xb8\xfd\xef\x3d\xbe\x9d\x3b\x3c\x97\x9d\x35\xac\xbe\x66\xc1\xc1\x58\xea\x30\x1c\xaf\xad\xb1\xce\x99\x0f\x02\x0b\x7c\x0d\x4e\xa2\x82\x85\xf9\x9d\x48\x71\xe9\x36\x8c\x8e\x7a\x2a\xbe\x8f\x27\x1f\x9b\x6f\xe5\xe3\xf4\x6f\x4f\xa2\x85\x50\x87\x73\x4b\xcd\xd4\xbb\xb9\x1f\x87\x62\x5e\x7e\x3e\x2a\xe4\x2d\xe0\x1e\x1e\xe0\xb4\x85\x0a\x9a\x21\xba\xe6\x5d\xad\x79\x05\x00\x00\xff\xff\x8d\xa8\x1b\x0a\xbc\x00\x00\x00")

func vaultedLs1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedLs1,
		"vaulted-ls.1",
	)
}

func vaultedLs1() (*asset, error) {
	bytes, err := vaultedLs1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-ls.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedPasswd1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x5d\x6a\xeb\x30\x10\x85\xdf\xbd\x8a\x59\x40\x62\xb8\x4b\xc8\x4d\x0c\x31\xb4\x8e\xb0\xdc\x86\x82\xa0\x28\xd6\xa8\x16\xd8\x92\xd1\x8f\x4d\x77\x5f\x24\xbb\x69\x43\x69\x5f\xda\x57\xcd\x99\xef\x7c\x9a\xbc\x39\xc2\xc4\x43\xef\x51\xb0\xed\xc8\x9d\x9b\x05\xfc\xcb\x72\x7a\x84\x6a\x77\x5f\x64\x39\x21\xd9\x3a\x86\x75\xca\xb6\xd0\x76\x5c\xbf\xa0\x03\xdf\xe1\xf2\x6a\xac\x00\x23\x81\x2f\xa8\xb4\x4e\x9f\xaa\x13\xa1\x25\x4d\x08\x26\xff\x33\xb9\xbf\x05\x31\x59\x03\x93\xa5\xe6\x03\x32\x49\xbe\x8b\x19\xfb\x25\x48\x8f\x70\x28\xe8\xbe\x2e\x49\x53\x9e\xaa\xb4\xb8\x37\xda\xa3\xf6\xa0\x74\x72\xfa\x48\x2f\x42\xa0\x1c\x04\xed\x4d\x68\x3b\x14\x1b\x30\xba\x7f\xbd\x75\x57\x6e\xfd\x93\xc8\x13\xaf\x94\x2b\x27\xfa\x3c\xee\x1e\xee\x9a\xe2\xf0\x4c\x76\x94\x9e\x4f\xf5\x21\xfa\xa0\x9e\x94\x35\x7a\x88\xa5\x13\xb7\x8a\x5f\x7a\x8c\x14\x87\x7e\x03\xca\xc3\xac\xfa\x1e\x2e\x08\xc1\xa1\x00\x9e\x2e\x95\xb5\xc1\xda\x98\xbf\xb6\x4a\x63\x3f\xa9\x6e\xc0\xf8\x0e\xed\xac\x1c\xa6\xf2\xe0\xd0\x5e\x39\xa3\x35\xc3\x18\x8f\x12\x77\x22\xec\x1d\xf2\x83\x6f\x55\x9c\x7f\xe3\x9c\x45\xa2\xc6\xf9\xaf\x7d\xdf\x02\x00\x00\xff\xff\xf1\x83\xc8\xb9\x72\x02\x00\x00")

func vaultedPasswd1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedPasswd1,
		"vaulted-passwd.1",
	)
}

func vaultedPasswd1() (*asset, error) {
	bytes, err := vaultedPasswd1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-passwd.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedRm1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\xcd\x6a\xc4\x20\x14\x85\xf7\x79\x8a\xb3\x9a\x55\x47\xe8\x23\xb4\xd3\x81\x64\xd1\x8c\xc4\x6c\x0a\x6e\x4c\xbc\x36\x42\xa2\x53\x35\x43\xe7\xed\x4b\x1c\xa1\x3f\x94\xd9\x09\x9e\xef\x7c\xf7\xb0\xbe\xc6\x45\xad\x73\x22\x2d\xf7\x61\xc1\x63\xc5\x44\x8d\xf6\xe9\xf5\x58\x31\xce\xab\xf2\x85\xb0\x40\xee\x11\x68\xf1\x17\x8a\xa0\x4f\x1b\x93\x75\xef\x37\x32\x66\x44\xbc\xb5\x27\x2e\x1a\x91\x31\x69\x9e\xa5\x39\x7c\xc3\xd2\x74\x90\xa6\x71\x6a\x21\x69\xf8\xf6\x94\x3b\xc6\x98\x34\xfc\x9f\xb8\xa6\x99\x12\xdd\x43\x86\xf0\xd7\x90\x0f\xbb\x87\x88\x1a\x2f\x47\x71\xe8\x1a\xde\x37\xa7\x36\x5b\xbb\xb2\x26\x4d\x54\x86\x20\x9e\x69\xb4\xc6\x92\xc6\x70\xfd\x51\x25\x77\x0c\xfd\x44\xdb\xee\x84\xd1\x6b\x82\x8d\xa0\x8f\x55\xcd\x48\x3e\xf3\x6e\x5d\x06\x0a\xf0\xa6\x2a\x4d\x69\x52\x5b\x74\x9d\x35\x9c\x4f\x18\xa8\xdc\xa8\x59\x76\x37\x06\xea\x26\xc5\xa8\xdc\xef\xc4\x43\x6e\xa4\x10\x7c\xd8\x3c\xda\xc6\xf3\xac\xae\xa4\xe1\x1d\x62\xd2\x7e\x4d\xac\xfa\x0a\x00\x00\xff\xff\xe6\x20\x08\x4c\xb7\x01\x00\x00")

func vaultedRm1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedRm1,
		"vaulted-rm.1",
	)
}

func vaultedRm1() (*asset, error) {
	bytes, err := vaultedRm1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-rm.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedShell1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x6f\xe3\xb0\x11\xbd\xeb\x57\xcc\xa9\x75\x00\x47\x41\xb2\x7b\x72\x91\x83\x9b\xb8\x1b\x23\x59\x47\xb0\x9c\x5d\x04\x55\x11\xd0\xd2\xc8\x22\x96\x22\xb5\x24\x65\xad\xff\x7d\x31\xa4\xbe\x9c\x38\x69\x8a\xa2\xb7\x44\x12\x67\x86\xef\xbd\x79\x33\x0e\x37\x77\xb0\x67\xb5\xb0\x98\x25\xe7\xa6\x40\x21\xe0\x32\x08\xe3\x3b\x58\xcd\xbf\x2f\x82\x30\x8a\x82\xf6\x2d\xf8\x97\xc9\x39\x18\xcb\xb4\x35\xc0\x24\x70\x69\x51\xb3\xd4\xf2\x3d\xb6\xaf\x1b\x6e\x0b\xb0\x05\x82\xc1\x54\xa3\x35\x90\x2b\xed\xfe\x77\x51\x40\x28\x96\x61\x46\xe7\x94\xff\x8a\x0e\xb9\x74\xf1\xf3\xea\x31\x8a\x97\xb1\x4b\x99\xe4\x7f\x4f\xf2\x9b\xa3\xc4\x49\xbe\x86\x24\x5f\x4a\x56\x62\x92\x47\xf0\xcf\x24\x5f\x3e\x46\x9b\xe5\xe3\x2a\x4e\xf2\xe8\x5f\x41\xb8\xd5\xa7\x4e\x41\x72\x9e\x9c\x33\x63\x6a\x3a\xe5\x02\x30\x2d\xff\xdb\xf3\x52\x25\xe7\x06\x8d\xe1\x4a\xfe\xa7\x2a\xe2\x3b\xb8\x5d\xc4\x37\xeb\xa5\x7b\xe8\xee\x12\x7f\x80\xd6\xa4\x36\x68\x1c\x10\x3e\x77\x7c\xb7\x78\x78\xa0\x1c\x28\xf7\x5c\x2b\x59\xa2\xb4\xb0\x67\x9a\xb3\xad\xc0\x29\xf0\x1c\x0c\xda\xbf\x05\xca\x16\xa8\x1b\x6e\x10\x32\xcc\xa9\x5c\x03\x56\xb5\x21\x2e\xb6\x5c\x5e\x98\x22\xc9\xd7\x67\xa1\xab\xa7\xad\x2f\x08\x37\x1d\xae\xef\x60\x12\xc4\x15\xa6\x3c\xe7\x6d\x45\x79\x2d\x04\xcc\xd7\x2b\x68\x09\xd4\x4a\x20\xd0\xc5\x41\xe5\xc3\x03\xab\xc0\x87\x0a\x21\x46\xa4\x04\xf3\x38\x7e\xfa\xbe\x5c\x7d\x83\x39\xac\x1f\x1f\x16\x04\xd3\x16\x85\x6a\x9c\x12\x32\xb4\x8c\x0b\x03\x4a\x42\xa1\x1a\xf8\xd1\x62\xed\x43\x18\x17\xd2\x84\x41\xb8\x8c\x82\x35\x45\x77\xcf\x2b\xcb\x95\x84\x92\x1d\x60\x8b\x50\xa1\xce\x95\x2e\x31\x73\x4a\x53\xb5\x05\xe3\xaa\x3e\x70\xb9\x03\xd6\xaa\xcc\x2a\x30\x15\x6b\x24\xe4\x5a\x95\x61\xf0\xb3\x40\x02\x7f\xaf\x7e\x61\x06\xb6\xe0\x06\x1a\x76\x98\x42\xaa\x31\x43\x69\x39\x13\x06\x98\x46\x30\xaa\xd6\x29\x66\xee\x50\x07\x2c\x08\x95\x32\xca\x6f\x60\x82\xe1\x2e\x0c\x46\xc4\x4c\x21\x55\x32\xe7\xbb\x5a\xbb\x2f\x20\xe7\x02\xcd\x14\xb8\x34\x96\xc9\x14\xa1\xd2\x8a\x1e\x4d\x01\x6d\x1a\x12\x19\x47\x04\x1c\x8b\x2a\xb8\xe5\x86\x38\xf6\xd0\xef\x50\x62\x1b\x94\xb0\xc6\xb2\x52\x9a\xe9\xc3\x71\xc5\x32\xf3\x0c\x0c\x18\x85\xb0\x29\x30\xa8\x50\x97\x4c\x92\x70\xc6\x9f\x1b\xab\xb4\x6b\xbc\x51\x33\xd2\xa5\x6b\xe3\x9e\x1a\x8b\x2c\x3b\x0d\x7c\xca\xe4\x31\xf0\x2c\xb7\xa8\x3d\xc0\x1e\x74\xaf\xe5\xda\xd0\x7f\x83\x96\x8f\x54\x16\xa4\xaa\x2c\xa9\xe4\xde\x1f\x9c\xb2\x46\x42\x3a\xa8\x1a\x1a\x6e\x8a\x91\xa2\x5e\x21\xa6\x31\xd7\xe8\x94\xed\x7b\x0a\x18\x48\x6c\xa0\x05\xd1\x47\xa6\x07\xef\xe3\xc5\xa0\x8d\x81\x19\xe0\x9f\x8a\x7b\x8c\x7d\x9b\xcc\x7f\xc6\x70\xbf\x78\x76\x2d\xdb\xc9\xd2\x75\xe7\xe7\xf1\xb4\xaa\x63\x0e\x87\x22\x82\xf1\x29\x8f\x11\xa5\x8a\x37\xb1\xa3\x0b\x34\x9a\x5a\x58\x7a\xfc\x5a\x8f\x9d\xba\x48\xb4\x0a\x04\x33\x96\x5a\x28\xa0\x7c\x59\x3d\x92\x47\x9f\xbf\x43\x62\x32\x3a\xb9\xe7\x0c\x8e\x7d\x0d\x33\x6e\x5b\x77\x88\xa2\x60\x73\x12\xac\xb2\x36\x96\x48\x6f\xd5\x01\x4a\x67\xa8\x07\x66\x08\x48\x25\x30\x6c\xbd\x7a\xb9\x52\x16\x67\xbe\xd1\x53\x56\x1b\xec\xfb\x7a\x6c\x4f\xa6\xde\x1a\xcb\x6d\xed\xee\x7a\x1a\x54\xa2\x30\x38\x49\xdf\xd4\x5d\x73\xfc\x2d\xe9\xa5\xd2\x6a\xcf\x33\x67\x42\x5d\x46\xb2\x09\xa9\x2c\x94\xcc\xa6\x45\x60\x0b\x65\x90\x2e\xc0\xbc\x5e\xc9\xd6\x3d\x48\xe1\x5b\xa2\x89\x16\x6a\xdd\x8c\xe9\xec\xa4\x01\xfb\x61\x36\x2a\x62\x16\x84\xeb\x98\x9a\x06\x92\xc9\xb6\x86\xab\x56\xac\xf3\x9f\xf1\xcb\xfc\xe6\x66\x11\xc7\x2f\xf7\x8b\xe7\x97\xe5\x2d\x49\x96\x06\xcc\x5c\x02\x77\x67\x73\x8e\xba\x9f\x8c\x2c\x4d\xd1\x18\xf8\x85\x87\x10\x9e\x24\xff\x5d\xbb\x0b\x21\x4b\x0b\x72\x7b\xa2\x78\x40\x8b\xf8\x3f\x85\x4f\x78\xba\x8a\x78\x71\xb3\x5e\x6c\x46\xc5\x74\x95\x6c\xfa\x09\xed\x39\x26\x7e\xf8\x4e\x82\xc6\xdf\x35\x1a\x6b\xfe\x0f\x95\xc4\xf1\xf2\x71\xf5\xb2\x79\xbc\x5f\xac\x68\xec\x5c\xc0\x51\x99\x4f\xeb\xe5\xe6\xb9\x7f\xeb\x6a\x8c\x3c\xbb\x19\x34\xe4\xdf\xad\xbd\x9c\x4c\xf9\x51\x28\xe0\xa6\xd3\x49\x16\x38\x19\x56\x95\xd2\x16\x04\xee\x58\x7a\x80\xf8\xf6\x9e\x4a\x5e\x2f\xbc\x09\x1c\xcf\x2e\xa7\x91\xf9\xab\x41\xd7\x19\xa2\x69\xa7\x65\x06\xc8\x69\x1e\x7b\x99\xb9\x2e\xfb\xab\x79\x35\x1a\x26\x7b\xce\x82\xd3\x6d\x48\xe3\x75\x08\x45\xed\xfa\x8e\x85\x82\xaa\xec\x1b\xe1\xe6\x5c\x1b\xdb\xbb\x8e\x77\xb9\x94\xa5\x05\xfd\xd9\xfb\xc1\xf1\x0a\x36\x71\x11\x47\xe3\x32\x18\x2d\x34\x0d\x33\x43\x35\x67\x2e\x5c\xbf\xa2\x0c\x4e\xd5\x05\xb6\xaa\x1b\x0b\x5e\xc8\x1e\x1f\x82\x2b\x48\x99\x10\x64\x70\xdc\x00\x13\x42\x35\xa6\x5d\x0a\xfb\x83\x5b\xf4\x85\x66\xae\x3c\x06\x42\xc9\x1d\xea\xc1\xd9\x6c\xc1\xe4\x28\x6a\xa0\x95\x10\x40\x51\xa1\xe1\x42\xf8\xa0\x30\x29\xd9\x1f\x5e\xd6\x25\x49\xf3\x12\x0a\x55\xeb\xb3\x3e\xa9\x51\x50\x22\x93\x94\x98\xd9\x93\xf5\x39\x69\xf4\x63\xcd\xc9\xdc\x72\xe7\x6e\x34\x46\xc6\x0e\xc0\x4d\xef\x1f\x6e\x3b\x18\xdd\xc5\xf3\xf1\xac\x6a\xa7\x0b\x97\xb6\xdd\x48\x5a\x97\xf4\x3b\x13\x21\xd9\x91\xe6\x2f\x60\x49\xcb\x96\x24\x99\x6a\x74\x23\x63\xbc\x74\xb9\x34\xdc\x4e\x41\xf0\x5f\xb4\x9a\xcc\x5c\x1a\x67\x37\x32\x7f\xb3\x92\x77\x32\x81\xb8\xae\x50\xd3\x04\x0f\xc2\x9c\x7b\x59\x47\x51\xd0\x14\x3c\x2d\xa0\x51\xb5\xc8\x88\x45\x25\xf6\x4e\xcf\x7d\x42\xa6\x65\xab\x38\xa6\xe5\x8c\x35\x66\xc6\x59\x39\x9b\x5d\x5e\x5e\x5e\x5d\x5d\x7d\xf9\xf2\xe5\xeb\xd7\xaf\x33\xba\xca\x45\x1f\x3e\xc9\xd7\xc9\x5f\xfc\xd5\xdd\x76\x35\xd2\x14\x7d\xe8\xed\xba\x23\xe7\xf5\xb4\x3a\x3d\xf2\xb8\x81\xcb\x80\x28\x9c\x82\xc6\x1d\xd3\x99\x20\x57\x6c\x8f\xf4\x21\x86\x56\x19\x8f\xde\xd7\x0d\xe7\x2b\x5b\x4a\x60\x59\xc6\x6d\xab\x38\xff\x75\x67\xe5\x43\x20\xb6\x55\x7b\x9c\xf6\xec\xb4\x66\x61\xfa\xb3\x4c\x04\xa7\xa7\x81\xdb\x38\xb8\x24\xfd\xf8\xe2\xd8\x96\x16\xd2\x6e\xa5\x79\x67\x3a\xfc\x98\x3f\x3d\x6c\x16\xb7\x2f\x8b\xd5\x8f\x17\x32\x99\x97\xf9\x7a\x35\xb6\xe5\x61\xef\x1e\x6d\x47\x9e\xde\xec\x84\xb9\xbe\x0d\x77\x73\xf3\xf8\xb4\xda\x8c\xc6\xce\xc6\x0f\x19\x55\x4b\x0b\xcb\xdb\xd1\xcd\xb7\x87\x21\xc3\x7c\xbd\xfa\x4c\x74\xfa\x55\x38\x8e\xfb\xe6\x07\xc1\xff\x14\x3d\x9a\x6f\xee\xc6\xd1\x2b\x66\x8b\x4f\x47\x6f\xc5\xfe\x0f\xa5\x01\xff\xb0\xb2\x72\x0c\x7c\xa6\x69\x3e\x2b\xfa\xe3\x9e\xea\xba\x89\x3c\xb5\xd5\x62\xae\xc8\x95\x48\xd8\x83\x48\xb6\xe8\x1d\xd3\x1e\x17\x73\x4a\x05\xd7\x9f\x2e\xe4\x03\xd2\xaf\xc7\xe7\xde\x7e\x48\xfc\x5d\x7f\x10\x88\x18\xb8\xbe\x18\x6e\x1a\xdf\xc1\xb7\xa7\x25\x44\xcc\x98\x46\xe9\x0c\x22\xad\xca\xca\x1a\x77\x97\x6f\x4f\xcb\xe4\x7c\xcb\x68\x7f\xa8\xba\xf7\x95\x7f\xdf\x0d\x49\xb7\x5c\x6c\x0f\x74\x7f\x7b\xfc\xf3\xa0\xcb\x3c\x8f\xef\xa3\x79\x1c\x13\xeb\x1d\x68\xee\xa7\xe4\xf1\xd6\x3a\xb9\x3c\xa3\x11\x48\xa3\xa2\x54\x1a\xbb\xdf\x91\x61\xf0\xef\x00\x00\x00\xff\xff\x91\x93\x4c\x73\xbf\x10\x00\x00")

func vaultedShell1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedShell1,
		"vaulted-shell.1",
	)
}

func vaultedShell1() (*asset, error) {
	bytes, err := vaultedShell1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-shell.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaultedUpgrade1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xf7\x9c\x62\x2e\x10\xa4\x1e\xa1\x4d\x23\xc5\x8b\x3a\x96\xf1\xa6\x12\x9b\x89\x67\x88\x23\xd9\x90\xf2\x93\xb6\xb7\xaf\xc0\xa1\x0b\x2f\xb2\x43\xbc\xf7\xbe\x4f\x20\x87\x23\xdc\x31\xcd\x91\x49\xef\xd2\xed\xe2\x91\x18\x5e\x84\x54\x47\x68\x5f\x3f\x0e\x42\x76\x9d\x78\xe4\x50\x63\xbd\xab\xc7\x00\x33\x5f\x70\xfc\x5d\x11\x01\xa2\x83\x38\x31\x8c\xc9\x7b\xb6\x71\xbd\x05\xe3\xfc\x82\xb1\x20\xd5\x67\x7b\xea\x54\xa3\x0a\x56\x9b\x37\x6d\xf6\x1b\xb8\x36\x7d\x69\xbe\x1f\xd4\xbe\x6f\xba\xa1\x39\xb5\xa5\xdc\x33\xd2\xd6\x86\x96\x60\x74\xf6\xce\x3e\xab\x27\x5e\x9e\xf9\x25\x0c\x13\x43\xc0\x85\xc5\x0d\x43\xf8\x76\x9e\xe0\x1a\x20\x05\xa6\xdc\x58\x77\x2b\x8c\xe9\x61\x90\x45\x9d\x77\xfc\x73\x8d\x30\x3a\xe2\xbc\xe1\xaf\x84\x73\x75\xd9\xb4\x9c\xd9\x83\x33\xff\x7f\x30\x61\xae\xa6\x99\xc0\xba\x08\x67\xae\x4f\x23\x29\xfe\x02\x00\x00\xff\xff\x93\xa5\x62\x52\x6e\x01\x00\x00")

func vaultedUpgrade1Bytes() ([]byte, error) {
	return bindataRead(
		_vaultedUpgrade1,
		"vaulted-upgrade.1",
	)
}

func vaultedUpgrade1() (*asset, error) {
	bytes, err := vaultedUpgrade1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted-upgrade.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _vaulted1 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x61\x6f\xdb\x38\x12\xfd\x1c\xfe\x8a\xb9\x1c\x70\x8d\x81\x44\x49\x81\xbb\x1e\xda\x03\x0e\x70\x13\xdf\xd5\xbb\x4d\x2c\x58\x49\x77\x17\xab\xa2\xa0\xa5\x91\x4c\x94\x22\xb5\x1c\xca\x8e\xff\xfd\x62\x48\x49\x71\x1c\x07\xbb\xd8\x00\x01\x2c\x92\xf3\xde\xcc\xf0\xcd\x0c\x93\xfb\x4f\xb0\x91\x9d\xf6\x58\xc2\x5b\x91\x64\x9f\xe0\x6e\x7a\x3b\x13\x49\x9a\x8a\x61\x39\xbf\x00\x6a\xe5\xd6\x00\x21\x91\xb2\x86\xa0\x72\xb6\x01\xc2\xa2\x73\xa8\x77\x40\xde\x3a\x2c\xf9\xdb\xa1\xa7\x80\x91\xfd\x72\xb7\x48\xb3\x79\x16\x70\xf2\xea\x63\x5e\x5d\xf7\x68\x79\xb5\x84\xb8\x90\x5f\x98\xf8\x31\x37\xb2\xc1\xbc\x4a\xe1\xd7\x61\x43\xe5\xd5\xf2\xab\x48\x56\xee\x2f\xd8\xe6\x17\x6c\xcc\x5b\xd7\xb7\x37\x79\x95\xbe\xe6\xc2\xfc\x7a\x71\x7b\x3b\xbd\xbb\xe9\x8d\xe7\xd2\xd5\x94\x24\x49\x5e\xa5\x5f\x43\x08\x37\xb3\xec\x7a\x39\x4f\xef\xe7\x8b\xbb\x00\x31\xaf\xc0\xd8\x03\x3b\x45\xd0\x3a\xbb\x51\x25\x96\xe7\xf0\x82\x03\x95\x5f\xa3\x8b\xb9\xa3\x27\x87\xe0\x4c\x55\xa3\xd9\x04\xac\x13\xfd\x09\x69\x40\x19\x8f\x4e\x16\x5e\x6d\x10\x68\x8d\x5a\x27\x7b\xee\xf7\xb1\x41\x23\x77\xb0\x42\xe8\x08\x4b\xf0\x16\x4a\x55\x55\xe8\xd0\x78\x25\x3d\x82\x5f\xe3\x1e\x55\xb8\xa8\x43\xc7\xf2\x7f\xbc\x21\xb0\x5b\x03\xd2\xd5\x5d\x83\xc6\x53\x12\x22\xee\x03\xcb\x44\x72\x3f\x50\xca\x32\x44\x72\xd9\x63\x14\x0e\xa5\xc7\xfd\x15\x83\xdb\xbc\x5a\x8a\xf9\x93\xdf\x7a\x07\xf1\x18\x05\x5f\x0a\x6b\x3c\x1a\x0f\xb6\x02\x09\x06\xb7\x51\x6c\x09\x64\x88\x20\x92\x8f\xcb\x41\x7c\x17\xb2\x2c\xe1\xec\xed\x24\xd9\x63\x2f\xda\x67\xe4\xb6\xdd\x31\xd7\xb5\x6d\xd5\x31\xf0\x00\x04\xd2\x94\x40\x72\x83\x04\xca\x83\xa4\x7d\x52\xd8\x2a\xbf\xee\x17\x5a\x49\xb4\xb5\xae\x3c\xe2\x48\xd1\x1e\xfa\x51\x76\x0d\x7b\x22\x7e\x72\xea\x68\x58\x11\xdd\x5b\x20\x5f\xda\x2e\xd0\xfe\x90\x2d\xee\x8e\x60\x33\xd2\x21\x3a\x96\xca\xbf\xcc\x21\xaf\xbe\xa4\x32\x80\x8f\x8a\xbc\x32\xf5\xab\x79\x64\xc3\x17\x14\x66\xc3\x0c\x8b\xce\xb7\x9d\xa7\xa8\x2c\x28\x6c\xd3\x48\x53\x32\x89\xf4\xa0\xad\x1c\x4b\x18\x2a\xeb\xc6\xb0\x94\xf1\x36\xf8\x11\xf5\x78\x84\xd0\x6c\x0e\xf9\x18\x8c\x09\x1f\x08\x63\x2a\x46\xbd\xf7\x59\x52\x86\x7f\x44\x9d\x80\x75\xe0\xb0\xd5\xb2\xc0\x57\x52\x7b\x84\x34\xb8\x7b\xc8\x4a\xfb\x72\xd1\x8a\x42\x5a\x3f\x2b\xf2\x04\x52\xeb\x68\x4b\xc7\xc0\xe8\x10\x2a\xc8\xe3\x99\xf4\x07\xc1\x04\x05\xae\xa5\xa9\x7b\x21\x0c\xeb\x31\x67\x7f\xe2\x7e\x22\xf4\x21\xa1\x6b\xf6\xc9\x4a\xd4\xf8\xbc\xce\x1c\x36\x76\xc3\x2b\x62\x19\x7e\xd1\x01\xd1\xb1\xb0\x5c\x73\xc8\x12\xae\x90\x41\x32\x2f\x9d\x3f\xde\x71\x62\x95\x84\x0b\xdf\x53\x03\x7f\x47\x3d\x70\xe6\xb1\xfc\x63\x59\x44\xb0\x03\x07\xba\xb6\x76\xb2\x0c\x71\x3c\xc4\x9f\x04\x1a\x6b\x59\xec\xfa\x30\xa0\x47\x2d\x3a\xc7\x2d\xad\xe7\xac\xac\x6b\xe4\xb1\x64\xf6\x78\x3d\x4d\xf6\x09\x66\x3f\xcf\xef\xe1\x7a\x71\x33\xe3\x2e\x96\x09\xa9\xf5\xca\x3e\xfe\x47\x14\x2b\x28\x56\xa2\x00\xfd\xe2\x3f\x11\xb3\x47\xe5\xa1\xb0\x25\x9e\xdc\xa2\x34\xca\xd4\xe2\xea\x24\xeb\x8a\x02\x89\x12\xf1\xee\x9f\x27\x73\xb3\x91\x5a\x95\x70\xfd\x79\x0e\x1d\xc9\x1a\xe1\x8c\x10\xa1\x41\x0a\x1f\x9c\x9d\xc6\x3a\x84\x12\xbd\x54\x9a\x26\x89\x78\xf7\xaf\x93\xfb\x35\x3a\x84\xad\x0c\x39\xee\x8c\xc3\xc2\x6e\xd0\xc9\x95\x46\x2e\x85\x95\xc6\xe6\x29\xcf\x7d\x8c\x4a\x63\x22\xde\xbd\x3f\x99\x82\xc3\xdf\x3a\x15\x47\xaa\xdb\xa8\x02\xe3\x9c\x41\x42\xe3\xf5\x0e\x3a\x23\x37\x52\xe9\x80\x75\x86\x49\x9d\x80\xa4\xef\xac\xaa\x49\x22\xfe\xfd\x7e\x74\x77\x14\x26\x75\x6d\xab\x15\x96\x7c\x0f\xb3\x90\xa4\xff\x3f\xcc\x21\x1d\xb6\x53\x67\x9b\x96\xc7\x76\x9a\x8a\xa9\xf6\x6b\xdb\xd5\x6b\xf8\xd2\x8f\x7e\xef\x42\xab\xb5\xd0\xc8\xef\x08\xd4\x39\x84\x9d\xed\xa0\x90\x06\x1c\x96\xca\x61\xe1\x7b\x81\x86\xa2\x66\xc5\x72\x03\xae\x9c\x42\x53\xd2\xb9\x20\xdb\xa0\x57\x4d\xec\xc6\x8a\x80\xbc\xd2\x9a\x63\xa9\xfa\x64\x78\xcb\x73\x0c\x24\xfb\x94\x5f\xac\x24\xcf\xb4\xd1\xf3\x36\xb8\x96\xc0\xff\x82\x00\x15\x09\x87\x92\xac\x39\x1f\xdd\x63\x3f\x56\xa1\x63\x54\xaa\xee\x5c\x6c\x2f\x01\xcf\x0c\x49\x01\xd5\xb4\x1a\x79\xca\x49\xaf\xac\x49\x06\xdb\x37\x24\xc6\x13\xc6\x63\xed\xc2\x36\xfb\xe8\x9d\xaa\x6b\x64\xb0\xed\x1a\x4d\x3f\x50\x39\xc4\x2f\xd3\x87\xcf\xf7\xb3\x9b\x6f\xd3\xec\xc7\x74\x9a\x65\x1c\xec\x46\x3a\x15\xe2\xe0\xd8\xd0\xc7\x69\x9d\x5a\x65\x42\x65\xbe\x6a\xe6\x6d\x6c\x15\x58\x74\x3e\x98\xf3\xe5\xc7\x3e\x3c\xba\x4b\x63\x04\x5b\xa5\xb5\x28\x24\xc7\x35\xde\x4b\x0c\x33\x22\xc4\xb6\x19\x20\xa8\xc5\x42\x55\x2a\x9e\x88\xe9\x0b\x9b\x1d\xa1\x63\xa5\x8a\x21\xb7\x94\xc0\x7d\x30\x72\xe4\xa1\x95\x4e\x36\xe8\xd1\x3d\x6b\xd3\x6c\xb7\xe7\x62\x7c\xeb\x04\x40\x7c\xf4\x82\x93\x66\xfa\x93\x2b\xee\x02\xfc\xa0\xe8\xad\x98\x2d\xe2\x1f\xbf\x04\x3e\x64\x60\x3b\x4e\xd3\xd1\x2b\x06\x18\xe5\x64\x3b\x3f\xe8\xc9\xa1\xef\x1c\xbf\x90\x80\x62\x61\x86\x7a\x85\xb3\xab\x49\x02\x73\x1e\x13\x95\x54\x9a\xc5\x19\x97\x8d\x35\xf9\xc5\xd5\x44\x28\xea\x2d\xf9\x79\xf6\xac\x59\x2b\xd3\x76\x41\x90\x72\x65\x9d\x0f\xb5\x91\xa6\x62\xc8\xae\x8a\x9a\x18\xc2\x1b\xf4\xc1\x1d\x51\x36\x1a\x89\xf4\x2e\x56\xef\xd8\x83\xfb\x38\xc5\xf3\x38\xa9\xaf\xcf\x3e\x24\x5a\xe7\x17\xfd\xc1\xbc\x5a\x4e\x22\xe7\xc2\x40\x23\x8b\x45\x76\xce\xc1\x05\x73\x98\xb6\xad\xc6\xac\x70\xaa\xf5\xaf\x25\xb0\x17\x3e\x3f\x01\x3f\x04\x98\x64\x99\x89\xc4\x54\xe2\xef\x7f\xbb\xec\xc8\x5d\xae\x94\xb9\xe4\xb9\x6c\x49\x52\x00\x12\xc2\x1a\x70\x5d\x78\xf3\x6d\x04\x00\x80\xaa\x40\xa3\xa9\xfd\x3a\x0c\x5a\x57\x6f\xe0\xbf\x70\x15\x6e\x26\x6c\xf3\x1f\xa1\x1f\xdb\x1c\xe7\xc1\x63\x03\x6f\x87\xe3\xe1\x14\x6a\xc2\xd7\x8e\x9f\x0e\x2d\xe6\xc3\x69\x3c\x6b\x4a\x50\x95\x10\xc3\xd1\xca\x59\xe3\x1b\x4b\xfe\x9b\xe4\x06\x55\xf4\xd2\xb0\xc0\x4f\x7a\x66\x39\x53\xa6\xb2\xa1\xbf\x9e\xb5\x92\x7b\xa5\x7d\xb2\x81\x3d\x9b\xc9\x24\x60\x7a\x9e\x37\xfb\x50\x47\x09\x46\x6f\x4b\x45\xad\x96\x3b\x28\x95\xd4\xb6\x1e\x1d\x8f\x5d\x59\x79\x8d\x70\xda\xeb\xe1\x34\x2e\xaa\x22\x24\xbe\x0b\xd8\x61\x65\xad\xca\x12\x0d\x48\x43\x5b\x74\x50\x62\xd5\xbf\x40\xc3\xe7\xe9\xa9\x18\xb9\xb8\x62\x46\x29\x72\x68\x0e\xa9\xd3\x7e\x4c\x0b\xbb\x2e\xf8\x87\xeb\x8c\x48\x2a\x25\x92\xe5\x4c\xfc\x1e\x00\x00\xff\xff\xdf\x2d\x50\x03\x9a\x0d\x00\x00")

func vaulted1Bytes() ([]byte, error) {
	return bindataRead(
		_vaulted1,
		"vaulted.1",
	)
}

func vaulted1() (*asset, error) {
	bytes, err := vaulted1Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "vaulted.1", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"vaulted-add.1":     vaultedAdd1,
	"vaulted-cp.1":      vaultedCp1,
	"vaulted-dump.1":    vaultedDump1,
	"vaulted-edit.1":    vaultedEdit1,
	"vaulted-env.1":     vaultedEnv1,
	"vaulted-load.1":    vaultedLoad1,
	"vaulted-ls.1":      vaultedLs1,
	"vaulted-passwd.1":  vaultedPasswd1,
	"vaulted-rm.1":      vaultedRm1,
	"vaulted-shell.1":   vaultedShell1,
	"vaulted-upgrade.1": vaultedUpgrade1,
	"vaulted.1":         vaulted1,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"vaulted-add.1":     &bintree{vaultedAdd1, map[string]*bintree{}},
	"vaulted-cp.1":      &bintree{vaultedCp1, map[string]*bintree{}},
	"vaulted-dump.1":    &bintree{vaultedDump1, map[string]*bintree{}},
	"vaulted-edit.1":    &bintree{vaultedEdit1, map[string]*bintree{}},
	"vaulted-env.1":     &bintree{vaultedEnv1, map[string]*bintree{}},
	"vaulted-load.1":    &bintree{vaultedLoad1, map[string]*bintree{}},
	"vaulted-ls.1":      &bintree{vaultedLs1, map[string]*bintree{}},
	"vaulted-passwd.1":  &bintree{vaultedPasswd1, map[string]*bintree{}},
	"vaulted-rm.1":      &bintree{vaultedRm1, map[string]*bintree{}},
	"vaulted-shell.1":   &bintree{vaultedShell1, map[string]*bintree{}},
	"vaulted-upgrade.1": &bintree{vaultedUpgrade1, map[string]*bintree{}},
	"vaulted.1":         &bintree{vaulted1, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
